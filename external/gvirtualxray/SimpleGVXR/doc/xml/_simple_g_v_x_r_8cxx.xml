<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_simple_g_v_x_r_8cxx" kind="file" language="C++">
    <compoundname>SimpleGVXR.cxx</compoundname>
    <includes local="yes">gVirtualXRay/gVirtualXRayConfig.h</includes>
    <includes local="no">cmath</includes>
    <includes local="no">iostream</includes>
    <includes local="no">sstream</includes>
    <includes local="no">map</includes>
    <includes local="no">vector</includes>
    <includes local="no">GLFW/glfw3.h</includes>
    <includes local="yes">gVirtualXRay/XRayRenderer.h</includes>
    <includes local="yes">gVirtualXRay/PolygonMesh.h</includes>
    <includes local="yes">gVirtualXRay/OpenGLUtilities.h</includes>
    <includes local="yes">gVirtualXRay/SceneGraphBinder.h</includes>
    <includes local="yes">gVirtualXRay/AssimpSceneGraphBinder.h</includes>
    <includes local="yes">gVirtualXRay/OpenSceneGraphBinder.h</includes>
    <includes local="yes">gVirtualXRay/CubeMesh.h</includes>
    <includes local="yes">gVirtualXRay/CylinderMesh.h</includes>
    <includes local="yes">gVirtualXRay/OutOfBoundsException.h</includes>
    <includes refid="_simple_g_v_x_r_8h" local="yes">SimpleGVXR.h</includes>
    <includes local="yes">display_gl2.frag.h</includes>
    <includes local="yes">display_gl2.vert.h</includes>
    <includes local="yes">display_gl3.frag.h</includes>
    <includes local="yes">display_gl3.vert.h</includes>
    <incdepgraph>
      <node id="19">
        <label>display_gl2.frag.h</label>
      </node>
      <node id="9">
        <label>gVirtualXRay/PolygonMesh.h</label>
      </node>
      <node id="21">
        <label>display_gl3.frag.h</label>
      </node>
      <node id="2">
        <label>cmath</label>
      </node>
      <node id="13">
        <label>gVirtualXRay/OpenSceneGraphBinder.h</label>
      </node>
      <node id="15">
        <label>gVirtualXRay/CylinderMesh.h</label>
      </node>
      <node id="18">
        <label>string</label>
      </node>
      <node id="0">
        <label>SimpleGVXR.cxx</label>
        <link refid="SimpleGVXR.cxx"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>map</label>
      </node>
      <node id="7">
        <label>GLFW/glfw3.h</label>
      </node>
      <node id="10">
        <label>gVirtualXRay/OpenGLUtilities.h</label>
      </node>
      <node id="14">
        <label>gVirtualXRay/CubeMesh.h</label>
      </node>
      <node id="11">
        <label>gVirtualXRay/SceneGraphBinder.h</label>
      </node>
      <node id="6">
        <label>vector</label>
      </node>
      <node id="1">
        <label>gVirtualXRay/gVirtualXRayConfig.h</label>
      </node>
      <node id="4">
        <label>sstream</label>
      </node>
      <node id="20">
        <label>display_gl2.vert.h</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="16">
        <label>gVirtualXRay/OutOfBoundsException.h</label>
      </node>
      <node id="8">
        <label>gVirtualXRay/XRayRenderer.h</label>
      </node>
      <node id="22">
        <label>display_gl3.vert.h</label>
      </node>
      <node id="17">
        <label>SimpleGVXR.h</label>
        <link refid="_simple_g_v_x_r_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>gVirtualXRay/AssimpSceneGraphBinder.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacestd">std</innernamespace>
    <innernamespace refid="namespaceg_virtual_x_ray">gVirtualXRay</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="_simple_g_v_x_r_8cxx_1a7737bc5535f188b6f1ffffa9f9f4146c" prot="public" static="no">
        <name>GLFW_INCLUDE_GLCOREARB</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="48" column="9" bodyfile="SimpleGVXR.cxx" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1a34ebe6dac1a47161eecd8482df0a5064" prot="public" static="no" mutable="no">
        <type>std::map&lt; int, GLFWwindow * &gt;</type>
        <definition>std::map&lt;int, GLFWwindow*&gt; g_p_window_set</definition>
        <argsstring></argsstring>
        <name>g_p_window_set</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="134" column="1" bodyfile="SimpleGVXR.cxx" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1aa5a2a77a19fb9bf40111f3177ce5f140" prot="public" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; g_p_window_id_stack</definition>
        <argsstring></argsstring>
        <name>g_p_window_id_stack</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="135" column="1" bodyfile="SimpleGVXR.cxx" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1ae357f194b2f10cac8ed802e62f1472df" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool g_run_loop</definition>
        <argsstring></argsstring>
        <name>g_run_loop</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="142" column="1" bodyfile="SimpleGVXR.cxx" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1ad5e3fd881d58f8c9831eaa21d6985e09" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool g_beam_shape_initialised</definition>
        <argsstring></argsstring>
        <name>g_beam_shape_initialised</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="149" column="1" bodyfile="SimpleGVXR.cxx" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1a562f77cf659e16177175fbcdc66fae53" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool g_beam_energy_initialised</definition>
        <argsstring></argsstring>
        <name>g_beam_energy_initialised</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="150" column="1" bodyfile="SimpleGVXR.cxx" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1a74aaa3080914793c5dd7076a58d849d1" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool g_source_position_initialised</definition>
        <argsstring></argsstring>
        <name>g_source_position_initialised</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="151" column="1" bodyfile="SimpleGVXR.cxx" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1a393e44775f92eabe26940ac654228ef7" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool g_detector_position_initialised</definition>
        <argsstring></argsstring>
        <name>g_detector_position_initialised</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="152" column="1" bodyfile="SimpleGVXR.cxx" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1a2a7cbe659c281dbaa1ee90e1cf547f2a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool g_detector_up_vector_initialised</definition>
        <argsstring></argsstring>
        <name>g_detector_up_vector_initialised</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="153" column="1" bodyfile="SimpleGVXR.cxx" bodystart="153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1a7284617747f3e78c9140c68f0691a26d" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool g_detector_size_initialised</definition>
        <argsstring></argsstring>
        <name>g_detector_size_initialised</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="154" column="1" bodyfile="SimpleGVXR.cxx" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1a06e71974e229675176e3a6aba748b8c7" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool g_detector_pixel_size_initialised</definition>
        <argsstring></argsstring>
        <name>g_detector_pixel_size_initialised</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="155" column="1" bodyfile="SimpleGVXR.cxx" bodystart="155" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1a1f053d336575f3198ebc9123cff836ba" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool g_renderer_initialised</definition>
        <argsstring></argsstring>
        <name>g_renderer_initialised</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="156" column="1" bodyfile="SimpleGVXR.cxx" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1aa857b68519fdb6e0acfc31282ce2d3f3" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool g_viewer_initialised</definition>
        <argsstring></argsstring>
        <name>g_viewer_initialised</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="157" column="1" bodyfile="SimpleGVXR.cxx" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1ac1113a9c8189ee5fb87df6e10d188793" prot="public" static="no" mutable="no">
        <type>XRayBeam</type>
        <definition>XRayBeam g_xray_beam</definition>
        <argsstring></argsstring>
        <name>g_xray_beam</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="167" column="1" bodyfile="SimpleGVXR.cxx" bodystart="167" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1a8db109f24d37b87e0f14ca13dd897617" prot="public" static="no" mutable="no">
        <type>XRayDetector</type>
        <definition>XRayDetector g_xray_detector</definition>
        <argsstring></argsstring>
        <name>g_xray_detector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="168" column="1" bodyfile="SimpleGVXR.cxx" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1af96f75f6d69c309f4628f21afdd7934d" prot="public" static="no" mutable="no">
        <type>XRayRenderer</type>
        <definition>XRayRenderer g_xray_renderer</definition>
        <argsstring></argsstring>
        <name>g_xray_renderer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="169" column="1" bodyfile="SimpleGVXR.cxx" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1ad2efb49f794ff6632207f068bfe0171e" prot="public" static="no" mutable="no">
        <type>Shader</type>
        <definition>Shader g_display_shader</definition>
        <argsstring></argsstring>
        <name>g_display_shader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="171" column="1" bodyfile="SimpleGVXR.cxx" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1addd8759e633aa233eef73f44e259bfd5" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; SceneGraphBinder &gt;</type>
        <definition>std::shared_ptr&lt;SceneGraphBinder&gt; g_p_scene_graph</definition>
        <argsstring></argsstring>
        <name>g_p_scene_graph</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="173" column="1" bodyfile="SimpleGVXR.cxx" bodystart="173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1a74d96a61e61dcb9ef2710ed095f5d30d" prot="public" static="no" mutable="no">
        <type>Matrix4x4&lt; GLfloat &gt;</type>
        <definition>Matrix4x4&lt;GLfloat&gt; g_scene_rotation_matrix</definition>
        <argsstring></argsstring>
        <name>g_scene_rotation_matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="175" column="1" bodyfile="SimpleGVXR.cxx" bodystart="175" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_simple_g_v_x_r_8cxx_1a5aa71bfd1d4f54eda7c27206f3b57979" prot="public" static="no" mutable="no">
        <type>Matrix4x4&lt; GLfloat &gt;</type>
        <definition>Matrix4x4&lt;GLfloat&gt; g_sample_rotation_matrix</definition>
        <argsstring></argsstring>
        <name>g_sample_rotation_matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="176" column="1" bodyfile="SimpleGVXR.cxx" bodystart="176" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a4d111f0d4be6edc6fa33eacb67587b9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLFWwindow *</type>
        <definition>GLFWwindow * initGLFW</definition>
        <argsstring>(int aWindowID, int aVisibilityFlag)</argsstring>
        <name>initGLFW</name>
        <param>
          <type>int</type>
          <declname>aWindowID</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aVisibilityFlag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="110" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1813" bodyend="1860"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1ae5c61451a17062c5a538f9beb24d3f77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void createOpenGLContext</definition>
        <argsstring>(int aWindowID)</argsstring>
        <name>createOpenGLContext</name>
        <param>
          <type>int</type>
          <declname>aWindowID</declname>
        </param>
        <briefdescription>
<para>Create an OpenGL context (the window won&apos;t be shown). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="111" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1060" bodyend="1064"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1acebda8fed96c4239f6e993fb7014a1c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void framebufferSizeCallback</definition>
        <argsstring>(GLFWwindow *apWindow, int aWidth, int aHeight)</argsstring>
        <name>framebufferSizeCallback</name>
        <param>
          <type>GLFWwindow *</type>
          <declname>apWindow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aWidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aHeight</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="112" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1864" bodyend="1885"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a0b9e239c8889734711f29fe45551605b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void keyCallback</definition>
        <argsstring>(GLFWwindow *window, int key, int scancode, int action, int mods)</argsstring>
        <name>keyCallback</name>
        <param>
          <type>GLFWwindow *</type>
          <declname>window</declname>
        </param>
        <param>
          <type>int</type>
          <declname>key</declname>
        </param>
        <param>
          <type>int</type>
          <declname>scancode</declname>
        </param>
        <param>
          <type>int</type>
          <declname>action</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mods</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="113" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1889" bodyend="1927"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a6114f17d1fac611925bde0c58f698eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void mouseButtonCallback</definition>
        <argsstring>(GLFWwindow *apWindow, int aButton, int aButtonState, int aModifierKey)</argsstring>
        <name>mouseButtonCallback</name>
        <param>
          <type>GLFWwindow *</type>
          <declname>apWindow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aButton</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aButtonState</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aModifierKey</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="114" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1931" bodyend="1960"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a4c33a928cbf8020be4e122481b9fe028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cursorPosCallback</definition>
        <argsstring>(GLFWwindow *apWindow, double x, double y)</argsstring>
        <name>cursorPosCallback</name>
        <param>
          <type>GLFWwindow *</type>
          <declname>apWindow</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="115" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1964" bodyend="1972"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a03ee7aab9723012047631921a78cbd3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scrollCallback</definition>
        <argsstring>(GLFWwindow *apWindow, double xoffset, double yoffset)</argsstring>
        <name>scrollCallback</name>
        <param>
          <type>GLFWwindow *</type>
          <declname>apWindow</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xoffset</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yoffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="116" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1976" bodyend="1990"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a7d9edd8b0a8d0d2f737eb5ee0b0a5040" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void render</definition>
        <argsstring>()</argsstring>
        <name>render</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="117" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1994" bodyend="2228"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a2463a3acef2df4c951ce942a3229e44e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void quit</definition>
        <argsstring>()</argsstring>
        <name>quit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="118" column="1" bodyfile="SimpleGVXR.cxx" bodystart="2232" bodyend="2237"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a4e8175390ee624e61977e1ab6006f903" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void errorCallback</definition>
        <argsstring>(int error, const char *description)</argsstring>
        <name>errorCallback</name>
        <param>
          <type>int</type>
          <declname>error</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="119" column="1" bodyfile="SimpleGVXR.cxx" bodystart="2241" bodyend="2246"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a12791d9e49a2fd3306290a226864aba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initGL</definition>
        <argsstring>()</argsstring>
        <name>initGL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="120" column="1" bodyfile="SimpleGVXR.cxx" bodystart="2250" bodyend="2331"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a5b050fb25b49c12909a54ed5f8e6387b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initialiseXRayRenderer</definition>
        <argsstring>()</argsstring>
        <name>initialiseXRayRenderer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="121" column="1" bodyfile="SimpleGVXR.cxx" bodystart="2335" bodyend="2363"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a8bf8b6c1e4f1b675e87ba3c78886a817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initViewer</definition>
        <argsstring>()</argsstring>
        <name>initViewer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="122" column="1" bodyfile="SimpleGVXR.cxx" bodystart="2367" bodyend="2387"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a7fd738ef3633de086f12438baa6e35d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void computeRotation</definition>
        <argsstring>(GLFWwindow *apWindow, MATRIX4 &amp;aRotationMatrix)</argsstring>
        <name>computeRotation</name>
        <param>
          <type>GLFWwindow *</type>
          <declname>apWindow</declname>
        </param>
        <param>
          <type>MATRIX4 &amp;</type>
          <declname>aRotationMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="123" column="1" bodyfile="SimpleGVXR.cxx" bodystart="2391" bodyend="2419"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a76247bb89e8e48ab4e38bf7af4c3bed5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Vec3&lt; GLfloat &gt;</type>
        <definition>Vec3&lt; GLfloat &gt; getArcballVector</definition>
        <argsstring>(GLFWwindow *apWindow, int x, int y)</argsstring>
        <name>getArcballVector</name>
        <param>
          <type>GLFWwindow *</type>
          <declname>apWindow</declname>
        </param>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="124" column="1" bodyfile="SimpleGVXR.cxx" bodystart="2423" bodyend="2447"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a962becf57ef421ee5cb682c3ea218c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float radian2degree</definition>
        <argsstring>(float anAngle)</argsstring>
        <name>radian2degree</name>
        <param>
          <type>float</type>
          <declname>anAngle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="125" column="1" bodyfile="SimpleGVXR.cxx" bodystart="2451" bodyend="2455"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1aa03b2a347ce9e5555f2bfa9130961fb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; float &gt; &gt; getVectorImage</definition>
        <argsstring>(const Image&lt; float &gt; &amp;anImage)</argsstring>
        <name>getVectorImage</name>
        <param>
          <type>const Image&lt; float &gt; &amp;</type>
          <declname>anImage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="126" column="1" bodyfile="SimpleGVXR.cxx" bodystart="2553" bodyend="2566"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1af70fa52be6cdb8ee67a00b6e9d626402" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>MATRIX4</type>
        <definition>MATRIX4 Vector2gvxrMatrix</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;aNumpyMatrix)</argsstring>
        <name>Vector2gvxrMatrix</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>aNumpyMatrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="127" column="1" bodyfile="SimpleGVXR.cxx" bodystart="2569" bodyend="2586"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a331b4b7457ff8817532406644ed3348d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; float &gt; &gt; gvxrMatrix2Vector</definition>
        <argsstring>(const MATRIX4 &amp;aMatrix4)</argsstring>
        <name>gvxrMatrix2Vector</name>
        <param>
          <type>const MATRIX4 &amp;</type>
          <declname>aMatrix4</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="128" column="1" bodyfile="SimpleGVXR.cxx" bodystart="2589" bodyend="2615"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a244d2be4750cf65265bfd1fcb35c4d22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const GLfloat</type>
        <definition>const GLfloat ROTATION_SPEED</definition>
        <argsstring>(2.0)</argsstring>
        <name>ROTATION_SPEED</name>
        <param>
          <type>2.</type>
          <declname>0</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a091514ccb7dfd314a16ae0fae9aafc6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const double</type>
        <definition>const double g_initial_fovy</definition>
        <argsstring>(45)</argsstring>
        <name>g_initial_fovy</name>
        <param>
          <type>45</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a2eb20679a05ddf7415b8f454c91619d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double g_initial_near</definition>
        <argsstring>(5.0 *cm)</argsstring>
        <name>g_initial_near</name>
        <param>
          <type>5.0 *</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a318a52943f992004086f474df68ee536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double g_initial_far</definition>
        <argsstring>(500.0 *cm)</argsstring>
        <name>g_initial_far</name>
        <param>
          <type>500.0 *</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a341099657fa73d652ad775efe88b07d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLfloat</type>
        <definition>GLfloat g_zoom</definition>
        <argsstring>(120.0 *cm)</argsstring>
        <name>g_zoom</name>
        <param>
          <type>120.0 *</type>
          <declname>cm</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a91670fe6ec1931de996fc534aedcfda3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool g_display_beam</definition>
        <argsstring>(true)</argsstring>
        <name>g_display_beam</name>
        <param>
          <type>true</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1ac7b463a98bcb92620e118a437a84df45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool g_display_wireframe</definition>
        <argsstring>(false)</argsstring>
        <name>g_display_wireframe</name>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1afa0f12dbb9a81f6cf87486e5de6e24b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool g_use_lighing</definition>
        <argsstring>(true)</argsstring>
        <name>g_use_lighing</name>
        <param>
          <type>true</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a5370548288ce28c79167cd76bebd2a3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool g_display_detector</definition>
        <argsstring>(true)</argsstring>
        <name>g_display_detector</name>
        <param>
          <type>true</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a1ea1af9048700970da8ccbfa3bb1d4b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool g_display_normal_vectors</definition>
        <argsstring>(false)</argsstring>
        <name>g_display_normal_vectors</name>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a7d7cb3437c2f952c16ee31c8b2b4db11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int g_button</definition>
        <argsstring>(-1)</argsstring>
        <name>g_button</name>
        <param>
          <type>-</type>
          <declname>1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a6b875a024fac87353b2d167847a69f75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int g_button_state</definition>
        <argsstring>(-1)</argsstring>
        <name>g_button_state</name>
        <param>
          <type>-</type>
          <declname>1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a54af1eaa06b271e730b158ef04b91b91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool g_use_arc_ball</definition>
        <argsstring>(false)</argsstring>
        <name>g_use_arc_ball</name>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a16690f3794b723799a56a7c74eba3621" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLint</type>
        <definition>GLint g_last_x_position</definition>
        <argsstring>(0)</argsstring>
        <name>g_last_x_position</name>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a1b7c055dbacaeefa0fd4b2b6d76f17d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLint</type>
        <definition>GLint g_last_y_position</definition>
        <argsstring>(0)</argsstring>
        <name>g_last_y_position</name>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1ac13f9bda38bc77ba499dfc217e9cf115" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLint</type>
        <definition>GLint g_current_x_position</definition>
        <argsstring>(0)</argsstring>
        <name>g_current_x_position</name>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a9f8ce8ca0a49d78fabd7e31b21182b6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>GLint</type>
        <definition>GLint g_current_y_position</definition>
        <argsstring>(0)</argsstring>
        <name>g_current_y_position</name>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a1495a8a83ee7a799ed9375bc540286cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getMajorVersionOfSimpleGVXR</definition>
        <argsstring>()</argsstring>
        <name>getMajorVersionOfSimpleGVXR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accessor on the major version of SimpleGVXR. This number is changed when incompatible API changes have been made. <simplesect kind="return"><para>the major version number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="180" column="1" bodyfile="SimpleGVXR.cxx" bodystart="180" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a8dda75e417383f05f8a67d0d805a7ee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getMinorVersionOfSimpleGVXR</definition>
        <argsstring>()</argsstring>
        <name>getMinorVersionOfSimpleGVXR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accessor on the minor version of SimpleGVXR. This number is changed when new functionalities have been added in a backwards-compatible manner. <simplesect kind="return"><para>the minor version number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="188" column="1" bodyfile="SimpleGVXR.cxx" bodystart="188" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a434fed454c84dfebf5d5df27389f38f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getPatchVersionOfSimpleGVXR</definition>
        <argsstring>()</argsstring>
        <name>getPatchVersionOfSimpleGVXR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accessor on the minor version of SimpleGVXR. This number is changed when bug fixes have been added in a backwards-compatible manner. <simplesect kind="return"><para>the patch version number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="196" column="1" bodyfile="SimpleGVXR.cxx" bodystart="196" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1aadc6cf5b2124f80f1e41bdb967aafab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getVersionOfSimpleGVXR</definition>
        <argsstring>()</argsstring>
        <name>getVersionOfSimpleGVXR</name>
        <briefdescription>
<para>Accessor on the full string version of SimpleGVXR. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the full version number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="204" column="1" bodyfile="SimpleGVXR.cxx" bodystart="204" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1ae93a55835dcd40c50336c8a0ef67d838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setSourcePosition</definition>
        <argsstring>(double x, double y, double z, const char *aUnitOfLength)</argsstring>
        <name>setSourcePosition</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
<para>Set the position of the X-ray source. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the position along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the position along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the position along the Z-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the x, y and z parameters. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="220" column="1" bodyfile="SimpleGVXR.cxx" bodystart="220" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1ae15b7f508c8831dc2cdc47cd800b1f44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setDetectorPosition</definition>
        <argsstring>(double x, double y, double z, const char *aUnitOfLength)</argsstring>
        <name>setDetectorPosition</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
<para>Set the position of the X-ray detector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the position along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the position along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the position along the Z-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the x, y and z parameters. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="236" column="1" bodyfile="SimpleGVXR.cxx" bodystart="236" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a5a72f299c3609e4d76eeeea958ea65c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setDetectorUpVector</definition>
        <argsstring>(double x, double y, double z)</argsstring>
        <name>setDetectorUpVector</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Set the up-vector defining the orientation of the X-ray detector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the component of the vector along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the component of the vector along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the component of the vector along the Z-axis </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="252" column="1" bodyfile="SimpleGVXR.cxx" bodystart="252" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a83bbebef7177c94a6211a39694ef83fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setDetectorNumberOfPixels</definition>
        <argsstring>(int aWidth, int aHeight)</argsstring>
        <name>setDetectorNumberOfPixels</name>
        <param>
          <type>int</type>
          <declname>aWidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aHeight</declname>
        </param>
        <briefdescription>
<para>Set the number of pixels of the X-ray detector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of pixels along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of pixels along the Y-axis </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="265" column="1" bodyfile="SimpleGVXR.cxx" bodystart="265" bodyend="274"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1ab9eaebb3664cfc1b9876a73721ad4b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setDetectorPixelSize</definition>
        <argsstring>(double aWidth, double aHeight, const char *aUnitOfLength)</argsstring>
        <name>setDetectorPixelSize</name>
        <param>
          <type>double</type>
          <declname>aWidth</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aHeight</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
<para>Set the pixel size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>the pixel size along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>the pixel size along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the aWidth and aHeight parameters. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="278" column="1" bodyfile="SimpleGVXR.cxx" bodystart="278" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a2764fb38f827332117873a3a19a8f53b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void loadMeshFile</definition>
        <argsstring>(const char *aLabel, const char *aFileName, const char *aUnitOfLength)</argsstring>
        <name>loadMeshFile</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>aFileName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a polygon mesh from a file, set its label in the scenegraph (i.e. identifier) and add it to the X-ray renderer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label in the scenegraph </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>the file where the polygon mesh data is stored </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the data stored in the file. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="293" column="1" bodyfile="SimpleGVXR.cxx" bodystart="293" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1ab41d4e142f38b2c6db0f8c9ecd3d4279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void loadSceneGraph</definition>
        <argsstring>(const char *aFileName, const char *aUnitOfLength)</argsstring>
        <name>loadSceneGraph</name>
        <param>
          <type>const char *</type>
          <declname>aFileName</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a scenegraph from a file and add its polygon meshes to the X-ray renderer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>the file where the polygon mesh data is stored </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the data stored in the file. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="319" column="1" bodyfile="SimpleGVXR.cxx" bodystart="319" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a4f9e2568569935f573173c9735562047" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void emptyMesh</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>emptyMesh</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an empty polygon mesh and set its label in the scenegraph (i.e. identifier). Note that it is not added to the X-ray renderer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label in the scenegraph </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="359" column="1" bodyfile="SimpleGVXR.cxx" bodystart="359" bodyend="369"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a41c316efb6de8e4ae7f1a7ec49ef3ebe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void makeCube</definition>
        <argsstring>(const std::string &amp;aLabel, double aLength, const char *aUnitOfLength)</argsstring>
        <name>makeCube</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aLength</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>aUnitOfLength</declname>
          <defval>&quot;cm&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a cube and set its label in the scenegraph (i.e. identifier). Note that it is not added to the X-ray renderer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label in the scenegraph </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of an edge of the cube </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to aLength. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; (default value: &quot;cm&quot;) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="372" column="1" bodyfile="SimpleGVXR.cxx" bodystart="372" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1af827fb55e3c524e0bc151a4157c424b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void makeCylinder</definition>
        <argsstring>(const std::string &amp;aLabel, unsigned int aNumberOfSectors, double aHeight, double aRadius, const char *aUnitOfLength)</argsstring>
        <name>makeCylinder</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>aNumberOfSectors</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>double</type>
          <declname>aHeight</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>aRadius</declname>
          <defval>0.5</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>aUnitOfLength</declname>
          <defval>&quot;cm&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a cylinder and set its label in the scenegraph (i.e. identifier). Note that it is not added to the X-ray renderer. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label in the scenegraph </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aNumberOfSectors</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of sector defining the mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the cylinder </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>the radius of the cylinder </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to aHeight and aRadius. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; (default value: &quot;cm&quot;) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="385" column="1" bodyfile="SimpleGVXR.cxx" bodystart="385" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a7439a61c9cb4e6118810ec4fa5e40d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addMesh</definition>
        <argsstring>(const std::string &amp;aDestination, const std::string &amp;aSource)</argsstring>
        <name>addMesh</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aDestination</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aSource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a polygon mesh (aSource) to another one (aDestination). It corresponds to the operation as follows: aDestination += aSource. Both aSource and aDestination have to already exist in the scenegraph. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aDestination</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh that is going to be modified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aSource</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh that is going to be added to aDestination </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="405" column="1" bodyfile="SimpleGVXR.cxx" bodystart="405" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1aa2d38b8483e2ca9fe23259b383859314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void subtractMesh</definition>
        <argsstring>(const std::string &amp;aDestination, const std::string &amp;aSource)</argsstring>
        <name>subtractMesh</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aDestination</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aSource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtract a polygon mesh (aSource) from another one (aDestination). It corresponds to the operation as follows: aDestination -= aSource. Both aSource and aDestination have to already exist in the scenegraph. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aDestination</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh that is going to be modified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aSource</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh that is going to be subtracted from aDestination </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="434" column="1" bodyfile="SimpleGVXR.cxx" bodystart="434" bodyend="460"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a4ad99ec0f832f52c892c94202a543b25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>vector&lt; string &gt;</type>
        <definition>vector&lt;string&gt; getMeshLabelSet</definition>
        <argsstring>()</argsstring>
        <name>getMeshLabelSet</name>
        <briefdescription>
<para>Accessor on the list of labels of polygon meshes in the scenegraph. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the list of labels </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="464" column="1" bodyfile="SimpleGVXR.cxx" bodystart="464" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a299f801fefafce46ffb589b1d5e45e99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int getMeshLabelSetSize</definition>
        <argsstring>()</argsstring>
        <name>getMeshLabelSetSize</name>
        <briefdescription>
<para>Accessor on the number of polygon meshes in the scenegraph. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of polygon meshes in the scenegraph </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="484" column="1" bodyfile="SimpleGVXR.cxx" bodystart="484" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1ac7237c93a88077d9c56721c516024869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getMeshLabel</definition>
        <argsstring>(unsigned int i)</argsstring>
        <name>getMeshLabel</name>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Accessor on the i-th label in the list of polygon meshes in the scenegraph. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the polygon mesh </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the label corresponding to the i-th polygon mesh </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="490" column="1" bodyfile="SimpleGVXR.cxx" bodystart="490" bodyend="513"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a193db9e9eab8b3205d126387789e6907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addPolygonMeshAsInnerSurface</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>addPolygonMeshAsInnerSurface</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
<para>Add a polygon mesh, given its label, to the X-ray renderer as an inner surface. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh in the scenegraph </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="517" column="1" bodyfile="SimpleGVXR.cxx" bodystart="517" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a71f514bb1ae0ca2e9fd19b3423685cb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addPolygonMeshAsOuterSurface</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>addPolygonMeshAsOuterSurface</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
<para>Add a polygon mesh, given its label, to the X-ray renderer as an outer surface. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh in the scenegraph </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="542" column="1" bodyfile="SimpleGVXR.cxx" bodystart="542" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1af582363bdb3958279767ca1459c52173" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void removePolygonMeshesFromSceneGraph</definition>
        <argsstring>()</argsstring>
        <name>removePolygonMeshesFromSceneGraph</name>
        <briefdescription>
<para>Empty the scenegraph. Note that it also empties the X-ray renderer from all its meshes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="567" column="1" bodyfile="SimpleGVXR.cxx" bodystart="567" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1abb5ac6fa1e360fb8db58f63fc1453f20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void removePolygonMeshesFromXRayRenderer</definition>
        <argsstring>()</argsstring>
        <name>removePolygonMeshesFromXRayRenderer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Empty the X-ray renderer from all its meshes. Note that the meshes are kept in the scenegraph. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="582" column="1" bodyfile="SimpleGVXR.cxx" bodystart="582" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a73d0586e23fcb2f1f3fc1bb5dbe96924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void moveToCentre</definition>
        <argsstring>()</argsstring>
        <name>moveToCentre</name>
        <briefdescription>
<para>Move the scenegraph to the centre. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="591" column="1" bodyfile="SimpleGVXR.cxx" bodystart="591" bodyend="603"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a931aa02220c52492126298021cf03997" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void moveToCenter</definition>
        <argsstring>()</argsstring>
        <name>moveToCenter</name>
        <briefdescription>
<para>Move the scenegraph to the centre. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="607" column="1" bodyfile="SimpleGVXR.cxx" bodystart="607" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1aaf043c777543744460cfe5ac236b059f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void moveToCentre</definition>
        <argsstring>(const char *aLabel)</argsstring>
        <name>moveToCentre</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
<para>Move a polygon mesh to the centre. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="615" column="1" bodyfile="SimpleGVXR.cxx" bodystart="615" bodyend="638"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a1d9a363d96b1b4ae23082ed4d92dedf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void moveToCenter</definition>
        <argsstring>(const char *aLabel)</argsstring>
        <name>moveToCenter</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
<para>Move a polygon mesh to the centre. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="642" column="1" bodyfile="SimpleGVXR.cxx" bodystart="642" bodyend="646"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a2f49a3f43adf0127cdc1aa3c76441261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scaleNode</definition>
        <argsstring>(const char *aLabel, double x, double y, double z, const char *aUnitOfLength)</argsstring>
        <name>scaleNode</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
<para>Scale a polygon mesh. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="649" column="1" bodyfile="SimpleGVXR.cxx" bodystart="649" bodyend="673"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a67a9fa87c064a36820d08d34f1ea8fd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rotateNode</definition>
        <argsstring>(const char *aLabel, double angle, double x, double y, double z)</argsstring>
        <name>rotateNode</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Rotate a polygon mesh. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="676" column="1" bodyfile="SimpleGVXR.cxx" bodystart="676" bodyend="699"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1aca5adfa4af593b9bb92c6536aaa6be67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void translateNode</definition>
        <argsstring>(const char *aLabel, double x, double y, double z, const char *aUnitOfLength)</argsstring>
        <name>translateNode</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
<para>Translate a polygon mesh. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="702" column="1" bodyfile="SimpleGVXR.cxx" bodystart="702" bodyend="726"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1ae80cfca75f6e77016d9c32ed152e763b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resetSceneTransformation</definition>
        <argsstring>()</argsstring>
        <name>resetSceneTransformation</name>
        <briefdescription>
<para>Replace the 3-D transformation matrix of the overall 3-D scene by an identity matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="729" column="1" bodyfile="SimpleGVXR.cxx" bodystart="729" bodyend="732"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a4e83d2fccc2ab051b1aaa55bef18420a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scaleScene</definition>
        <argsstring>(double x, double y, double z, const char *aUnitOfLength)</argsstring>
        <name>scaleScene</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
<para>Scale the 3-D scene (all the polygon meshes will be affected but not modified). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="735" column="1" bodyfile="SimpleGVXR.cxx" bodystart="735" bodyend="740"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a78d1566edfdde6da7eb00079e6dc5ed0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rotateScene</definition>
        <argsstring>(double angle, double x, double y, double z)</argsstring>
        <name>rotateScene</name>
        <param>
          <type>double</type>
          <declname>angle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Rotate the 3-D scene (all the polygon meshes will be affected but not modified). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="743" column="1" bodyfile="SimpleGVXR.cxx" bodystart="743" bodyend="747"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1aba27858b8358133de659436c75e364b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void translateScene</definition>
        <argsstring>(double x, double y, double z, const char *aUnitOfLength)</argsstring>
        <name>translateScene</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
<para>Translate the 3-D scene (all the polygon meshes will be affected but not modified). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="750" column="1" bodyfile="SimpleGVXR.cxx" bodystart="750" bodyend="755"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a5d02d6f2cbfb9ed1059c045520f1973f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;float&gt; &gt; getSceneTransformationMatrix</definition>
        <argsstring>()</argsstring>
        <name>getSceneTransformationMatrix</name>
        <briefdescription>
<para>Accessor on the 3-D scene transformation matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="758" column="1" bodyfile="SimpleGVXR.cxx" bodystart="758" bodyend="761"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1aa4aa9748df310aea560042330f573502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;float&gt; &gt; getRootTransformationMatrix</definition>
        <argsstring>()</argsstring>
        <name>getRootTransformationMatrix</name>
        <briefdescription>
<para>Accessor on the transformation matrix of the scengraph&apos;s root node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="764" column="1" bodyfile="SimpleGVXR.cxx" bodystart="764" bodyend="772"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1afe0599571c6802c92c18cf4b0e836ec3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;float&gt; &gt; getNodeTransformationMatrix</definition>
        <argsstring>(const char *aLabel)</argsstring>
        <name>getNodeTransformationMatrix</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
<para>Accessor on the transformation matrix of a given node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="775" column="1" bodyfile="SimpleGVXR.cxx" bodystart="775" bodyend="795"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1aa72652349c8b3370dfb1eabdbf52a8c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setSceneTransformationMatrix</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;aMatrix)</argsstring>
        <name>setSceneTransformationMatrix</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>aMatrix</declname>
        </param>
        <briefdescription>
<para>Set the 3-D scene transformation matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="798" column="1" bodyfile="SimpleGVXR.cxx" bodystart="798" bodyend="801"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a26b47d2b671031d42999f441001d1f5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setRootTransformationMatrix</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;aMatrix)</argsstring>
        <name>setRootTransformationMatrix</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>aMatrix</declname>
        </param>
        <briefdescription>
<para>Set the transformation matrix of the scengraph&apos;s root node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="804" column="1" bodyfile="SimpleGVXR.cxx" bodystart="804" bodyend="814"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a6599a4e12fb25b9234e480fa592374f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setNodeTransformationMatrix</definition>
        <argsstring>(const char *aLabel, const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;aMatrix)</argsstring>
        <name>setNodeTransformationMatrix</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>aMatrix</declname>
        </param>
        <briefdescription>
<para>Set the transformation matrix of a given node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="817" column="1" bodyfile="SimpleGVXR.cxx" bodystart="817" bodyend="839"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a653497f2fe03995b005714e9baf41ab2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setHU</definition>
        <argsstring>(const char *aLabel, short HU)</argsstring>
        <name>setHU</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>short</type>
          <declname>HU</declname>
        </param>
        <briefdescription>
<para>Set the Hounsfield value corresponding to the material properties of a polygon mesh. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="843" column="1" bodyfile="SimpleGVXR.cxx" bodystart="843" bodyend="860"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1acc5f29c5cfa9c92d4d2ec33c6d2651f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setHounsfieldUnit</definition>
        <argsstring>(const char *aLabel, short HU)</argsstring>
        <name>setHounsfieldUnit</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>short</type>
          <declname>HU</declname>
        </param>
        <briefdescription>
<para>Set the Hounsfield value corresponding to the material properties of a polygon mesh. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="864" column="1" bodyfile="SimpleGVXR.cxx" bodystart="864" bodyend="868"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a75fb82bed7ec009464d128540c7e2c8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setHounsfieldValue</definition>
        <argsstring>(const char *aLabel, short HU)</argsstring>
        <name>setHounsfieldValue</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>short</type>
          <declname>HU</declname>
        </param>
        <briefdescription>
<para>Set the Hounsfield value corresponding to the material properties of a polygon mesh. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="872" column="1" bodyfile="SimpleGVXR.cxx" bodystart="872" bodyend="876"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1ace7e5a45b69dd79c671a3a50f7a035be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setElement</definition>
        <argsstring>(const char *aLabel, unsigned short Z)</argsstring>
        <name>setElement</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>Z</declname>
        </param>
        <briefdescription>
<para>Set the chemical element (or element) corresponding to the material properties of a polygon mesh. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="880" column="1" bodyfile="SimpleGVXR.cxx" bodystart="880" bodyend="897"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a3d851798db84675f4ad5ca052b455091" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setElement</definition>
        <argsstring>(const char *aLabel, const std::string &amp;aName)</argsstring>
        <name>setElement</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aName</declname>
        </param>
        <briefdescription>
<para>Set the chemical element (or element) corresponding to the material properties of a polygon mesh. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="901" column="1" bodyfile="SimpleGVXR.cxx" bodystart="901" bodyend="918"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a55136c85a785b670f92d16b0dff5783b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setMixture</definition>
        <argsstring>(const char *aLabel, const std::string &amp;aName)</argsstring>
        <name>setMixture</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aMixture</declname>
          <defname>aName</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the mixture corresponding to the material properties of a polygon mesh. Don&apos;t forget to set the density of the material. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="922" column="1" bodyfile="SimpleGVXR.cxx" bodystart="922" bodyend="939"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1afb81ed7c64dd28b43797866c1ac900f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setCompound</definition>
        <argsstring>(const char *aLabel, const std::string &amp;aName)</argsstring>
        <name>setCompound</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aCompound</declname>
          <defname>aName</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the compound corresponding to the material properties of a polygon mesh. Don&apos;t forget to set the density of the material. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="943" column="1" bodyfile="SimpleGVXR.cxx" bodystart="943" bodyend="960"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a232cbbb1732c30eeb1f32973bbade6df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setMassAttenuationCoefficient</definition>
        <argsstring>(const char *aLabel, double aCoefficient, const char *aUnit)</argsstring>
        <name>setMassAttenuationCoefficient</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aCoefficient</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>aUnit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the mass attenuation coefficient corresponding to the material properties of a polygon mesh. Don&apos;t forget to set the density of the material. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="964" column="1" bodyfile="SimpleGVXR.cxx" bodystart="964" bodyend="988"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1aef13682407b489bbe2d051b861e2871e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setLinearAttenuationCoefficient</definition>
        <argsstring>(const char *aLabel, double aCoefficient, const char *aUnit)</argsstring>
        <name>setLinearAttenuationCoefficient</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aCoefficient</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>aUnit</declname>
        </param>
        <briefdescription>
<para>Set the linear attenuation coefficient corresponding to the material properties of a polygon mesh. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="992" column="1" bodyfile="SimpleGVXR.cxx" bodystart="992" bodyend="1017"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a1de0d64006c42f55d73d7363283c4bc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setMu</definition>
        <argsstring>(const char *aLabel, double aCoefficient, const char *aUnit)</argsstring>
        <name>setMu</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aCoefficient</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>aUnit</declname>
        </param>
        <briefdescription>
<para>Set the linear attenuation coefficient corresponding to the material properties of a polygon mesh. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1021" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1021" bodyend="1027"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1ae20e1bd684b82d9c5ccbda5f11f63026" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setDensity</definition>
        <argsstring>(const char *aLabel, double aDensity, const char *aUnit)</argsstring>
        <name>setDensity</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aDensity</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>aUnit</declname>
        </param>
        <briefdescription>
<para>Set the density corresponding to the material properties of a polygon mesh. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1031" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1031" bodyend="1056"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1ae11b1893d5d78a737e6e1e7a0de53c17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void createWindow</definition>
        <argsstring>(int aWindowID, int aVisibilityFlag)</argsstring>
        <name>createWindow</name>
        <param>
          <type>int</type>
          <declname>aWindowID</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aVisibilityFlag</declname>
        </param>
        <briefdescription>
<para>Create an OpenGL context and display it in a window. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1068" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1068" bodyend="1140"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a2eded3b6cb2c34fcd5438faac37ad6a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setWindowSize</definition>
        <argsstring>(int aWidth, int aHeight, int aWindowID)</argsstring>
        <name>setWindowSize</name>
        <param>
          <type>int</type>
          <declname>aWidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aHeight</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aWindowID</declname>
        </param>
        <briefdescription>
<para>Create an OpenGL context and display it in a window. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1144" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1144" bodyend="1183"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a5770bf7a208ae69a1c04acf1222e9336" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void displayScene</definition>
        <argsstring>(int aWindowID)</argsstring>
        <name>displayScene</name>
        <param>
          <type>int</type>
          <declname>aWindowID</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>3-D visualisation of the 3-D scene (source, detector, and scanned objects). Note that there is no interactive loop running. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1187" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1187" bodyend="1243"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a8ded934b4b712278626957a4cf8c4201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void renderLoop</definition>
        <argsstring>(int aWindowID)</argsstring>
        <name>renderLoop</name>
        <param>
          <type>int</type>
          <declname>aWindowID</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>3-D visualisation of the 3-D scene (source, detector, and scanned objects). Note that there is interactive loop running. Keys are:<itemizedlist>
<listitem><para>Q/Escape: to quit the event loop (does not close the window)</para></listitem><listitem><para>B: display/hide the X-ray beam</para></listitem><listitem><para>W: display the polygon meshes in solid or wireframe</para></listitem><listitem><para>N: display the X-ray image in negative or positive</para></listitem><listitem><para>L: switch lighting on/off</para></listitem><listitem><para>D: display/hide the X-ray detector</para></listitem><listitem><para>V: display/hide normal vectors </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1247" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1247" bodyend="1309"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a9f8417418b2ab24baf0b5d6777da3522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void showWindow</definition>
        <argsstring>(int aWindowID)</argsstring>
        <name>showWindow</name>
        <param>
          <type>int</type>
          <declname>aWindowID</declname>
        </param>
        <briefdescription>
<para>Make an OpenGL context visible and display a window. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1313" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1313" bodyend="1351"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a07fc816e23961dfb137144fc4c6700d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hideWindow</definition>
        <argsstring>(int aWindowID)</argsstring>
        <name>hideWindow</name>
        <param>
          <type>int</type>
          <declname>aWindowID</declname>
        </param>
        <briefdescription>
<para>Hide a window. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1355" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1355" bodyend="1393"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1ad2129faba77d21af9a2402bde522d8e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroyWindow</definition>
        <argsstring>(int aWindowID)</argsstring>
        <name>destroyWindow</name>
        <param>
          <type>int</type>
          <declname>aWindowID</declname>
        </param>
        <briefdescription>
<para>Close and destroy a given window or OpenGL context. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1397" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1397" bodyend="1450"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a6d922c10aad04c2aa7e9af749a4e1268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroyAllWindows</definition>
        <argsstring>()</argsstring>
        <name>destroyAllWindows</name>
        <briefdescription>
<para>Close and destroy all the windows and OpenGL contexts that have been created. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1454" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1454" bodyend="1468"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a7fa8f9b4050b5727cd05529f320a5251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usePointSource</definition>
        <argsstring>()</argsstring>
        <name>usePointSource</name>
        <briefdescription>
<para>Use a point source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1472" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1472" bodyend="1480"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a0445b8fe702aeeca5f2b451bcab79836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void useParallelBeam</definition>
        <argsstring>()</argsstring>
        <name>useParallelBeam</name>
        <briefdescription>
<para>Use a parallel source (e.g. to mimic a source that is extremely far from the scanned object and detector). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1484" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1484" bodyend="1493"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1af0d213ffe3069b549499398f7b75dc97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void useParallelSource</definition>
        <argsstring>()</argsstring>
        <name>useParallelSource</name>
        <briefdescription>
<para>Use a parallel source (e.g. to mimic a source that is extremely far from the scanned object and detector). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1497" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1497" bodyend="1501"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a82f5d828b75f302d2ccdfba39d2f16b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resetBeamSpectrum</definition>
        <argsstring>()</argsstring>
        <name>resetBeamSpectrum</name>
        <briefdescription>
<para>Empty the beam spectrum. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1505" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1505" bodyend="1510"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a9158ac51c22c3fca44a78c889a70a1de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setMonoChromatic</definition>
        <argsstring>(double anEnergy, const char *aUnitOfEnergy, double aNumberOfPhotons)</argsstring>
        <name>setMonoChromatic</name>
        <param>
          <type>double</type>
          <declname>anEnergy</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>aUnitOfEnergy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aNumberOfPhotons</declname>
        </param>
        <briefdescription>
<para>Use a monochromatic beam spectrum (i.e. one single energy). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1514" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1514" bodyend="1521"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1aba774aa741a1824df3e79bac35d7f2e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addEnergyBinToSpectrum</definition>
        <argsstring>(double anEnergy, const char *aUnitOfEnergy, double aNumberOfPhotons)</argsstring>
        <name>addEnergyBinToSpectrum</name>
        <param>
          <type>double</type>
          <declname>anEnergy</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>aUnitOfEnergy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aNumberOfPhotons</declname>
        </param>
        <briefdescription>
<para>Add an energy bin to the beam spectrum (useful to generate polychromatism). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1525" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1525" bodyend="1535"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1afc2c57faf356eebf4484f6e025a4f06c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void saveLastXRayImage</definition>
        <argsstring>(const char *aFileName)</argsstring>
        <name>saveLastXRayImage</name>
        <param>
          <type>const char *</type>
          <declname>aFileName</declname>
        </param>
        <briefdescription>
<para>Save the last X-ray image that has been computed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1539" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1539" bodyend="1551"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a0b9e08f766aa312f7f573c344314336c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void saveLastLBuffer</definition>
        <argsstring>(const char *aFileName)</argsstring>
        <name>saveLastLBuffer</name>
        <param>
          <type>const char *</type>
          <declname>aFileName</declname>
        </param>
        <briefdescription>
<para>Save the last L-buffer that has been computed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1555" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1555" bodyend="1567"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1ac82ce51be7d57da5d75d9d33aace2723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void saveLastSinogram</definition>
        <argsstring>(const char *aFileName)</argsstring>
        <name>saveLastSinogram</name>
        <param>
          <type>const char *</type>
          <declname>aFileName</declname>
        </param>
        <briefdescription>
<para>Save the last sinogram that has been computed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1571" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1571" bodyend="1583"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1acd097bdd4b2ab5f9b8fc8991b316e533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enableArtefactFilteringOnGPU</definition>
        <argsstring>(void)</argsstring>
        <name>enableArtefactFilteringOnGPU</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enable artefact filtering on GPU (it is fast but can be inaccurate). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1587" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1587" bodyend="1591"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a5898aa8c45e6c34137f10978b1d49526" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enableArtifactFilteringOnGPU</definition>
        <argsstring>(void)</argsstring>
        <name>enableArtifactFilteringOnGPU</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enable artefact filtering on GPU (it is fast but can be inaccurate). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1595" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1595" bodyend="1599"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1aed410cdfc2b9d1d28d6820e6bfb57324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enableArtefactFilteringOnCPU</definition>
        <argsstring>(void)</argsstring>
        <name>enableArtefactFilteringOnCPU</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enable artefact filtering on CPU (can be extremely slow as it makes use of ray-tracing). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1603" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1603" bodyend="1607"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a7ef2b71a4bf9d57e06e975de75ba88dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enableArtifactFilteringOnCPU</definition>
        <argsstring>(void)</argsstring>
        <name>enableArtifactFilteringOnCPU</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enable artefact filtering on CPU (can be extremely slow as it makes use of ray-tracing). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1611" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1611" bodyend="1615"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a8825c3ab5571de7f6e665c944149a09f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void disableArtefactFiltering</definition>
        <argsstring>(void)</argsstring>
        <name>disableArtefactFiltering</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disable artefact filtering altogether. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1619" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1619" bodyend="1624"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a73f8d211018dc40e3c3f17400230ffc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void disableArtifactFiltering</definition>
        <argsstring>(void)</argsstring>
        <name>disableArtifactFiltering</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disable artefact filtering altogether. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1628" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1628" bodyend="1632"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a5451b6f54339116e72cba6cc58e01be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;float&gt; &gt; computeXRayImage</definition>
        <argsstring>()</argsstring>
        <name>computeXRayImage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the X-ray projection corresponding to the environment that has previously been set, i.e.<itemizedlist>
<listitem><para>Detector position</para></listitem><listitem><para>Detector orientation</para></listitem><listitem><para>Detector size and resolution</para></listitem><listitem><para>Source position</para></listitem><listitem><para>Source shape</para></listitem><listitem><para>Beam spectrum</para></listitem><listitem><para>Scanned object geometries</para></listitem><listitem><para>Scanned object material properties </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1636" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1636" bodyend="1659"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a554ae5ddaf102a77ec7152fee10917fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;float&gt; &gt; computeLBuffer</definition>
        <argsstring>(const char *aLabel)</argsstring>
        <name>computeLBuffer</name>
        <param>
          <type>const char *</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the L-buffer of a polygon mesh corresponding to the environment that has previously been set, i.e.<itemizedlist>
<listitem><para>Detector position</para></listitem><listitem><para>Detector orientation</para></listitem><listitem><para>Detector size and resolution</para></listitem><listitem><para>Source position</para></listitem><listitem><para>Source shape</para></listitem><listitem><para>Scanned object geometry </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1663" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1663" bodyend="1711"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1ab98267bbd922a4e7ee38ffb2d327d0cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;float&gt; &gt; computeSinogram</definition>
        <argsstring>(double x, double y, double z, const char *aUnitOfLength, unsigned int aNumberOfAngle, double anAngleOffset)</argsstring>
        <name>computeSinogram</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>aUnitOfLength</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>aNumberOfAngle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>anAngleOffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the sinogram corresponding to the environment that has previously been set, i.e.<itemizedlist>
<listitem><para>Detector position</para></listitem><listitem><para>Detector orientation</para></listitem><listitem><para>Detector size and resolution</para></listitem><listitem><para>Source position</para></listitem><listitem><para>Source shape</para></listitem><listitem><para>Beam spectrum</para></listitem><listitem><para>Scanned object geometries</para></listitem><listitem><para>Scanned object material properties Note that the rotation vector is the same as the up-vector of the detector. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1714" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1714" bodyend="1745"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1ab0814f041176d63ce590dc46e8721f5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;float&gt; &gt; getLastXRayImage</definition>
        <argsstring>()</argsstring>
        <name>getLastXRayImage</name>
        <briefdescription>
<para>Accessor on the last X-ray image that has been computed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1748" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1748" bodyend="1751"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1adefbb2fdefe4ddcd43da3a8cd1c94957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;float&gt; &gt; getLastLBuffer</definition>
        <argsstring>()</argsstring>
        <name>getLastLBuffer</name>
        <briefdescription>
<para>Accessor on the last L-buffer that has been computed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1754" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1754" bodyend="1757"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a31cac5db95d54fc7013ef6da1d9ae0bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;float&gt; &gt; getLastSinogram</definition>
        <argsstring>()</argsstring>
        <name>getLastSinogram</name>
        <briefdescription>
<para>Accessor on the last sinogram that has been computed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1760" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1760" bodyend="1763"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a2fd74a1173b58acd49329e6d8f9e4f0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getImageWidth</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;anImage)</argsstring>
        <name>getImageWidth</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>anImage</declname>
        </param>
        <briefdescription>
<para>Accessor on the width of a given image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1766" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1766" bodyend="1776"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a405587a06bb8b4188d32e9c2865ce0f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getImageHeght</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;anImage)</argsstring>
        <name>getImageHeght</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>anImage</declname>
        </param>
        <briefdescription>
<para>Accessor on the height of a given image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1779" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1779" bodyend="1782"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a68e92985a191484817d8c0eb20ae2288" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; getImageRow</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;anImage, int j)</argsstring>
        <name>getImageRow</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>anImage</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Accessor on the j-th row of pixels of a given image. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="1785" column="1" bodyfile="SimpleGVXR.cxx" bodystart="1785" bodyend="1793"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a2393539c600ba13e56fc176e44f91bcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getUnitOfEnergy</definition>
        <argsstring>(const char *aUnitOfEnergy)</argsstring>
        <name>getUnitOfEnergy</name>
        <param>
          <type>const char *</type>
          <declname>aUnitOfEnergy</declname>
        </param>
        <briefdescription>
<para>Accessor on the numerical value corresponding to a unit of energy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="2459" column="1" bodyfile="SimpleGVXR.cxx" bodystart="2459" bodyend="2486"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8cxx_1a8fbea25863abc4159adfc0dafc04b6c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getUnitOfLength</definition>
        <argsstring>(const char *aUnitOfLength)</argsstring>
        <name>getUnitOfLength</name>
        <param>
          <type>const char *</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
<para>Accessor on the numerical value corresponding to a unit of length. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.cxx" line="2490" column="1" bodyfile="SimpleGVXR.cxx" bodystart="2490" bodyend="2550"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="30"><highlight class="comment">//******************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//******************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__gVirtualXRayConfig_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gVirtualXRay/gVirtualXRayConfig.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAS_GLEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;GL/glew.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GLFW_INCLUDE_GLCOREARB<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;GLFW/glfw3.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>perform<sp/>the<sp/>computations<sp/>of<sp/>the<sp/>X-ray<sp/>simulation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__XRayRenderer_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gVirtualXRay/XRayRenderer.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>polygon<sp/>meshes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__PolygonMesh_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gVirtualXRay/PolygonMesh.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>initialise<sp/>GLEW,<sp/>to<sp/>define<sp/>matrix<sp/>stacks,<sp/>to<sp/>define<sp/>state<sp/>stacks,<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__OpenGLUtilities_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gVirtualXRay/OpenGLUtilities.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>load<sp/>a<sp/>scenegraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__SceneGraphBinder_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gVirtualXRay/SceneGraphBinder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>load<sp/>a<sp/>scenegraph<sp/>using<sp/>ASSIMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__AssimpSceneGraphBinder_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gVirtualXRay/AssimpSceneGraphBinder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>load<sp/>a<sp/>scenegraph<sp/>using<sp/>OpenSceneGraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__OpenSceneGraphBinder_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gVirtualXRay/OpenSceneGraphBinder.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__CubeMesh_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gVirtualXRay/CubeMesh.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__CylinderMesh_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gVirtualXRay/CylinderMesh.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__OutOfBoundsException_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;gVirtualXRay/OutOfBoundsException.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__SimpleGVXR_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_simple_g_v_x_r_8h" kindref="compound">SimpleGVXR.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Shaders<sp/>for<sp/>rendering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;display_gl2.frag.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;display_gl2.vert.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;display_gl3.frag.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;display_gl3.vert.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespacestd" kindref="compound">std</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceg_virtual_x_ray" kindref="compound">gVirtualXRay</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal">GLFWwindow*<sp/>initGLFW(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aVisibilityFlag);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a17e1064097a6183115c1fe81822e32ff" kindref="member">createOpenGLContext</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>framebufferSizeCallback(GLFWwindow*<sp/>apWindow,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aHeight);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>keyCallback(GLFWwindow*<sp/>window,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scancode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>action,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mods);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mouseButtonCallback(GLFWwindow*<sp/>apWindow,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aButton,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aButtonState,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aModifierKey);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cursorPosCallback(GLFWwindow*<sp/>apWindow,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scrollCallback(GLFWwindow*<sp/>apWindow,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xoffset,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yoffset);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>render();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>quit();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>errorCallback(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initGL();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initialiseXRayRenderer();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initViewer();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>computeRotation(GLFWwindow*<sp/>apWindow,<sp/>MATRIX4&amp;<sp/>aRotationMatrix);</highlight></codeline>
<codeline lineno="124"><highlight class="normal">Vec3&lt;GLfloat&gt;<sp/>getArcballVector(GLFWwindow*<sp/>apWindow,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radian2degree(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>anAngle);</highlight></codeline>
<codeline lineno="126"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>getVectorImage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Image&lt;float&gt;&amp;<sp/>anImage);</highlight></codeline>
<codeline lineno="127"><highlight class="normal">MATRIX4<sp/>Vector2gvxrMatrix(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;&amp;<sp/>aNumpyMatrix);</highlight></codeline>
<codeline lineno="128"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>gvxrMatrix2Vector(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MATRIX4&amp;<sp/>aMatrix4);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLfloat<sp/>ROTATION_SPEED(2.0);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal">std::map&lt;int,<sp/>GLFWwindow*&gt;<sp/>g_p_window_set;</highlight></codeline>
<codeline lineno="135"><highlight class="normal">std::vector&lt;int&gt;<sp/>g_p_window_id_stack;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>g_initial_fovy(45);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Field<sp/>of<sp/>view<sp/>along<sp/>the<sp/>y-axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>g_initial_near(5.0<sp/>*<sp/>cm);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Near<sp/>clipping<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>g_initial_far(500.0<sp/>*<sp/>cm);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Far<sp/>clipping<sp/>plane</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">GLfloat<sp/>g_zoom(120.0<sp/>*<sp/>cm);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_run_loop<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_display_beam(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_display_wireframe(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_use_lighing(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_display_detector(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_display_normal_vectors(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_beam_shape_initialised<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_beam_energy_initialised<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_source_position_initialised<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_detector_position_initialised<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_detector_up_vector_initialised<sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_detector_size_initialised<sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_detector_pixel_size_initialised<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_renderer_initialised<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_viewer_initialised<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g_button(-1);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>g_button_state(-1);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>g_use_arc_ball(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="162"><highlight class="normal">GLint<sp/>g_last_x_position(0);</highlight></codeline>
<codeline lineno="163"><highlight class="normal">GLint<sp/>g_last_y_position(0);</highlight></codeline>
<codeline lineno="164"><highlight class="normal">GLint<sp/>g_current_x_position(0);</highlight></codeline>
<codeline lineno="165"><highlight class="normal">GLint<sp/>g_current_y_position(0);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">XRayBeam<sp/>g_xray_beam;</highlight></codeline>
<codeline lineno="168"><highlight class="normal">XRayDetector<sp/>g_xray_detector;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">XRayRenderer<sp/>g_xray_renderer;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">Shader<sp/>g_display_shader;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">std::shared_ptr&lt;SceneGraphBinder&gt;<sp/>g_p_scene_graph<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal">Matrix4x4&lt;GLfloat&gt;<sp/>g_scene_rotation_matrix;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">Matrix4x4&lt;GLfloat&gt;<sp/>g_sample_rotation_matrix;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a1495a8a83ee7a799ed9375bc540286cc" kindref="member">getMajorVersionOfSimpleGVXR</ref>()</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(atoi(gVirtualXRay_VERSION_MAJOR));</highlight></codeline>
<codeline lineno="184"><highlight class="normal">}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a8dda75e417383f05f8a67d0d805a7ee4" kindref="member">getMinorVersionOfSimpleGVXR</ref>()</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(atoi(gVirtualXRay_VERSION_MINOR));</highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a434fed454c84dfebf5d5df27389f38f5" kindref="member">getPatchVersionOfSimpleGVXR</ref>()</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(atoi(gVirtualXRay_VERSION_PATCH));</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal">std::string<sp/><ref refid="_simple_g_v_x_r_8h_1aadc6cf5b2124f80f1e41bdb967aafab9" kindref="member">getVersionOfSimpleGVXR</ref>()</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal">{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>version;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>version<sp/>+=<sp/>gVirtualXRay_VERSION_MAJOR;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>version<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>version<sp/>+=<sp/>gVirtualXRay_VERSION_MINOR;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>version<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>version<sp/>+=<sp/>gVirtualXRay_VERSION_PATCH;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(version);</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ae93a55835dcd40c50336c8a0ef67d838" kindref="member">setSourcePosition</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnitOfLength)</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal">{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_of_length<sp/>=<sp/><ref refid="_simple_g_v_x_r_8h_1a8fbea25863abc4159adfc0dafc04b6c5" kindref="member">getUnitOfLength</ref>(aUnitOfLength);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_detector.setXrayPointSource(VEC3(x<sp/>*<sp/>unit_of_length,<sp/>y<sp/>*<sp/>unit_of_length,<sp/>z<sp/>*<sp/>unit_of_length));</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>g_source_position_initialised<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>the<sp/>X-ray<sp/>renderer<sp/>if<sp/>needed<sp/>and<sp/>if<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>initialiseXRayRenderer();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>initViewer();</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ae15b7f508c8831dc2cdc47cd800b1f44" kindref="member">setDetectorPosition</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnitOfLength)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal">{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_of_length<sp/>=<sp/><ref refid="_simple_g_v_x_r_8h_1a8fbea25863abc4159adfc0dafc04b6c5" kindref="member">getUnitOfLength</ref>(aUnitOfLength);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_detector.setDetectorPosition(VEC3(x<sp/>*<sp/>unit_of_length,<sp/>y<sp/>*<sp/>unit_of_length,<sp/>z<sp/>*<sp/>unit_of_length));</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>g_detector_position_initialised<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>the<sp/>X-ray<sp/>renderer<sp/>if<sp/>needed<sp/>and<sp/>if<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>initialiseXRayRenderer();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>initViewer();</highlight></codeline>
<codeline lineno="248"><highlight class="normal">}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a5a72f299c3609e4d76eeeea958ea65c2" kindref="member">setDetectorUpVector</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_detector.setUpVector(VEC3(x,<sp/>y,<sp/>z).normal());</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>g_detector_up_vector_initialised<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>the<sp/>X-ray<sp/>renderer<sp/>if<sp/>needed<sp/>and<sp/>if<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>initialiseXRayRenderer();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>initViewer();</highlight></codeline>
<codeline lineno="261"><highlight class="normal">}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a83bbebef7177c94a6211a39694ef83fc" kindref="member">setDetectorNumberOfPixels</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aHeight)</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_detector.setNumberOfPixels(Vec2ui(aWidth,<sp/>aHeight));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>g_detector_size_initialised<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>the<sp/>X-ray<sp/>renderer<sp/>if<sp/>needed<sp/>and<sp/>if<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>g_renderer_initialised<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>initialiseXRayRenderer();</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ab9eaebb3664cfc1b9876a73721ad4b4d" kindref="member">setDetectorPixelSize</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aWidth,</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aHeight,</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnitOfLength)</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal">{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_of_length<sp/>=<sp/><ref refid="_simple_g_v_x_r_8h_1a8fbea25863abc4159adfc0dafc04b6c5" kindref="member">getUnitOfLength</ref>(aUnitOfLength);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_detector.setResolutionInUnitsOfLengthPerPixel(VEC2(aWidth<sp/>*<sp/>unit_of_length,<sp/>aHeight<sp/>*<sp/>unit_of_length));</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>g_detector_pixel_size_initialised<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>the<sp/>X-ray<sp/>renderer<sp/>if<sp/>needed<sp/>and<sp/>if<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>initialiseXRayRenderer();</highlight></codeline>
<codeline lineno="289"><highlight class="normal">}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a2764fb38f827332117873a3a19a8f53b" kindref="member">loadMeshFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel,</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aFileName,</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnitOfLength)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>the<sp/>X-ray<sp/>renderer<sp/>if<sp/>needed<sp/>and<sp/>if<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>initialiseXRayRenderer();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>SceneGraphBinder*<sp/>p_temp<sp/>=<sp/>g_p_scene_graph.get();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!p_temp)</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SceneGraphBinder());</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>file<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;getPolygonMeshSet()[aLabel].setFileName(aFileName);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Load<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;getPolygonMeshSet()[aLabel].loadSTLFile(</highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/><ref refid="_simple_g_v_x_r_8h_1a8fbea25863abc4159adfc0dafc04b6c5" kindref="member">getUnitOfLength</ref>(aUnitOfLength),<sp/>GL_STATIC_DRAW);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>geometry<sp/>to<sp/>the<sp/>X-ray<sp/>renderer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_renderer.addInnerSurface(&amp;g_p_scene_graph-&gt;getPolygonMeshSet()[aLabel]);</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ab41d4e142f38b2c6db0f8c9ecd3d4279" kindref="member">loadSceneGraph</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aFileName,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnitOfLength)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>scene_graph_loaded<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAS_ASSIMP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scene_graph_loaded)</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>AssimpSceneGraphBinder(aFileName,<sp/><ref refid="_simple_g_v_x_r_8h_1a8fbea25863abc4159adfc0dafc04b6c5" kindref="member">getUnitOfLength</ref>(aUnitOfLength)));</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scene_graph_loaded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HAS_OPENSCENEGRAPH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scene_graph_loaded)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>OpenSceneGraphBinder(aFileName,<sp/><ref refid="_simple_g_v_x_r_8h_1a8fbea25863abc4159adfc0dafc04b6c5" kindref="member">getUnitOfLength</ref>(aUnitOfLength)));</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scene_graph_loaded<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!scene_graph_loaded)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tGraphScene<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aFileName<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>loaded.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>geometry<sp/>to<sp/>the<sp/>X-ray<sp/>renderer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>for<sp/>all<sp/>the<sp/>meshes<sp/>in<sp/>the<sp/>scenegraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;string,<sp/>gVirtualXRay::PolygonMesh&gt;::const_iterator<sp/>ite<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().begin();</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ite<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++ite)</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_xray_renderer.addInnerSurface(&amp;ite-&gt;second);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal">}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a4f9e2568569935f573173c9735562047" kindref="member">emptyMesh</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>scenegraph<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>scenegraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SceneGraphBinder());</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;getPolygonMeshSet()[aLabel]<sp/>=<sp/>PolygonMesh();</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ad6f31f35c56f20c86675225f433e4e88" kindref="member">makeCube</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aLength,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnitOfLength)</highlight></codeline>
<codeline lineno="373"><highlight class="normal">{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>scenegraph<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>scenegraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SceneGraphBinder());</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;getPolygonMeshSet()[aLabel]<sp/>=<sp/>CubeMesh&lt;double&gt;(aLength<sp/>*<sp/><ref refid="_simple_g_v_x_r_8h_1a8fbea25863abc4159adfc0dafc04b6c5" kindref="member">getUnitOfLength</ref>(aUnitOfLength),<sp/>GL_UNSIGNED_INT);</highlight></codeline>
<codeline lineno="382"><highlight class="normal">}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a7b51263692aeb7a36008a47e8ea0dacd" kindref="member">makeCylinder</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aNumberOfSectors,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aHeight,</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aRadius,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnitOfLength)</highlight></codeline>
<codeline lineno="390"><highlight class="normal">{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>scenegraph<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>scenegraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SceneGraphBinder());</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;getPolygonMeshSet()[aLabel]<sp/>=<sp/>CylinderMesh&lt;double&gt;(aNumberOfSectors,</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aHeight<sp/><sp/>*<sp/><ref refid="_simple_g_v_x_r_8h_1a8fbea25863abc4159adfc0dafc04b6c5" kindref="member">getUnitOfLength</ref>(aUnitOfLength),</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aRadius<sp/><sp/>*<sp/><ref refid="_simple_g_v_x_r_8h_1a8fbea25863abc4159adfc0dafc04b6c5" kindref="member">getUnitOfLength</ref>(aUnitOfLength),</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_UNSIGNED_INT);</highlight></codeline>
<codeline lineno="402"><highlight class="normal">}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a7439a61c9cb4e6118810ec4fa5e40d01" kindref="member">addMesh</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aDestination,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aSource)</highlight></codeline>
<codeline lineno="406"><highlight class="normal">{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>scenegraph<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>scenegraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SceneGraphBinder());</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;string,<sp/>PolygonMesh&gt;::const_iterator<sp/>ite_source<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aSource);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ite_source<sp/>==<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aSource<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;string,<sp/>PolygonMesh&gt;::iterator<sp/>ite_destination<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aDestination);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ite_destination<sp/>==<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aDestination<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ite_destination-&gt;second<sp/>+=<sp/>ite_source-&gt;second;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal">}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1aa2d38b8483e2ca9fe23259b383859314" kindref="member">subtractMesh</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aDestination,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aSource)</highlight></codeline>
<codeline lineno="435"><highlight class="normal">{</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>scenegraph<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>scenegraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SceneGraphBinder());</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;string,<sp/>PolygonMesh&gt;::const_iterator<sp/>ite_source<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aSource);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ite_source<sp/>==<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aSource<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;string,<sp/>PolygonMesh&gt;::iterator<sp/>ite_destination<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aDestination);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ite_destination<sp/>==<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aDestination<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ite_destination-&gt;second<sp/>-=<sp/>ite_source-&gt;second;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">//------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal">vector&lt;string&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a80a4cffb784bb326df41b7d2fc4e9567" kindref="member">getMeshLabelSet</ref>()</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight><highlight class="comment">//------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal">{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>Python<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>vector&lt;string&gt;<sp/>p_label_set;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>for<sp/>all<sp/>the<sp/>meshes<sp/>in<sp/>the<sp/>scenegraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;string,<sp/>PolygonMesh&gt;::const_iterator<sp/>ite<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().begin();</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ite<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end();</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++ite)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>name<sp/>of<sp/>the<sp/>node<sp/>to<sp/>the<sp/>Python<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p_label_set.push_back(ite-&gt;first);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bind<sp/>the<sp/>list<sp/>to<sp/>Python</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_label_set);</highlight></codeline>
<codeline lineno="481"><highlight class="normal">}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a299f801fefafce46ffb589b1d5e45e99" kindref="member">getMeshLabelSetSize</ref>()</highlight></codeline>
<codeline lineno="485"><highlight class="normal">{</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(g_p_scene_graph-&gt;getPolygonMeshSet().size());</highlight></codeline>
<codeline lineno="487"><highlight class="normal">}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal">std::string<sp/><ref refid="_simple_g_v_x_r_8h_1ac7237c93a88077d9c56721c516024869" kindref="member">getMeshLabel</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight></codeline>
<codeline lineno="491"><highlight class="normal">{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>&gt;=<sp/><ref refid="_simple_g_v_x_r_8h_1a299f801fefafce46ffb589b1d5e45e99" kindref="member">getMeshLabelSetSize</ref>())</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(OutOfBoundsException(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__));</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Look<sp/>for<sp/>all<sp/>the<sp/>meshes<sp/>in<sp/>the<sp/>scenegraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;string,<sp/>PolygonMesh&gt;::const_iterator<sp/>ite<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().begin();</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ite<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++ite,<sp/>++id)</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>==<sp/>i)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output<sp/>=<sp/>ite-&gt;first;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(output);</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a193db9e9eab8b3205d126387789e6907" kindref="member">addPolygonMeshAsInnerSurface</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal">{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>scenegraph<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>scenegraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SceneGraphBinder());</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;string,<sp/>PolygonMesh&gt;::const_iterator<sp/>ite<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aLabel);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>polygon<sp/>mesh<sp/>to<sp/>the<sp/>X-ray<sp/>renderer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ite<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_xray_renderer.addInnerSurface(&amp;(ite-&gt;second));</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aLabel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal">}</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a71f514bb1ae0ca2e9fd19b3423685cb3" kindref="member">addPolygonMeshAsOuterSurface</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel)</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal">{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>scenegraph<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>scenegraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SceneGraphBinder());</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;string,<sp/>PolygonMesh&gt;::const_iterator<sp/>ite<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aLabel);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>polygon<sp/>mesh<sp/>to<sp/>the<sp/>X-ray<sp/>renderer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ite<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_xray_renderer.addOuterSurface(&amp;(ite-&gt;second));</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aLabel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal">}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1af582363bdb3958279767ca1459c52173" kindref="member">removePolygonMeshesFromSceneGraph</ref>()</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal">{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>scenegraph<sp/>exists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Empty<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;clear();</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_simple_g_v_x_r_8h_1abb5ac6fa1e360fb8db58f63fc1453f20" kindref="member">removePolygonMeshesFromXRayRenderer</ref>();</highlight></codeline>
<codeline lineno="578"><highlight class="normal">}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1abb5ac6fa1e360fb8db58f63fc1453f20" kindref="member">removePolygonMeshesFromXRayRenderer</ref>()</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_renderer.removeInnerSurfaces();</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_renderer.removeOuterSurface();</highlight></codeline>
<codeline lineno="587"><highlight class="normal">}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">//-----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a73d0586e23fcb2f1f3fc1bb5dbe96924" kindref="member">moveToCentre</ref>()</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">//-----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;moveToCentre();</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;updateMatrices();</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tThe<sp/>scenegraph<sp/>is<sp/>empty.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal">}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="comment">//-----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a931aa02220c52492126298021cf03997" kindref="member">moveToCenter</ref>()</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">//-----------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_simple_g_v_x_r_8h_1a73d0586e23fcb2f1f3fc1bb5dbe96924" kindref="member">moveToCentre</ref>();</highlight></codeline>
<codeline lineno="611"><highlight class="normal">}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a73d0586e23fcb2f1f3fc1bb5dbe96924" kindref="member">moveToCentre</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel)</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal">{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_mesh<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aLabel);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_mesh<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>mesh<sp/>to<sp/>the<sp/>centre</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;getPolygonMeshSet()[aLabel].moveToCentre<sp/>();</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>not<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aLabel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tThe<sp/>scenegraph<sp/>is<sp/>empty.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal">}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a931aa02220c52492126298021cf03997" kindref="member">moveToCenter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal">{</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_simple_g_v_x_r_8h_1a73d0586e23fcb2f1f3fc1bb5dbe96924" kindref="member">moveToCentre</ref>(aLabel);</highlight></codeline>
<codeline lineno="646"><highlight class="normal">}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a2f49a3f43adf0127cdc1aa3c76441261" kindref="member">scaleNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnitOfLength)</highlight></codeline>
<codeline lineno="650"><highlight class="normal">{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_mesh<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aLabel);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_mesh<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_of_length<sp/>=<sp/><ref refid="_simple_g_v_x_r_8h_1a8fbea25863abc4159adfc0dafc04b6c5" kindref="member">getUnitOfLength</ref>(aUnitOfLength);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;scale(aLabel,<sp/>VEC3(x<sp/>*<sp/>unit_of_length,<sp/>y<sp/>*<sp/>unit_of_length,<sp/>z<sp/>*<sp/>unit_of_length));</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;updateMatrices();</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>not<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aLabel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tThe<sp/>scenegraph<sp/>is<sp/>empty.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1aa4b1803e22f3f7f1deeb25435549780d" kindref="member">rotateNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="677"><highlight class="normal">{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_mesh<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aLabel);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_mesh<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;rotate(aLabel,<sp/>angle,<sp/>VEC3(x,<sp/>y,<sp/>z));</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;updateMatrices();</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>not<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aLabel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tThe<sp/>scenegraph<sp/>is<sp/>empty.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="699"><highlight class="normal">}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1aca5adfa4af593b9bb92c6536aaa6be67" kindref="member">translateNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnitOfLength)</highlight></codeline>
<codeline lineno="703"><highlight class="normal">{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_mesh<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aLabel);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_mesh<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_of_length<sp/>=<sp/><ref refid="_simple_g_v_x_r_8h_1a8fbea25863abc4159adfc0dafc04b6c5" kindref="member">getUnitOfLength</ref>(aUnitOfLength);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;translate(aLabel,<sp/>VEC3(x<sp/>*<sp/>unit_of_length,<sp/>y<sp/>*<sp/>unit_of_length,<sp/>z<sp/>*<sp/>unit_of_length));</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;updateMatrices();</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>not<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aLabel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tThe<sp/>scenegraph<sp/>is<sp/>empty.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal">}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ae80cfca75f6e77016d9c32ed152e763b" kindref="member">resetSceneTransformation</ref>()</highlight></codeline>
<codeline lineno="730"><highlight class="normal">{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>g_sample_rotation_matrix<sp/>=<sp/>MATRIX4();</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a4e83d2fccc2ab051b1aaa55bef18420a" kindref="member">scaleScene</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnitOfLength)</highlight></codeline>
<codeline lineno="736"><highlight class="normal">{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>scenegraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_of_length<sp/>=<sp/><ref refid="_simple_g_v_x_r_8h_1a8fbea25863abc4159adfc0dafc04b6c5" kindref="member">getUnitOfLength</ref>(aUnitOfLength);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/>g_sample_rotation_matrix<sp/>*=<sp/>MATRIX4::buildScaleMatrix(x<sp/>*<sp/>unit_of_length,<sp/>y<sp/>*<sp/>unit_of_length,<sp/>z<sp/>*<sp/>unit_of_length);</highlight></codeline>
<codeline lineno="740"><highlight class="normal">}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a7fe19b103fe00ede3c5e8077ffeb518a" kindref="member">rotateScene</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z)</highlight></codeline>
<codeline lineno="744"><highlight class="normal">{</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>scenegraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>g_sample_rotation_matrix<sp/>*=<sp/>MATRIX4::buildRotationMatrix(angle,<sp/>x,<sp/>y,<sp/>z);</highlight></codeline>
<codeline lineno="747"><highlight class="normal">}</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1aba27858b8358133de659436c75e364b5" kindref="member">translateScene</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnitOfLength)</highlight></codeline>
<codeline lineno="751"><highlight class="normal">{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>the<sp/>scenegraph</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_of_length<sp/>=<sp/><ref refid="_simple_g_v_x_r_8h_1a8fbea25863abc4159adfc0dafc04b6c5" kindref="member">getUnitOfLength</ref>(aUnitOfLength);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/>g_sample_rotation_matrix<sp/>*=<sp/>MATRIX4::buildTranslationMatrix(x<sp/>*<sp/>unit_of_length,<sp/>y<sp/>*<sp/>unit_of_length,<sp/>z<sp/>*<sp/>unit_of_length);</highlight></codeline>
<codeline lineno="755"><highlight class="normal">}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a5d02d6f2cbfb9ed1059c045520f1973f" kindref="member">getSceneTransformationMatrix</ref>()</highlight></codeline>
<codeline lineno="759"><highlight class="normal">{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>gvxrMatrix2Vector(g_sample_rotation_matrix);</highlight></codeline>
<codeline lineno="761"><highlight class="normal">}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1aa4aa9748df310aea560042330f573502" kindref="member">getRootTransformationMatrix</ref>()</highlight></codeline>
<codeline lineno="765"><highlight class="normal">{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>scenegraph<sp/>is<sp/>empty.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(gvxrMatrix2Vector(g_p_scene_graph-&gt;getRootNodeTransformationMatrix()));</highlight></codeline>
<codeline lineno="772"><highlight class="normal">}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1afe0599571c6802c92c18cf4b0e836ec3" kindref="member">getNodeTransformationMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel)</highlight></codeline>
<codeline lineno="776"><highlight class="normal">{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>scenegraph<sp/>is<sp/>empty.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_mesh<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aLabel);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>not<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_mesh<sp/>==<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__,<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;The<sp/>PolygonMesh<sp/>&quot;</highlight><highlight class="normal">)<sp/>+<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(aLabel)<sp/>+<sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal">(</highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(gvxrMatrix2Vector(g_p_scene_graph-&gt;getNodeTransformationMatrix(aLabel)));</highlight></codeline>
<codeline lineno="795"><highlight class="normal">}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1aa72652349c8b3370dfb1eabdbf52a8c8" kindref="member">setSceneTransformationMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;&amp;<sp/>aMatrix)</highlight></codeline>
<codeline lineno="799"><highlight class="normal">{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>g_sample_rotation_matrix<sp/>=<sp/>Vector2gvxrMatrix(aMatrix);</highlight></codeline>
<codeline lineno="801"><highlight class="normal">}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a26b47d2b671031d42999f441001d1f5b" kindref="member">setRootTransformationMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;&amp;<sp/>aMatrix)</highlight></codeline>
<codeline lineno="805"><highlight class="normal">{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;setRootNodeTransformationMatrix(Vector2gvxrMatrix(aMatrix));</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tThe<sp/>scenegraph<sp/>is<sp/>empty.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a6599a4e12fb25b9234e480fa592374f5" kindref="member">setNodeTransformationMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;&amp;<sp/>aMatrix)</highlight></codeline>
<codeline lineno="818"><highlight class="normal">{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_mesh<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aLabel);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_mesh<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;setNodeTransformationMatrix(aLabel,<sp/>Vector2gvxrMatrix(aMatrix));</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>not<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aLabel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tThe<sp/>scenegraph<sp/>is<sp/>empty.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="839"><highlight class="normal">}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a653497f2fe03995b005714e9baf41ab2" kindref="member">setHU</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>HU)</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal">{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_mesh<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aLabel);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_mesh<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>its<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;getPolygonMeshSet()[aLabel].setHounsfieldValue<sp/>(HU);</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>not<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aLabel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1acc5f29c5cfa9c92d4d2ec33c6d2651f9" kindref="member">setHounsfieldUnit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>HU)</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal">{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_simple_g_v_x_r_8h_1a653497f2fe03995b005714e9baf41ab2" kindref="member">setHU</ref>(aLabel,<sp/>HU);</highlight></codeline>
<codeline lineno="868"><highlight class="normal">}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a75fb82bed7ec009464d128540c7e2c8b" kindref="member">setHounsfieldValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>HU)</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal">{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_simple_g_v_x_r_8h_1a653497f2fe03995b005714e9baf41ab2" kindref="member">setHU</ref>(aLabel,<sp/>HU);</highlight></codeline>
<codeline lineno="876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ace7e5a45b69dd79c671a3a50f7a035be" kindref="member">setElement</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>Z)</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal">{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_mesh<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aLabel);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_mesh<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>its<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;getPolygonMeshSet()[aLabel].setElement(Z);</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>not<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aLabel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal">}</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ace7e5a45b69dd79c671a3a50f7a035be" kindref="member">setElement</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aName)</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal">{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_mesh<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aLabel);</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_mesh<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>its<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;getPolygonMeshSet()[aLabel].setElement(aName);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>not<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aLabel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="918"><highlight class="normal">}</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a9e5a39f55679c955dd9cd72aef4d8579" kindref="member">setMixture</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aName)</highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal">{</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_mesh<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aLabel);</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_mesh<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>its<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;getPolygonMeshSet()[aLabel].setMixture(aName);</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>not<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aLabel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal">}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"></highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a3b30682dca738f4329bf0fdb3064fb7a" kindref="member">setCompound</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aName)</highlight></codeline>
<codeline lineno="944"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal">{</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_mesh<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aLabel);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_mesh<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>its<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;getPolygonMeshSet()[aLabel].setCompound(aName);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>not<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aLabel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a232cbbb1732c30eeb1f32973bbade6df" kindref="member">setMassAttenuationCoefficient</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel,</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aCoefficient,</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnit)</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal">{</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(aUnit,<sp/></highlight><highlight class="stringliteral">&quot;cm2/g&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>strcmp(aUnit,<sp/></highlight><highlight class="stringliteral">&quot;cm2.g-1&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__,</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>Unknown<sp/>unit<sp/>of<sp/>mass<sp/>attenuation<sp/>coefficient.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_mesh<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aLabel);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_mesh<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>its<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;getPolygonMeshSet()[aLabel].setMassAttenuationCoefficient<sp/>(aCoefficient<sp/>*<sp/>cm2<sp/>/<sp/>g);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>not<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aLabel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>}}</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1aef13682407b489bbe2d051b861e2871e" kindref="member">setLinearAttenuationCoefficient</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel,</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aCoefficient,</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnit)</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal">{</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(aUnit,<sp/></highlight><highlight class="stringliteral">&quot;cm-1&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__,</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>Unknown<sp/>unit<sp/>of<sp/>linear<sp/>attenuation<sp/>coefficient.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_mesh<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aLabel);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_mesh<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>its<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;getPolygonMeshSet()[aLabel].setLinearAttenuationCoefficient<sp/>(aCoefficient<sp/>/<sp/>cm);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>not<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aLabel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a1de0d64006c42f55d73d7363283c4bc2" kindref="member">setMu</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel,</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aCoefficient,</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnit)</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_simple_g_v_x_r_8h_1aef13682407b489bbe2d051b861e2871e" kindref="member">setLinearAttenuationCoefficient</ref>(aLabel,<sp/>aCoefficient,<sp/>aUnit);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ae20e1bd684b82d9c5ccbda5f11f63026" kindref="member">setDensity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel,</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aDensity,</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnit)</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(strcmp(aUnit,<sp/></highlight><highlight class="stringliteral">&quot;g/cm3&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>strcmp(aUnit,<sp/></highlight><highlight class="stringliteral">&quot;g.cm-3&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__,</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>Unknown<sp/>unit<sp/>of<sp/>linear<sp/>attenuation<sp/>coefficient.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_mesh<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aLabel);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_mesh<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>its<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_scene_graph-&gt;getPolygonMeshSet()[aLabel].setDensity(aDensity<sp/>*<sp/>g<sp/>/<sp/>cm3);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>not<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aLabel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a17e1064097a6183115c1fe81822e32ff" kindref="member">createOpenGLContext</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID)</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_simple_g_v_x_r_8h_1a1015e854787d4aac76ce7bd0778684ca" kindref="member">createWindow</ref>(aWindowID,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1064"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a1015e854787d4aac76ce7bd0778684ca" kindref="member">createWindow</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID,</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aVisibilityFlag)</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_p_window_set.size())</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>all<sp/>the<sp/>windows<sp/>are<sp/>destroyed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>atexit(quit);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>an<sp/>error<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwSetErrorCallback(errorCallback);</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>GLFW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!glfwInit())</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__,</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>cannot<sp/>initialise<sp/>GLFW.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aWindowID<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aWindowID<sp/>=<sp/>g_p_window_set.size();</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrStatus:\tCreate<sp/>window<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aWindowID<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>window<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_p_window_set[aWindowID])</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLFWwindow*<sp/>p_window<sp/>=<sp/>initGLFW(aWindowID,<sp/>aVisibilityFlag);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>window<sp/>has<sp/>been<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_window)</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_window_set[aWindowID]<sp/>=<sp/>p_window;</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Register<sp/>its<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_window_id_stack.push_back(aWindowID);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>GLEW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialiseGLEW();</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>OpenGL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initGL();</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>the<sp/>X-ray<sp/>renderer<sp/>if<sp/>needed<sp/>and<sp/>if<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialiseXRayRenderer();</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>window<sp/>has<sp/>not<sp/>been<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Display<sp/>a<sp/>warning</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tWindow<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aWindowID<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>cannot<sp/>be<sp/>created.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Delete<sp/>the<sp/>empty<sp/>record<sp/>that<sp/>may<sp/>have<sp/>been<sp/>created<sp/>in<sp/>g_p_window_set</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;int,<sp/>GLFWwindow*&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>g_p_window_set.find(aWindowID);</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/>g_p_window_set.end())</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_window_set.erase(it);</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>window<sp/>already<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>nothing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tWindow<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aWindowID<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>already<sp/>exists.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a43893e298d8b93bf427b2ada57fe859d" kindref="member">setWindowSize</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aHeight,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID)</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resize<sp/>the<sp/>last<sp/>window<sp/>that<sp/>has<sp/>been<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aWindowID<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_window_id_stack.empty()<sp/>||<sp/>g_p_window_set.empty())</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tNo<sp/>active<sp/>window<sp/>to<sp/>resize.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resize<sp/>the<sp/>last<sp/>created<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>target<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aWindowID<sp/>=<sp/>g_p_window_id_stack.back();</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>a<sp/>window<sp/>to<sp/>resize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aWindowID<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search<sp/>=<sp/>g_p_window_set.find(aWindowID);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search<sp/>!=<sp/>g_p_window_set.end())</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(search-&gt;second)</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwSetWindowSize(search-&gt;second,<sp/>aWidth,<sp/>aHeight);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>framebufferSizeCallback(search-&gt;second,<sp/>aWidth,<sp/>aHeight);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tWindow<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aWindowID<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1183"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"></highlight><highlight class="comment">//------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a107a2ab7ffc8f12ddf0059da92cac177" kindref="member">displayScene</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID)</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight><highlight class="comment">//------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Display<sp/>in<sp/>the<sp/>last<sp/>window<sp/>that<sp/>has<sp/>been<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aWindowID<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_window_id_stack.empty()<sp/>||<sp/>g_p_window_set.empty())</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tNo<sp/>active<sp/>window<sp/>to<sp/>destroy.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>last<sp/>created<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>target<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aWindowID<sp/>=<sp/>g_p_window_id_stack.back();</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"></highlight></codeline>
<codeline lineno="1206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>a<sp/>window<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aWindowID<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_window<sp/>=<sp/>g_p_window_set.find(aWindowID);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_window<sp/>!=<sp/>g_p_window_set.end())</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(search_window-&gt;second)</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>the<sp/>window&apos;s<sp/>context<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwShowWindow(search_window-&gt;second);</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwMakeContextCurrent(search_window-&gt;second);</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initViewer();</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glClear(GL_COLOR_BUFFER_BIT<sp/>|<sp/>GL_DEPTH_BUFFER_BIT);</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Display<sp/>the<sp/>3D<sp/>scene</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>render();</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>all<sp/>the<sp/>OpenGL<sp/>code<sp/>is<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glFinish();</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Swap<sp/>front<sp/>and<sp/>back<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwSwapBuffers(search_window-&gt;second);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Poll<sp/>for<sp/>and<sp/>process<sp/>events</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwPollEvents();</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tWindow<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aWindowID<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_window_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ad5f2ad0bc3d3a8faec876665b38e98e7" kindref="member">renderLoop</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID</highlight><highlight class="comment">/*,<sp/>PyObject*<sp/>aCallBack*/</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Display<sp/>in<sp/>the<sp/>last<sp/>window<sp/>that<sp/>has<sp/>been<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aWindowID<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_window_id_stack.empty()<sp/>||<sp/>g_p_window_set.empty())</highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tNo<sp/>active<sp/>window<sp/>to<sp/>destroy.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>last<sp/>created<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>target<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aWindowID<sp/>=<sp/>g_p_window_id_stack.back();</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>a<sp/>window<sp/>to<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aWindowID<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_window<sp/>=<sp/>g_p_window_set.find(aWindowID);</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_window<sp/>!=<sp/>g_p_window_set.end())</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(search_window-&gt;second)</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_run_loop<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Launch<sp/>the<sp/>event<sp/>loop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!glfwWindowShouldClose(search_window-&gt;second)<sp/>&amp;&amp;<sp/>g_run_loop)</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>a<sp/>callback</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*if<sp/>(aCallBack)</highlight></codeline>
<codeline lineno="1284"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1285"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Ensure<sp/>that<sp/>the<sp/>current<sp/>thread<sp/>is<sp/>ready<sp/>to<sp/>call<sp/>the<sp/>Python<sp/>C<sp/>API</highlight></codeline>
<codeline lineno="1286"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_STATE<sp/>state<sp/>=<sp/>PyGILState_Ensure();</highlight></codeline>
<codeline lineno="1287"><highlight class="comment"></highlight></codeline>
<codeline lineno="1288"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Invoke<sp/>the<sp/>python<sp/>function</highlight></codeline>
<codeline lineno="1289"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::python::call&lt;void&gt;(aCallBack);</highlight></codeline>
<codeline lineno="1290"><highlight class="comment"></highlight></codeline>
<codeline lineno="1291"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>Release<sp/>the<sp/>global<sp/>interpreter<sp/>lock<sp/>so<sp/>other<sp/>threads<sp/>can<sp/>resume<sp/>execution</highlight></codeline>
<codeline lineno="1292"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PyGILState_Release(state);</highlight></codeline>
<codeline lineno="1293"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Udate<sp/>the<sp/>X-ray<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//computeXRayImage();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Render<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwShowWindow(search_window-&gt;second);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_simple_g_v_x_r_8h_1a107a2ab7ffc8f12ddf0059da92cac177" kindref="member">displayScene</ref>(aWindowID);</highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tWindow<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aWindowID<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_window_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="comment">//----------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ad83afb6f214408b967c83f16674e1ceb" kindref="member">showWindow</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID)</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="comment">//----------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resize<sp/>the<sp/>last<sp/>window<sp/>that<sp/>has<sp/>been<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aWindowID<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_window_id_stack.empty()<sp/>||<sp/>g_p_window_set.empty())</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tNo<sp/>active<sp/>window<sp/>to<sp/>show.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resize<sp/>the<sp/>last<sp/>created<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>target<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aWindowID<sp/>=<sp/>g_p_window_id_stack.back();</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>a<sp/>window<sp/>to<sp/>resize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aWindowID<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search<sp/>=<sp/>g_p_window_set.find(aWindowID);</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search<sp/>!=<sp/>g_p_window_set.end())</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(search-&gt;second)</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwShowWindow(search-&gt;second);</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tWindow<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aWindowID<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1351"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"></highlight></codeline>
<codeline lineno="1354"><highlight class="normal"></highlight><highlight class="comment">//----------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a3f6fb7d5c610d87e677add575fb901fd" kindref="member">hideWindow</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID)</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight><highlight class="comment">//----------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resize<sp/>the<sp/>last<sp/>window<sp/>that<sp/>has<sp/>been<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aWindowID<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_window_id_stack.empty()<sp/>||<sp/>g_p_window_set.empty())</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tNo<sp/>active<sp/>window<sp/>to<sp/>hide.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Resize<sp/>the<sp/>last<sp/>created<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>target<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aWindowID<sp/>=<sp/>g_p_window_id_stack.back();</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>a<sp/>window<sp/>to<sp/>resize</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aWindowID<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search<sp/>=<sp/>g_p_window_set.find(aWindowID);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search<sp/>!=<sp/>g_p_window_set.end())</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(search-&gt;second)</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwHideWindow(search-&gt;second);</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tWindow<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aWindowID<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"></highlight></codeline>
<codeline lineno="1395"><highlight class="normal"></highlight></codeline>
<codeline lineno="1396"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a3998fea4e05c76a1fd2d37974a645ad0" kindref="member">destroyWindow</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID)</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>last<sp/>window<sp/>that<sp/>has<sp/>been<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aWindowID<sp/>==<sp/>-1)</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Nothing<sp/>to<sp/>do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_window_id_stack.empty()<sp/>||<sp/>g_p_window_set.empty())</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tNo<sp/>active<sp/>window<sp/>to<sp/>destroy.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>last<sp/>created<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>target<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aWindowID<sp/>=<sp/>g_p_window_id_stack.back();</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>a<sp/>window<sp/>to<sp/>destroy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aWindowID<sp/>!=<sp/>-1)</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_window<sp/>=<sp/>g_p_window_set.find(aWindowID);</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_window<sp/>!=<sp/>g_p_window_set.end())</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrStatus:\tDestroy<sp/>window<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aWindowID<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>search_window-&gt;second<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(search_window-&gt;second)<sp/>glfwDestroyWindow(search_window-&gt;second);</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_window_set.erase(search_window);</highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tWindow<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aWindowID<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_window_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Unregister<sp/>its<sp/>ID<sp/>from<sp/>the<sp/>stack<sp/>of<sp/>IDs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;::iterator<sp/>search_id<sp/>=<sp/>find(g_p_window_id_stack.begin(),</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_window_id_stack.end(),<sp/>aWindowID);</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"></highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_id<sp/>!=<sp/>g_p_window_id_stack.end())</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_p_window_id_stack.erase(search_id);</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tWindow<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aWindowID<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_window_id_stack.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight><highlight class="comment">//----------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ac86d792db22ecd805d41178653b986a7" kindref="member">destroyAllWindows</ref>()</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight><highlight class="comment">//----------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrStatus:\tDestroy<sp/>all<sp/>the<sp/>windows&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"></highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Process<sp/>all<sp/>the<sp/>windows</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(g_p_window_set.size())</highlight></codeline>
<codeline lineno="1461"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>the<sp/>window<sp/>if<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_simple_g_v_x_r_8h_1a3998fea4e05c76a1fd2d37974a645ad0" kindref="member">destroyWindow</ref>(g_p_window_set.begin()-&gt;first);</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Terminate<sp/>GLFW</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//glfwTerminate();<sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight><highlight class="comment">//-------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a7fa8f9b4050b5727cd05529f320a5251" kindref="member">usePointSource</ref>()</highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="comment">//-------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_detector.setXrayPointSource();</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/>g_beam_shape_initialised<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>the<sp/>X-ray<sp/>renderer<sp/>if<sp/>needed<sp/>and<sp/>if<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/>initialiseXRayRenderer();</highlight></codeline>
<codeline lineno="1480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight><highlight class="comment">//--------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a0445b8fe702aeeca5f2b451bcab79836" kindref="member">useParallelBeam</ref>()</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight><highlight class="comment">//--------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>a<sp/>parallel<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_detector.setParallelBeam();</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>g_beam_shape_initialised<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>the<sp/>X-ray<sp/>renderer<sp/>if<sp/>needed<sp/>and<sp/>if<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/>initialiseXRayRenderer();</highlight></codeline>
<codeline lineno="1493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight><highlight class="comment">//----------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1af0d213ffe3069b549499398f7b75dc97" kindref="member">useParallelSource</ref>()</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="comment">//----------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_simple_g_v_x_r_8h_1a0445b8fe702aeeca5f2b451bcab79836" kindref="member">useParallelBeam</ref>();</highlight></codeline>
<codeline lineno="1501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight><highlight class="comment">//----------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a82f5d828b75f302d2ccdfba39d2f16b9" kindref="member">resetBeamSpectrum</ref>()</highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight><highlight class="comment">//----------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_beam.clear();</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/>g_beam_energy_initialised<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1510"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1514"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a9158ac51c22c3fca44a78c889a70a1de" kindref="member">setMonoChromatic</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>anEnergy,</highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnitOfEnergy,</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aNumberOfPhotons)</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_beam.clear();</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_simple_g_v_x_r_8h_1aba774aa741a1824df3e79bac35d7f2e1" kindref="member">addEnergyBinToSpectrum</ref>(anEnergy,<sp/>aUnitOfEnergy,<sp/>aNumberOfPhotons);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight></codeline>
<codeline lineno="1524"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1525"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1aba774aa741a1824df3e79bac35d7f2e1" kindref="member">addEnergyBinToSpectrum</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>anEnergy,</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnitOfEnergy,</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aNumberOfPhotons)</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_beam.addChannel(aNumberOfPhotons,<sp/>anEnergy<sp/>*<sp/><ref refid="_simple_g_v_x_r_8h_1a2393539c600ba13e56fc176e44f91bcf" kindref="member">getUnitOfEnergy</ref>(aUnitOfEnergy));</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/>g_beam_energy_initialised<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>the<sp/>X-ray<sp/>renderer<sp/>if<sp/>needed<sp/>and<sp/>if<sp/>possible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1534"><highlight class="normal"><sp/><sp/><sp/><sp/>initialiseXRayRenderer();</highlight></codeline>
<codeline lineno="1535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1aa51c858d18239d734343cb43bc243a71" kindref="member">saveLastXRayImage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aFileName)</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>file_name;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"></highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aFileName)</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_name<sp/>=<sp/>aFileName;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;xray_image-&quot;</highlight><highlight class="normal"><sp/>+<sp/>to_string(file_counter++)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.mha&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_renderer.getEnergyFluence().save(file_name);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1555"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1af1b14cab32dd7368e8ff4fcc07ea9e79" kindref="member">saveLastLBuffer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aFileName)</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>file_name;</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"></highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aFileName)</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_name<sp/>=<sp/>aFileName;</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;lbuffer-&quot;</highlight><highlight class="normal"><sp/>+<sp/>to_string(file_counter++)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.mha&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_renderer.getLBuffer().save(file_name);</highlight></codeline>
<codeline lineno="1567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a463ce9e8d15fbd817ecfaf6d7519e0a3" kindref="member">saveLastSinogram</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aFileName)</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1573"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>file_counter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>file_name;</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"></highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aFileName)</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_name<sp/>=<sp/>aFileName;</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file_name<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;sinogram-&quot;</highlight><highlight class="normal"><sp/>+<sp/>to_string(file_counter++)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.mha&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_renderer.getSinogram().save(file_name);</highlight></codeline>
<codeline lineno="1583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"></highlight></codeline>
<codeline lineno="1585"><highlight class="normal"></highlight></codeline>
<codeline lineno="1586"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1acd097bdd4b2ab5f9b8fc8991b316e533" kindref="member">enableArtefactFilteringOnGPU</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_renderer.enableArtifactFilteringOnGPU();</highlight></codeline>
<codeline lineno="1591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"></highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a5898aa8c45e6c34137f10978b1d49526" kindref="member">enableArtifactFilteringOnGPU</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_simple_g_v_x_r_8h_1acd097bdd4b2ab5f9b8fc8991b316e533" kindref="member">enableArtefactFilteringOnGPU</ref>();</highlight></codeline>
<codeline lineno="1599"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"></highlight></codeline>
<codeline lineno="1602"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1aed410cdfc2b9d1d28d6820e6bfb57324" kindref="member">enableArtefactFilteringOnCPU</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_renderer.enableArtifactFilteringOnCPU();</highlight></codeline>
<codeline lineno="1607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a7ef2b71a4bf9d57e06e975de75ba88dc" kindref="member">enableArtifactFilteringOnCPU</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1613"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_simple_g_v_x_r_8h_1aed410cdfc2b9d1d28d6820e6bfb57324" kindref="member">enableArtefactFilteringOnCPU</ref>();</highlight></codeline>
<codeline lineno="1615"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"></highlight></codeline>
<codeline lineno="1618"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a8825c3ab5571de7f6e665c944149a09f" kindref="member">disableArtefactFiltering</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1621"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_renderer.disableArtifactFilteringOnGPU();</highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/>g_xray_renderer.disableArtifactFilteringOnCPU();</highlight></codeline>
<codeline lineno="1624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"></highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a73f8d211018dc40e3c3f17400230ffc8" kindref="member">disableArtifactFiltering</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_simple_g_v_x_r_8h_1a8825c3ab5571de7f6e665c944149a09f" kindref="member">disableArtefactFiltering</ref>();</highlight></codeline>
<codeline lineno="1632"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight><highlight class="comment">//----------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a5451b6f54339116e72cba6cc58e01be4" kindref="member">computeXRayImage</ref>()</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"></highlight><highlight class="comment">//----------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1638"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>no<sp/>OpenGL<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_window_id_stack.empty()<sp/>||<sp/>g_p_window_set.empty())</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_simple_g_v_x_r_8h_1a1015e854787d4aac76ce7bd0778684ca" kindref="member">createWindow</ref>();</highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>renderer<sp/>is<sp/>ready</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_xray_renderer.isReady())</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>X-ray<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_xray_renderer.computeImage(g_sample_rotation_matrix);</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>renderer<sp/>is<sp/>not<sp/>ready</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tX-ray<sp/>renderer<sp/>not<sp/>ready.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(getVectorImage(g_xray_renderer.getEnergyFluence()));</highlight></codeline>
<codeline lineno="1659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1662"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a554ae5ddaf102a77ec7152fee10917fe" kindref="member">computeLBuffer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aLabel)</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>no<sp/>OpenGL<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_window_id_stack.empty()<sp/>||<sp/>g_p_window_set.empty())</highlight></codeline>
<codeline lineno="1668"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_simple_g_v_x_r_8h_1a1015e854787d4aac76ce7bd0778684ca" kindref="member">createWindow</ref>();</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>renderer<sp/>is<sp/>ready</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_xray_renderer.isReady())</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>the<sp/>mesh</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>search_mesh<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().find(aLabel);</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(search_mesh<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end())</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>L-buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_xray_renderer.computeLBuffer(search_mesh-&gt;second,<sp/>VEC3(),<sp/>g_sample_rotation_matrix,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It<sp/>has<sp/>not<sp/>been<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tPolygonMesh<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>aLabel<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>not<sp/>found<sp/>in<sp/>g_p_polygon_mesh_set.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tThe<sp/>scenegraph<sp/>is<sp/>empty.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>renderer<sp/>is<sp/>not<sp/>ready</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tX-ray<sp/>renderer<sp/>not<sp/>ready.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//g_xray_renderer.printFBO(XRAY_DETECTOR_UNCLEANED_LBUFFER_FBO_ID,<sp/>&quot;uncleaned_lbuffer.mha&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//g_xray_renderer.printFBO(XRAY_DETECTOR_CLEANED_LBUFFER_FBO_ID,<sp/>&quot;cleaned_lbuffer.mha&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//g_xray_renderer.printFBO(XRAY_DETECTOR_CUMULATED_LBUFFERS_FBO_ID,<sp/>&quot;cumulated_l-buffers.mha&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>g_xray_renderer.printFBO(XRAY_DETECTOR_ENERGY_FLUENCE_FBO_ID,<sp/>&quot;energy_fluence.mha&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>its<sp/>L-buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(getVectorImage(g_xray_renderer.getLBuffer()));</highlight></codeline>
<codeline lineno="1711"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1ab98267bbd922a4e7ee38ffb2d327d0cf" kindref="member">computeSinogram</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnitOfLength,</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aNumberOfAngle,</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>anAngleOffset)</highlight></codeline>
<codeline lineno="1717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>no<sp/>OpenGL<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_window_id_stack.empty()<sp/>||<sp/>g_p_window_set.empty())</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_simple_g_v_x_r_8h_1a1015e854787d4aac76ce7bd0778684ca" kindref="member">createWindow</ref>();</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>renderer<sp/>is<sp/>ready</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_xray_renderer.isReady())</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>X-ray<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_of_length<sp/>=<sp/><ref refid="_simple_g_v_x_r_8h_1a8fbea25863abc4159adfc0dafc04b6c5" kindref="member">getUnitOfLength</ref>(aUnitOfLength);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VEC3<sp/>rotation_centre(VEC3(x<sp/>*<sp/>unit_of_length,<sp/>y<sp/>*<sp/>unit_of_length,<sp/>z<sp/>*<sp/>unit_of_length));</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_xray_renderer.computeSinogram(g_sample_rotation_matrix,</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotation_centre,</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aNumberOfAngle,</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anAngleOffset);</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>renderer<sp/>is<sp/>not<sp/>ready</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrWarning:\tX-ray<sp/>renderer<sp/>not<sp/>ready.&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"></highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(getVectorImage(g_xray_renderer.getSinogram()));</highlight></codeline>
<codeline lineno="1745"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"></highlight></codeline>
<codeline lineno="1747"><highlight class="normal"></highlight></codeline>
<codeline lineno="1748"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1ab0814f041176d63ce590dc46e8721f5d" kindref="member">getLastXRayImage</ref>()</highlight></codeline>
<codeline lineno="1749"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(getVectorImage(g_xray_renderer.getEnergyFluence()));</highlight></codeline>
<codeline lineno="1751"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight></codeline>
<codeline lineno="1754"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1adefbb2fdefe4ddcd43da3a8cd1c94957" kindref="member">getLastLBuffer</ref>()</highlight></codeline>
<codeline lineno="1755"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(getVectorImage(g_xray_renderer.getLBuffer()));</highlight></codeline>
<codeline lineno="1757"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"></highlight></codeline>
<codeline lineno="1759"><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a31cac5db95d54fc7013ef6da1d9ae0bb" kindref="member">getLastSinogram</ref>()</highlight></codeline>
<codeline lineno="1761"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(getVectorImage(g_xray_renderer.getSinogram()));</highlight></codeline>
<codeline lineno="1763"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"></highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a2fd74a1173b58acd49329e6d8f9e4f0f" kindref="member">getImageWidth</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;&amp;<sp/>anImage)</highlight></codeline>
<codeline lineno="1767"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>image_width<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_simple_g_v_x_r_8h_1a405587a06bb8b4188d32e9c2865ce0f0" kindref="member">getImageHeght</ref>(anImage))</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>image_width<sp/>=<sp/>anImage[0].size();</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(image_width);</highlight></codeline>
<codeline lineno="1776"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"></highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a405587a06bb8b4188d32e9c2865ce0f0" kindref="member">getImageHeght</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;&amp;<sp/>anImage)</highlight></codeline>
<codeline lineno="1780"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(anImage.size());</highlight></codeline>
<codeline lineno="1782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785"><highlight class="normal">std::vector&lt;float&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a68e92985a191484817d8c0eb20ae2288" kindref="member">getImageRow</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;&amp;<sp/>anImage,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j)</highlight></codeline>
<codeline lineno="1786"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(j<sp/>&gt;=<sp/><ref refid="_simple_g_v_x_r_8h_1a405587a06bb8b4188d32e9c2865ce0f0" kindref="member">getImageHeght</ref>(anImage))</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>(OutOfBoundsException(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__));</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(anImage[j]);</highlight></codeline>
<codeline lineno="1793"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"></highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight></codeline>
<codeline lineno="1798"><highlight class="normal"></highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1806"><highlight class="normal"></highlight></codeline>
<codeline lineno="1807"><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"></highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal">GLFWwindow*<sp/>initGLFW(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID,</highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aVisibilityFlag)</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight><highlight class="comment">//---------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>window_title<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;gVirtualXRay<sp/>--<sp/>Window<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>to_string(aWindowID);</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/>GLFWwindow*<sp/>p_window<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>version<sp/>of<sp/>OpenGL<sp/>that<sp/>is<sp/>required</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR,<sp/>2);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR,<sp/>1);</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aVisibilityFlag)</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwWindowHint(GLFW_VISIBLE,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwWindowHint(GLFW_VISIBLE,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>anti-aliasing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwWindowHint(GLFW_SAMPLES,<sp/>4);</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>windowed<sp/>mode<sp/>window<sp/>and<sp/>its<sp/>OpenGL<sp/>context</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/>p_window<sp/>=<sp/>glfwCreateWindow(500,</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>500,</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>window_title.data(),</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0,</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Window<sp/>has<sp/>be<sp/>created</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p_window)</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>the<sp/>window&apos;s<sp/>context<sp/>current</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwMakeContextCurrent(p_window);</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>framebufferSizeCallback(p_window,<sp/>500,<sp/>500);</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>GLFW<sp/>callbacks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwSetKeyCallback(p_window,<sp/>keyCallback);</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwSetMouseButtonCallback(p_window,<sp/>mouseButtonCallback);</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwSetCursorPosCallback(p_window,<sp/>cursorPosCallback);</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwSetScrollCallback(p_window,<sp/>scrollCallback);</highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glfwSetFramebufferSizeCallback(p_window,<sp/>framebufferSizeCallback);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1858"><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(p_window);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"></highlight></codeline>
<codeline lineno="1863"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1864"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>framebufferSizeCallback(GLFWwindow*<sp/>apWindow,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>height)</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1866"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(height<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Prevent<sp/>divide<sp/>by<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>height<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x(0),<sp/>y(0),<sp/>w(width),<sp/>h(height);</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>x<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>y<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>w<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>h<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>screen_aspect_ratio(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(width)<sp/>/<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">(height));</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/>glViewport(x,<sp/>y,<sp/>w,<sp/>h);</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><sp/><sp/><sp/><sp/>initViewer();</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/>loadPerspectiveProjectionMatrix(g_initial_fovy,<sp/>screen_aspect_ratio,<sp/>g_initial_near,<sp/>g_initial_far);</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/>loadLookAtModelViewMatrix(0.0,<sp/>0.0,<sp/>g_zoom,</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="1885"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1889"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>keyCallback(GLFWwindow*<sp/>window,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scancode,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>action,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mods)</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"></highlight><highlight class="comment">//-------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1891"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action<sp/>==<sp/>GLFW_PRESS)</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(key)</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GLFW_KEY_Q:</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GLFW_KEY_ESCAPE:</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_run_loop<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GLFW_KEY_B:</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_display_beam<sp/>=<sp/>!g_display_beam;</highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GLFW_KEY_W:</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_display_wireframe<sp/>=<sp/>!g_display_wireframe;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GLFW_KEY_N:</highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_xray_renderer.useNegativeFilteringFlag(!g_xray_renderer.getNegativeFilteringFlag());</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"></highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GLFW_KEY_L:</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_use_lighing<sp/>=<sp/>!g_use_lighing;</highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"></highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GLFW_KEY_D:</highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_display_detector<sp/>=<sp/>!g_display_detector;</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"></highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>GLFW_KEY_V:</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_display_normal_vectors<sp/>=<sp/>!g_display_normal_vectors;</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>mouseButtonCallback(GLFWwindow*<sp/>apWindow,</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aButton,</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aButtonState,</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aModifierKey)</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/>g_button<sp/>=<sp/>aButton;</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/>g_button_state<sp/>=<sp/>aButtonState;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>arc<sp/>ball</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_button_state<sp/>==<sp/>GLFW_PRESS)</highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_use_arc_ball<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Stop<sp/>using<sp/>the<sp/>arc<sp/>ball</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_use_arc_ball<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xpos(0);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ypos(0);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwGetCursorPos<sp/>(apWindow,<sp/>&amp;xpos,<sp/>&amp;ypos);</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/>g_last_x_position<sp/>=<sp/>xpos;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/>g_last_y_position<sp/>=<sp/>ypos;</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight></codeline>
<codeline lineno="1958"><highlight class="normal"><sp/><sp/><sp/><sp/>g_current_x_position<sp/>=<sp/>xpos;</highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/>g_current_y_position<sp/>=<sp/>ypos;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1964"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>cursorPosCallback(GLFWwindow*<sp/>apWindow,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1966"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/>g_current_x_position<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><sp/><sp/>g_current_y_position<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>rotation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/><sp/><sp/>computeRotation(apWindow,<sp/>g_scene_rotation_matrix);</highlight></codeline>
<codeline lineno="1972"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1976"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>scrollCallback(GLFWwindow*<sp/>apWindow,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xoffset,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yoffset)</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1978"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Scrolling<sp/>along<sp/>the<sp/>Y-axis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(yoffset)<sp/>&gt;<sp/>EPSILON)</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_use_arc_ball<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_zoom<sp/>+=<sp/>yoffset<sp/>*<sp/>cm;</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"></highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>loadLookAtModelViewMatrix(0.0,<sp/>0.0,<sp/>g_zoom,</highlight></codeline>
<codeline lineno="1987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>0.0,<sp/>0.0,</highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.0,<sp/>1.0,<sp/>0.0);</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight><highlight class="comment">//-----------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>render()</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"></highlight><highlight class="comment">//-----------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>back<sp/>face<sp/>culling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushEnableDisableState(GL_CULL_FACE);</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glEnable(GL_CULL_FACE);</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glCullFace(GL_BACK);</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"></highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>the<sp/>shader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushShaderProgram();</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_display_shader.enable();</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLint<sp/>shader_id(g_display_shader.getProgramHandle());</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>status<sp/>of<sp/>OpenGL<sp/>and<sp/>of<sp/>the<sp/>current<sp/>FBO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkFBOErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"></highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>current<sp/>transformation<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushModelViewMatrix();</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Rotate<sp/>the<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_current_modelview_matrix<sp/>*=<sp/>g_scene_rotation_matrix;</highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLuint<sp/>handle(0);</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,<sp/></highlight><highlight class="stringliteral">&quot;g_projection_matrix&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniformMatrix4fv(handle,<sp/>1,<sp/>GL_FALSE,<sp/>g_current_projection_matrix.get());</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,<sp/></highlight><highlight class="stringliteral">&quot;g_modelview_matrix&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniformMatrix4fv(handle,<sp/>1,<sp/>GL_FALSE,<sp/>g_current_modelview_matrix.get());</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MATRIX4<sp/>normal_matrix(g_current_modelview_matrix);</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,<sp/></highlight><highlight class="stringliteral">&quot;g_normal_matrix&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniformMatrix3fv(handle,<sp/>1,<sp/>GL_FALSE,<sp/>normal_matrix.get3x3());</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLint<sp/>lighting;</highlight></codeline>
<codeline lineno="2034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_use_lighing)</highlight></codeline>
<codeline lineno="2035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lighting<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lighting<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,</highlight><highlight class="stringliteral">&quot;g_use_lighting&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniform1iv(handle,<sp/>1,<sp/>&amp;lighting);</highlight></codeline>
<codeline lineno="2044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>colour<sp/>of<sp/>the<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLfloat<sp/>material_ambient[]<sp/><sp/>=<sp/>{0.19225,<sp/><sp/>0.0,<sp/>0.0,<sp/>1.0};</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLfloat<sp/>material_diffuse[]<sp/><sp/>=<sp/>{0.50754,<sp/><sp/>0.0,<sp/>0.0,<sp/>1.0};</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLfloat<sp/>material_specular[]<sp/>=<sp/>{0.508273,<sp/>0.0,<sp/>0.0,<sp/>1.0};</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLfloat<sp/>material_shininess<sp/>=<sp/>50.2;</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,<sp/></highlight><highlight class="stringliteral">&quot;material_ambient&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniform4fv(handle,<sp/>1,<sp/>&amp;material_ambient[0]);</highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"></highlight></codeline>
<codeline lineno="2057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,<sp/></highlight><highlight class="stringliteral">&quot;material_diffuse&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniform4fv(handle,<sp/>1,<sp/>&amp;material_diffuse[0]);</highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"></highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,<sp/></highlight><highlight class="stringliteral">&quot;material_specular&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniform4fv(handle,<sp/>1,<sp/>&amp;material_specular[0]);</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2064"><highlight class="normal"></highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,<sp/></highlight><highlight class="stringliteral">&quot;material_shininess&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniform1fv(handle,<sp/>1,<sp/>&amp;material_shininess);</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"></highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>current<sp/>transformation<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushModelViewMatrix();</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_current_modelview_matrix<sp/>*=<sp/>g_sample_rotation_matrix;</highlight></codeline>
<codeline lineno="2074"><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"></highlight></codeline>
<codeline lineno="2076"><highlight class="normal"></highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::map&lt;string,<sp/>gVirtualXRay::PolygonMesh&gt;::iterator<sp/>ite<sp/>=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().begin();</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ite<sp/>!=<sp/>g_p_scene_graph-&gt;getPolygonMeshSet().end();</highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++ite)</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>the<sp/>current<sp/>transformation<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pushModelViewMatrix();</highlight></codeline>
<codeline lineno="2083"><highlight class="normal"></highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_current_modelview_matrix<sp/>*=<sp/>ite-&gt;second.getTransformationMatrix();</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>applyModelViewMatrix();</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"></highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Display<sp/>the<sp/>sample</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_display_wireframe)</highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ite-&gt;second.displayWireFrame();</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ite-&gt;second.display();</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_display_normal_vectors)</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_width;</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glGetIntegerv(GL_LINE_WIDTH,<sp/>&amp;line_width);</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glLineWidth(3);</highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ite-&gt;second.getVertexNormalNumber())</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ite-&gt;second.displayVertexNormal();</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ite-&gt;second.getFaceNormalNumber())</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ite-&gt;second.displayFaceNormal();</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glLineWidth(line_width);</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>current<sp/>transformation<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>popModelViewMatrix();</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>current<sp/>transformation<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>popModelViewMatrix();</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>colour<sp/>of<sp/>the<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLfloat<sp/>material_ambient[]<sp/><sp/>=<sp/>{0.0,<sp/>0.39225,<sp/><sp/>0.39225,<sp/><sp/>1.0};</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLfloat<sp/>material_diffuse[]<sp/><sp/>=<sp/>{0.0,<sp/>0.70754,<sp/><sp/>0.70754,<sp/><sp/>1.0};</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLfloat<sp/>material_specular[]<sp/>=<sp/>{0.0,<sp/>0.708273,<sp/>0.708273,<sp/>1.0};</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLfloat<sp/>material_shininess<sp/>=<sp/>50.2;</highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,<sp/></highlight><highlight class="stringliteral">&quot;material_ambient&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniform4fv(handle,<sp/>1,<sp/>&amp;material_ambient[0]);</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"></highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,<sp/></highlight><highlight class="stringliteral">&quot;material_diffuse&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniform4fv(handle,<sp/>1,<sp/>&amp;material_diffuse[0]);</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"></highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,<sp/></highlight><highlight class="stringliteral">&quot;material_specular&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniform4fv(handle,<sp/>1,<sp/>&amp;material_specular[0]);</highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"></highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,<sp/></highlight><highlight class="stringliteral">&quot;material_shininess&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniform1fv(handle,<sp/>1,<sp/>&amp;material_shininess);</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>light<sp/>colours<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLfloat<sp/>light_global_ambient[]<sp/>=<sp/>{<sp/>0.2,<sp/>0.2,<sp/>0.2,<sp/>1.0<sp/>};</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLfloat<sp/>light_ambient[]<sp/>=<sp/>{<sp/>0.3,<sp/>0.3,<sp/>0.3,<sp/>1.0<sp/>};</highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLfloat<sp/>light_diffuse[]<sp/>=<sp/>{<sp/>1.0,<sp/>1.0,<sp/>1.0,<sp/>1.0<sp/>};</highlight></codeline>
<codeline lineno="2154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GLfloat<sp/>light_specular[]<sp/>=<sp/>{<sp/>1.0,<sp/>1.0,<sp/>1.0,<sp/>1.0<sp/>};</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"></highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,<sp/></highlight><highlight class="stringliteral">&quot;light_global_ambient&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniform4fv(handle,<sp/>1,<sp/>&amp;light_global_ambient[0]);</highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"></highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,<sp/></highlight><highlight class="stringliteral">&quot;light_ambient&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniform4fv(handle,<sp/>1,<sp/>&amp;light_ambient[0]);</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,<sp/></highlight><highlight class="stringliteral">&quot;light_diffuse&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniform4fv(handle,<sp/>1,<sp/>&amp;light_diffuse[0]);</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"></highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,<sp/></highlight><highlight class="stringliteral">&quot;light_specular&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniform4fv(handle,<sp/>1,<sp/>&amp;light_specular[0]);</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"></highlight></codeline>
<codeline lineno="2172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VEC3<sp/>light_position(0,<sp/>0,<sp/>g_zoom);</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,<sp/></highlight><highlight class="stringliteral">&quot;light_position&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniform4f(handle,</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>light_position.getX(),</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>light_position.getY(),</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>light_position.getZ(),</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0);</highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"></highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Display<sp/>the<sp/>source</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_xray_detector.displaySource();</highlight></codeline>
<codeline lineno="2184"><highlight class="normal"></highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>back<sp/>face<sp/>culling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glDisable(GL_CULL_FACE);</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Display<sp/>the<sp/>X-Ray<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_display_detector)</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_xray_renderer.display(</highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Display<sp/>the<sp/>beam</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_display_beam)</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>GLfloat<sp/>material_ambient[]<sp/><sp/>=<sp/>{0.75,<sp/>0,<sp/>0.5,<sp/>0.3};</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,<sp/></highlight><highlight class="stringliteral">&quot;material_ambient&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniform4fv(handle,<sp/>1,<sp/>&amp;material_ambient[0]);</highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"></highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lighting<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle<sp/>=<sp/>glGetUniformLocation(shader_id,</highlight><highlight class="stringliteral">&quot;g_use_lighting&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glUniform1iv(handle,<sp/>1,<sp/>&amp;lighting);</highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"></highlight></codeline>
<codeline lineno="2207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_xray_detector.displayBeam();</highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"></highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Disable<sp/>the<sp/>shader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>popShaderProgram();</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"></highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>current<sp/>transformation<sp/>matrix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>popModelViewMatrix();</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"></highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Restore<sp/>the<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>popEnableDisableState();</highlight></codeline>
<codeline lineno="2218"><highlight class="normal"></highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>the<sp/>status<sp/>of<sp/>OpenGL<sp/>and<sp/>of<sp/>the<sp/>current<sp/>FBO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkFBOErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Catch<sp/>exception<sp/>if<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::exception&amp;<sp/>error)</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/>error.what()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"></highlight></codeline>
<codeline lineno="2230"><highlight class="normal"></highlight></codeline>
<codeline lineno="2231"><highlight class="normal"></highlight><highlight class="comment">//---------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>quit()</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"></highlight><highlight class="comment">//---------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2234"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;gvxrStatus:\tQuit<sp/>and<sp/>destroy<sp/>all<sp/>the<sp/>windows&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_simple_g_v_x_r_8h_1ac86d792db22ecd805d41178653b986a7" kindref="member">destroyAllWindows</ref>();</highlight></codeline>
<codeline lineno="2237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"></highlight></codeline>
<codeline lineno="2239"><highlight class="normal"></highlight></codeline>
<codeline lineno="2240"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>errorCallback(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>error,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>description)</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"></highlight><highlight class="comment">//----------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2243"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Display<sp/>the<sp/>error<sp/>in<sp/>the<sp/>terminal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;GLFW<sp/>error:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>description<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2246"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"></highlight></codeline>
<codeline lineno="2249"><highlight class="normal"></highlight><highlight class="comment">//-----------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initGL()</highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight><highlight class="comment">//-----------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;OpenGL<sp/>renderer:<sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glGetString(GL_RENDERER)<sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2255"><highlight class="normal"></highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;OpenGL<sp/>version:<sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glGetString(GL_VERSION)<sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;OpenGL<sp/>vender:<sp/><sp/><sp/><sp/><sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>glGetString(GL_VENDOR)<sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"></highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Enable<sp/>the<sp/>Z-buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/>glEnable(GL_DEPTH_TEST);</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"></highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>background<sp/>colour</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/>glClearColor(0.5,</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5,</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.5,</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.0);</highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"></highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/>glEnable(GL_MULTISAMPLE);</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>the<sp/>shaders</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p_vertex_shader(0);</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>p_fragment_shader(0);</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"></highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_lib_return_code_vertex(0);</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>z_lib_return_code_fragment(0);</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>vertex_shader;</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>fragment_shader;</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Display<sp/>shader</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useOpenGL3_2OrAbove())</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_lib_return_code_vertex<sp/><sp/><sp/>=<sp/>inflate(g_display_gl3_vert,</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(g_display_gl3_vert),</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;p_vertex_shader);</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_lib_return_code_fragment<sp/>=<sp/>inflate(g_display_gl3_frag,</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(g_display_gl3_frag),</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;p_fragment_shader);</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"></highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_display_shader.setLabels(</highlight><highlight class="stringliteral">&quot;display_gl3.vert&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;display_gl3.frag&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_lib_return_code_vertex<sp/><sp/><sp/>=<sp/>inflate(g_display_gl2_vert,</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(g_display_gl2_vert),</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;p_vertex_shader);</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"></highlight></codeline>
<codeline lineno="2307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>z_lib_return_code_fragment<sp/>=<sp/>inflate(g_display_gl2_frag,</highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(g_display_gl2_frag),</highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;p_fragment_shader);</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_display_shader.setLabels(</highlight><highlight class="stringliteral">&quot;display_gl2.vert&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;display_gl2.frag&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"></highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><sp/><sp/><sp/><sp/>vertex_shader<sp/><sp/><sp/>=<sp/>p_vertex_shader;</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/><sp/><sp/>fragment_shader<sp/>=<sp/>p_fragment_shader;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>p_vertex_shader;</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>p_fragment_shader;</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"></highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/>p_vertex_shader<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/><sp/><sp/>p_fragment_shader<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(z_lib_return_code_vertex<sp/>&lt;=<sp/>0<sp/>||<sp/>z_lib_return_code_fragment<sp/>&lt;=<sp/>0<sp/>||</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!vertex_shader.size()<sp/>||<sp/>!fragment_shader.size())</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__,</highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Cannot<sp/>decode<sp/>the<sp/>shader<sp/>using<sp/>ZLib.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2329"><highlight class="normal"><sp/><sp/><sp/><sp/>g_display_shader.loadSource(vertex_shader,<sp/>fragment_shader);</highlight></codeline>
<codeline lineno="2330"><highlight class="normal"><sp/><sp/><sp/><sp/>checkOpenGLErrorStatus(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__);</highlight></codeline>
<codeline lineno="2331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2332"><highlight class="normal"></highlight></codeline>
<codeline lineno="2333"><highlight class="normal"></highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight><highlight class="comment">//---------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initialiseXRayRenderer()</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"></highlight><highlight class="comment">//---------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2337"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_beam_shape_initialised<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_beam_energy_initialised<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_source_position_initialised<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_detector_position_initialised<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_detector_up_vector_initialised<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_detector_size_initialised<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_detector_pixel_size_initialised)</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>renderer<sp/>is<sp/>not<sp/>initialised</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_renderer_initialised)</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;INIT<sp/>RENDER&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>the<sp/>renderer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_xray_renderer.initialise(XRayRenderer::OPENGL,</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GL_RGB32F,</highlight></codeline>
<codeline lineno="2353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;g_xray_detector,</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;g_xray_beam);</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"></highlight></codeline>
<codeline lineno="2356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_xray_renderer.disableArtifactFilteringOnGPU();</highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_xray_renderer.enableArtefactFilteringOnCPU();</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_renderer_initialised<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/><sp/><sp/>initViewer();</highlight></codeline>
<codeline lineno="2363"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"></highlight></codeline>
<codeline lineno="2365"><highlight class="normal"></highlight></codeline>
<codeline lineno="2366"><highlight class="normal"></highlight><highlight class="comment">//---------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>initViewer()</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight><highlight class="comment">//---------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!g_viewer_initialised<sp/>&amp;&amp;<sp/>g_xray_detector.getSourcePositionSet().size())</highlight></codeline>
<codeline lineno="2371"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distance_source_object<sp/><sp/><sp/>=<sp/>g_xray_detector.getSourcePositionSet()[0].length();</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distance_detector_object<sp/>=<sp/>g_xray_detector.getDetectorPosition().length();</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"></highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>distance<sp/>=<sp/>std::max(distance_detector_object,<sp/>distance_source_object);</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>half_fovy<sp/>=<sp/>(M_PI<sp/>*<sp/>g_initial_fovy<sp/>/<sp/>2.0)<sp/>/<sp/>180.0;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_zoom<sp/>=<sp/>atan(half_fovy)<sp/>*<sp/>distance;</highlight></codeline>
<codeline lineno="2379"><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_p_scene_graph.get())</highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_initial_near<sp/>=<sp/>(g_p_scene_graph-&gt;getBoundingBox().second<sp/>-<sp/>g_p_scene_graph-&gt;getBoundingBox().first).length()<sp/>/<sp/>5.0;</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_viewer_initialised<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_initial_far<sp/>=<sp/>g_zoom<sp/>*<sp/>50.0;</highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2387"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"></highlight></codeline>
<codeline lineno="2390"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>computeRotation(GLFWwindow*<sp/>apWindow,</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MATRIX4&amp;<sp/>aRotationMatrix)</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2394"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_use_arc_ball)</highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(g_current_x_position<sp/>!=<sp/>g_last_x_position<sp/>||<sp/>g_current_y_position<sp/>!=<sp/>g_last_y_position)</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vec3&lt;GLfloat&gt;<sp/>va(getArcballVector(apWindow,<sp/>g_last_x_position,<sp/><sp/><sp/><sp/>g_last_y_position));</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vec3&lt;GLfloat&gt;<sp/>vb(getArcballVector(apWindow,<sp/>g_current_x_position,<sp/>g_current_y_position));</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"></highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>angle(ROTATION_SPEED<sp/>*<sp/>radian2degree(acos(std::min(1.0,<sp/>va.dotProduct(vb)))));</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vec3&lt;GLfloat&gt;<sp/>axis_in_camera_coord(va<sp/>^<sp/>vb);</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//axis_in_camera_coord.normalize();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2406"><highlight class="normal"></highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix4x4&lt;GLfloat&gt;<sp/>camera2object(aRotationMatrix.getInverse());</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vec3&lt;GLfloat&gt;<sp/>axis_in_object_coord<sp/>=<sp/>camera2object<sp/>*<sp/>axis_in_camera_coord;</highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//axis_in_object_coord.normalize();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2410"><highlight class="normal"></highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Matrix4x4&lt;GLfloat&gt;<sp/>rotation_matrix;</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotation_matrix.rotate(angle,<sp/>axis_in_object_coord);</highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aRotationMatrix<sp/>=<sp/>aRotationMatrix<sp/>*<sp/>rotation_matrix;</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"></highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_last_x_position<sp/>=<sp/>g_current_x_position;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>g_last_y_position<sp/>=<sp/>g_current_y_position;</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2419"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"></highlight></codeline>
<codeline lineno="2421"><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal">Vec3&lt;GLfloat&gt;<sp/>getArcballVector(GLFWwindow*<sp/>apWindow,</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y)</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/>height;</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/>glfwGetWindowSize(apWindow,<sp/>&amp;width,<sp/>&amp;height);</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"></highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/>Vec3&lt;GLfloat&gt;<sp/>P(2.0<sp/>*<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(x)<sp/>/<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(width)<sp/>-<sp/>1.0,</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.0<sp/>*<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(y)<sp/>/<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal">(height)<sp/>-<sp/>1.0,</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0);</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"></highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/>P.setY(-P.getY());</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>OP_squared<sp/>=<sp/>P.getX()<sp/>*<sp/>P.getX()<sp/>+<sp/>P.getY()<sp/>*<sp/>P.getY();</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(OP_squared<sp/>&lt;=<sp/>1.0)</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P.setZ(sqrt(1.0<sp/>-<sp/>OP_squared));<sp/><sp/></highlight><highlight class="comment">//<sp/>Pythagore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>P.normalise();<sp/><sp/></highlight><highlight class="comment">//<sp/>nearest<sp/>point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2444"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(P);</highlight></codeline>
<codeline lineno="2447"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>radian2degree(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>anAngle)</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"></highlight><highlight class="comment">//--------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2453"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(180.0<sp/>*<sp/>anAngle<sp/>/<sp/>gVirtualXRay::PI);</highlight></codeline>
<codeline lineno="2455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2456"><highlight class="normal"></highlight></codeline>
<codeline lineno="2457"><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a2393539c600ba13e56fc176e44f91bcf" kindref="member">getUnitOfEnergy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnitOfEnergy)</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2461"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_of_energy<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(aUnitOfEnergy,<sp/></highlight><highlight class="stringliteral">&quot;megaelectronvolt&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfEnergy,<sp/></highlight><highlight class="stringliteral">&quot;MeV&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_of_energy<sp/>=<sp/>MeV;</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(aUnitOfEnergy,<sp/></highlight><highlight class="stringliteral">&quot;kiloelectronvolt&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfEnergy,<sp/></highlight><highlight class="stringliteral">&quot;keV&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_of_energy<sp/>=<sp/>keV;</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(aUnitOfEnergy,<sp/></highlight><highlight class="stringliteral">&quot;electronvolt&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfEnergy,<sp/></highlight><highlight class="stringliteral">&quot;eV&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_of_energy<sp/>=<sp/>eV;</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__,</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>Unknown<sp/>unit<sp/>of<sp/>energy.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(unit_of_energy);</highlight></codeline>
<codeline lineno="2486"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"></highlight></codeline>
<codeline lineno="2488"><highlight class="normal"></highlight></codeline>
<codeline lineno="2489"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a8fbea25863abc4159adfc0dafc04b6c5" kindref="member">getUnitOfLength</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>aUnitOfLength)</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"></highlight><highlight class="comment">//-----------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2492"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>unit_of_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"></highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;kilometer&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;kilometre&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;km&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_of_length<sp/>=<sp/>km;</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;hectometer&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;hectometre&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;hm&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_of_length<sp/>=<sp/>hm;</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;decameter&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;decametre&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;dam&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_of_length<sp/>=<sp/>dam;</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;meter&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;metre&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;m&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_of_length<sp/>=<sp/>m;</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;decimeter&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;decimetre&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;dm&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_of_length<sp/>=<sp/>dm;</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;centimeter&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;centimetre&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;cm&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_of_length<sp/>=<sp/>cm;</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;millimeter&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;millimetre&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;mm&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_of_length<sp/>=<sp/>mm;</highlight></codeline>
<codeline lineno="2536"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;micrometer&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;micrometre&quot;</highlight><highlight class="normal">)<sp/>||</highlight></codeline>
<codeline lineno="2539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!strcmp(aUnitOfLength,<sp/></highlight><highlight class="stringliteral">&quot;um&quot;</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unit_of_length<sp/>=<sp/>um;</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__,</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ERROR:<sp/>Unknown<sp/>unit<sp/>of<sp/>length.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(unit_of_length);</highlight></codeline>
<codeline lineno="2550"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2551"><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>getVectorImage(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Image&lt;float&gt;&amp;<sp/>anImage)</highlight></codeline>
<codeline lineno="2554"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>output;</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"></highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>anImage.getHeight();<sp/>++j)</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;<sp/>row;</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row.insert(row.end(),<sp/>anImage.getRawData()<sp/>+<sp/>j<sp/>*<sp/>anImage.getWidth(),<sp/>anImage.getRawData()<sp/>+<sp/>(j<sp/>+<sp/>1)<sp/>*<sp/>anImage.getWidth());</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"></highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>output.push_back(row);</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="2566"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"></highlight></codeline>
<codeline lineno="2568"><highlight class="normal"></highlight></codeline>
<codeline lineno="2569"><highlight class="normal">MATRIX4<sp/>Vector2gvxrMatrix(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;&amp;<sp/>aSTLMatrix)</highlight></codeline>
<codeline lineno="2570"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aSTLMatrix.size()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(aSTLMatrix[0].size()<sp/>==<sp/>4<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aSTLMatrix[1].size()<sp/>==<sp/>4<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aSTLMatrix[2].size()<sp/>==<sp/>4<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aSTLMatrix[3].size()<sp/>==<sp/>4)</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MATRIX4(aSTLMatrix[0][0],<sp/>aSTLMatrix[0][1],<sp/>aSTLMatrix[0][2],<sp/>aSTLMatrix[0][3],</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aSTLMatrix[1][0],<sp/>aSTLMatrix[1][1],<sp/>aSTLMatrix[1][2],<sp/>aSTLMatrix[1][3],</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aSTLMatrix[2][0],<sp/>aSTLMatrix[2][1],<sp/>aSTLMatrix[2][2],<sp/>aSTLMatrix[2][3],</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>aSTLMatrix[3][0],<sp/>aSTLMatrix[3][1],<sp/>aSTLMatrix[3][2],<sp/>aSTLMatrix[3][3]);</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>Exception(__FILE__,<sp/>__FUNCTION__,<sp/>__LINE__,<sp/></highlight><highlight class="stringliteral">&quot;Wrong<sp/>matrix<sp/>size&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="2586"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>gvxrMatrix2Vector(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MATRIX4&amp;<sp/>aMatrix4)</highlight></codeline>
<codeline lineno="2590"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>output;</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"><sp/><sp/><sp/><sp/>output.push_back(std::vector&lt;float&gt;(4));</highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/>output.push_back(std::vector&lt;float&gt;(4));</highlight></codeline>
<codeline lineno="2594"><highlight class="normal"><sp/><sp/><sp/><sp/>output.push_back(std::vector&lt;float&gt;(4));</highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/>output.push_back(std::vector&lt;float&gt;(4));</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"></highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/>output[0][0]<sp/>=<sp/>aMatrix4.get4x4()[<sp/>0];</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/>output[0][1]<sp/>=<sp/>aMatrix4.get4x4()[<sp/>1];</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/>output[0][2]<sp/>=<sp/>aMatrix4.get4x4()[<sp/>2];</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/>output[0][3]<sp/>=<sp/>aMatrix4.get4x4()[<sp/>3];</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/>output[1][0]<sp/>=<sp/>aMatrix4.get4x4()[<sp/>4];</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/>output[1][1]<sp/>=<sp/>aMatrix4.get4x4()[<sp/>5];</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/>output[1][2]<sp/>=<sp/>aMatrix4.get4x4()[<sp/>6];</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/>output[1][3]<sp/>=<sp/>aMatrix4.get4x4()[<sp/>7];</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/>output[2][0]<sp/>=<sp/>aMatrix4.get4x4()[<sp/>8];</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/>output[2][1]<sp/>=<sp/>aMatrix4.get4x4()[<sp/>9];</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/>output[2][2]<sp/>=<sp/>aMatrix4.get4x4()[10];</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/>output[2][3]<sp/>=<sp/>aMatrix4.get4x4()[11];</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><sp/><sp/><sp/><sp/>output[3][0]<sp/>=<sp/>aMatrix4.get4x4()[12];</highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/>output[3][1]<sp/>=<sp/>aMatrix4.get4x4()[13];</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/>output[3][2]<sp/>=<sp/>aMatrix4.get4x4()[14];</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/>output[3][3]<sp/>=<sp/>aMatrix4.get4x4()[15];</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"></highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>output;</highlight></codeline>
<codeline lineno="2615"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="SimpleGVXR.cxx"/>
  </compounddef>
</doxygen>
