#!/usr/bin/env Rscript

# Load module
dyn.load(paste("gvxrR", .Platform$dynlib.ext, sep=""))
source('gvxrR.R')
cacheMetaData(1)

# Print the libraries' version
print(getVersionOfSimpleGVXR())
print(getVersionOfCoreGVXR())

# Create an OpenGL context
print("Create an OpenGL context");
createWindow();
setWindowSize(512, 512);

# Set up the beam
print("Set up the beam")
setSourcePosition(-40.0,  0.0, 0.0, "cm");
usePointSource();
#useParallelBeam();
setMonoChromatic(0.08, "MeV", 1000);

# Set up the detector
print("Set up the detector");
setDetectorPosition(10.0, 0.0, 0.0, "cm");
setDetectorUpVector(0, 1, 0);
setDetectorNumberOfPixels(640, 320);
setDetectorPixelSize(0.5, 0.5, "mm");

# Load the data
print("Load the data");
loadSceneGraph("@CMAKE_CURRENT_BINARY_DIR@/welsh-dragon-small.stl", "mm");

# Process every node
for (i in 0:(getNumberOfChildren("root") - 1))
{
    # Get the label
    label <- getChildLabel('root', i);

    paste("Move ", label, " to the centre");
    moveToCentre(label);

    #paste("Move ", label, " to the center");
    #moveToCenter(label);

    paste("Set ", label, "'s Hounsfield unit");
    setHU(label, 1000);
}

# Compute an X-ray image
print("Compute an X-ray image");
disableArtefactFiltering();
# Not working anymore enableArtefactFilteringOnGPU();
# Not working anymore enableArtefactFilteringOnCPU();
x_ray_image <- computeXRayImage();

# Save the last image into a file
print("Save the last image into a file");
saveLastXRayImage();
saveLastLBuffer();

# Display the 3D scene (no event loop)
displayScene();

# Display the 3D scene (no event loop)
# Run an interactive loop
# (can rotate the 3D scene and zoom-in)
# Keys are:
# Q/Escape: to quit the event loop (does not close the window)
# B: printlay/hide the X-ray beam
# W: printlay the polygon meshes in solid or wireframe
# N: printlay the X-ray image in negative or positive
# H: printlay/hide the X-ray detector
renderLoop();
