<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_simple_g_v_x_r_8h" kind="file" language="C++">
    <compoundname>SimpleGVXR.h</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <incdepgraph>
      <node id="2">
        <label>string</label>
      </node>
      <node id="1">
        <label>vector</label>
      </node>
      <node id="0">
        <label>SimpleGVXR.h</label>
        <link refid="_simple_g_v_x_r_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a78353c7c2c0cd41cbe00f34da798c4f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getMajorVersionOfCoreGVXR</definition>
        <argsstring>()</argsstring>
        <name>getMajorVersionOfCoreGVXR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accessor on the major version of the core gVirtualXRay library (gvxr). This number is changed when incompatible API changes have been made. <linebreak/>
<simplesect kind="return"><para>the major version number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a82e1b817d082570de9d2836810cbc52e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getMinorVersionOfCoreGVXR</definition>
        <argsstring>()</argsstring>
        <name>getMinorVersionOfCoreGVXR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accessor on the minor version of the core gVirtualXRay library (gvxr). This number is changed when new functionalities have been added in a backwards-compatible manner. <linebreak/>
<simplesect kind="return"><para>the minor version number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ae604df51718fa67dfabcdb9922283779" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getPatchVersionOfCoreGVXR</definition>
        <argsstring>()</argsstring>
        <name>getPatchVersionOfCoreGVXR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accessor on the minor version of the core gVirtualXRay library (gvxr). This number is changed when bug fixes have been added in a backwards-compatible manner. <linebreak/>
<simplesect kind="return"><para>the patch version number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ab052d10d27f0b8ee1c856eafaab570c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getVersionOfCoreGVXR</definition>
        <argsstring>()</argsstring>
        <name>getVersionOfCoreGVXR</name>
        <briefdescription>
<para>Accessor on the full string version of the core gVirtualXRay library (gvxr). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the full version number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a1495a8a83ee7a799ed9375bc540286cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getMajorVersionOfSimpleGVXR</definition>
        <argsstring>()</argsstring>
        <name>getMajorVersionOfSimpleGVXR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accessor on the major version of SimpleGVXR. This number is changed when incompatible API changes have been made. <linebreak/>
<simplesect kind="return"><para>the major version number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a8dda75e417383f05f8a67d0d805a7ee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getMinorVersionOfSimpleGVXR</definition>
        <argsstring>()</argsstring>
        <name>getMinorVersionOfSimpleGVXR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accessor on the minor version of SimpleGVXR. This number is changed when new functionalities have been added in a backwards-compatible manner. <linebreak/>
<simplesect kind="return"><para>the minor version number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a434fed454c84dfebf5d5df27389f38f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getPatchVersionOfSimpleGVXR</definition>
        <argsstring>()</argsstring>
        <name>getPatchVersionOfSimpleGVXR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accessor on the minor version of SimpleGVXR. This number is changed when bug fixes have been added in a backwards-compatible manner. <linebreak/>
<simplesect kind="return"><para>the patch version number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1aadc6cf5b2124f80f1e41bdb967aafab9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getVersionOfSimpleGVXR</definition>
        <argsstring>()</argsstring>
        <name>getVersionOfSimpleGVXR</name>
        <briefdescription>
<para>Accessor on the full string version of SimpleGVXR. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the full version number </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a45e23d4270816359f47a4c90b9c8f14f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initialiseGLEW</definition>
        <argsstring>()</argsstring>
        <name>initialiseGLEW</name>
        <briefdescription>
<para>Initialise GLEW if it is supported. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a9c13ac5f130aef628570ce7ee4f66e3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initializeGLEW</definition>
        <argsstring>()</argsstring>
        <name>initializeGLEW</name>
        <briefdescription>
<para>Initialise GLEW if it is supported. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a3b738e400ed178dfdfbfc94a8fe604e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void initShader</definition>
        <argsstring>()</argsstring>
        <name>initShader</name>
        <briefdescription>
<para>Initialise visualisation shader. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ad0c720c908987332d7133d32060525e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void orthographic</definition>
        <argsstring>(double left, double right, double bottom, double top, double zNear, double zFar)</argsstring>
        <name>orthographic</name>
        <param>
          <type>double</type>
          <declname>left</declname>
        </param>
        <param>
          <type>double</type>
          <declname>right</declname>
        </param>
        <param>
          <type>double</type>
          <declname>bottom</declname>
        </param>
        <param>
          <type>double</type>
          <declname>top</declname>
        </param>
        <param>
          <type>double</type>
          <declname>zNear</declname>
        </param>
        <param>
          <type>double</type>
          <declname>zFar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replace the projection matrix by a orthographic projection matrix. It behaves as the old glOrtho function. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>left</parametername>
</parameternamelist>
<parameterdescription>
<para>Specify the coordinates for the left vertical clipping plane </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>right</parametername>
</parameternamelist>
<parameterdescription>
<para>Specify the coordinates for the right vertical clipping plane </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bottom</parametername>
</parameternamelist>
<parameterdescription>
<para>Specify the coordinates for the bottom horizontal clipping plane </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>top</parametername>
</parameternamelist>
<parameterdescription>
<para>Specify the coordinates for the top horizontal clipping plane </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zNear</parametername>
</parameternamelist>
<parameterdescription>
<para>Specify the distances to the near clipping plane. The value must be positive </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zFar</parametername>
</parameternamelist>
<parameterdescription>
<para>Specify the distances to the far clipping plane. The value must be positive </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ae0caff488cca64709dd47735deb1b1fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void perspective</definition>
        <argsstring>(double fovy, double aspect, double zNear, double zFar)</argsstring>
        <name>perspective</name>
        <param>
          <type>double</type>
          <declname>fovy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aspect</declname>
        </param>
        <param>
          <type>double</type>
          <declname>zNear</declname>
        </param>
        <param>
          <type>double</type>
          <declname>zFar</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replace the projection matrix by a perspective projection matrix. It behaves as the old gluPerspective function. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fovy</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the field of view angle, in degrees, in the y-direction. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aspect</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the aspect ratio that determines the field of view in the x direction. The aspect ratio is the ratio of x (width) to y (height). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zNear</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the distance from the viewer to the near clipping plane (always positive) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zFar</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the distance from the viewer to the far clipping plane (always positive). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1aa9a72aad9562c014f6892ecd586ad8d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lookAt</definition>
        <argsstring>(double eyeX, double eyeY, double eyeZ, double lookAtX, double lookAtY, double lookAtZ, double upX, double upY, double upZ)</argsstring>
        <name>lookAt</name>
        <param>
          <type>double</type>
          <declname>eyeX</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eyeY</declname>
        </param>
        <param>
          <type>double</type>
          <declname>eyeZ</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lookAtX</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lookAtY</declname>
        </param>
        <param>
          <type>double</type>
          <declname>lookAtZ</declname>
        </param>
        <param>
          <type>double</type>
          <declname>upX</declname>
        </param>
        <param>
          <type>double</type>
          <declname>upY</declname>
        </param>
        <param>
          <type>double</type>
          <declname>upZ</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replace the modelling-viewing matrix by a viewing transformation matrix. It behaves as the old gluLookAt function. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>eyeX</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the position of the eye point along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eyeY</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the position of the eye point along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>eyeZ</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the position of the eye point along the Z-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lookAtX</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the position of the reference point along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lookAtY</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the position of the reference point along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lookAtZ</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the position of the reference point along the Z-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upX</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the direction of the up vector along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upY</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the direction of the up vector along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>upZ</parametername>
</parameternamelist>
<parameterdescription>
<para>Specifies the direction of the up vector along the Z-axis </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1af6fba4396ebad0fd10547e96633ed37e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void pushModelViewMatrix</definition>
        <argsstring>()</argsstring>
        <name>pushModelViewMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add the current matrix to the model/view matrix stack. It behaves as the combination of the old glMatrixMode(GL_MODELVIEW);glPushMatrix() functions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a05fee3d93fc0abc59e50cdb7aec10b95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void popModelViewMatrix</definition>
        <argsstring>()</argsstring>
        <name>popModelViewMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Restore the matrix from the model/view matrix stack, and remove the last matrix of the stack. glMatrixMode(GL_MODELVIEW);glPopMatrix() functions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a41c8baa5a9730a24877ceb363651c9d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rotateModelView</definition>
        <argsstring>(double anAngle, double x, double y, double z)</argsstring>
        <name>rotateModelView</name>
        <param>
          <type>double</type>
          <declname>anAngle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Restore the matrix from the model/view matrix stack, and remove the last matrix of the stack. glMatrixMode(GL_MODELVIEW);glRotate() functions. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>the angle of rotation in degrees </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the coordinate of the rotation axis along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the coordinate of the rotation axis along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the coordinate of the rotation axis along the Z-axis </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="275" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1acd2c465191789a84abd9e511e6e15d86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void autoCreateOpenGLContext</definition>
        <argsstring>(bool aFlag=true)</argsstring>
        <name>autoCreateOpenGLContext</name>
        <param>
          <type>bool</type>
          <declname>aFlag</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Create an OpenGL context automatically. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>true to create the OpenGL context automatically, false otherwise (default value: true) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ac1d17ed7feb9636b0b6de18a7762c1e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setSourcePosition</definition>
        <argsstring>(double x, double y, double z, const std::string &amp;aUnitOfLength)</argsstring>
        <name>setSourcePosition</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
<para>Set the position of the X-ray source. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the position along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the position along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the position along the Z-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the x, y and z parameters. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a149733f58dadc43516fd74d35bbcd670" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; getSourcePosition</definition>
        <argsstring>(const std::string &amp;aUnitOfLength)</argsstring>
        <name>getSourcePosition</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
<para>Accessor on the position of the X-ray source. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the returned value. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the source position in a given unit of length </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a87e072eb89286a901da750cc8d7b7eeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setDetectorPosition</definition>
        <argsstring>(double x, double y, double z, const std::string &amp;aUnitOfLength)</argsstring>
        <name>setDetectorPosition</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
<para>Set the position of the X-ray detector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the position along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the position along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the position along the Z-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the x, y and z parameters. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a401a61a44333c2c037ead73ffdf9c2a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; getDetectorPosition</definition>
        <argsstring>(const std::string &amp;aUnitOfLength)</argsstring>
        <name>getDetectorPosition</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
<para>Accessor on the position of the X-ray detector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the returned value. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the source position in a given unit of length </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="371" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a5a72f299c3609e4d76eeeea958ea65c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setDetectorUpVector</definition>
        <argsstring>(double x, double y, double z)</argsstring>
        <name>setDetectorUpVector</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Set the up-vector defining the orientation of the X-ray detector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the component of the vector along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the component of the vector along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the component of the vector along the Z-axis </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ab669679c11642ce61ac12479ddc82252" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; getDetectorUpVector</definition>
        <argsstring>()</argsstring>
        <name>getDetectorUpVector</name>
        <briefdescription>
<para>Accessor on the up-vector defining the orientation of the X-ray detector. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the up-vector </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="391" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a02d5273c7f657bbac64a7e7b1373f522" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; getDetectorRightVector</definition>
        <argsstring>()</argsstring>
        <name>getDetectorRightVector</name>
        <briefdescription>
<para>Accessor on the right-vector defining the orientation of the X-ray detector. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the right-vector </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="400" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a83bbebef7177c94a6211a39694ef83fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setDetectorNumberOfPixels</definition>
        <argsstring>(int aWidth, int aHeight)</argsstring>
        <name>setDetectorNumberOfPixels</name>
        <param>
          <type>int</type>
          <declname>aWidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aHeight</declname>
        </param>
        <briefdescription>
<para>Set the number of pixels of the X-ray detector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of pixels along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of pixels along the Y-axis </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="410" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a8d620fd4519309c6f0b8f48353b90fee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; getDetectorNumberOfPixels</definition>
        <argsstring>()</argsstring>
        <name>getDetectorNumberOfPixels</name>
        <briefdescription>
<para>Accessor on the number of pixels of the X-ray detector. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size of the detector in number of pixels </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="419" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a84e7693e266b248474229eb6bf4e2a0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setDetectorPixelSize</definition>
        <argsstring>(double aWidth, double aHeight, const std::string &amp;aUnitOfLength)</argsstring>
        <name>setDetectorPixelSize</name>
        <param>
          <type>double</type>
          <declname>aWidth</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aHeight</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
<para>Set the pixel size. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>the pixel size along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>the pixel size along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the aWidth and aHeight parameters. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ac1fa465088ff594d76917fb4a6f13f5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; getDetectorSize</definition>
        <argsstring>(const std::string &amp;aUnitOfLength)</argsstring>
        <name>getDetectorSize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
<para>Accessor on the size of the X-ray detector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the returned value. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the size in a given unit of length </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="460" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1af35d83a0cd47a4962e2a6602a0793b74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void loadMeshFile</definition>
        <argsstring>(const std::string &amp;aLabel, const std::string &amp;aFileName, const std::string &amp;aUnitOfLength)</argsstring>
        <name>loadMeshFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aFileName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a polygon mesh from a file, set its label in the scenegraph (i.e. identifier) and add it to the X-ray renderer. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label in the scenegraph </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>the file where the polygon mesh data is stored </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the data stored in the file. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="481" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ad4e61b0de43e487532d574148e52ffd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void loadSceneGraph</definition>
        <argsstring>(const std::string &amp;aFileName, const std::string &amp;aUnitOfLength)</argsstring>
        <name>loadSceneGraph</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aFileName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Load a scenegraph from a file and add its polygon meshes to the X-ray renderer. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>the file where the polygon mesh data is stored </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the data stored in the file. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="503" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ae7477b096b052fcd05997d7bd625d8b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void emptyMesh</definition>
        <argsstring>(const std::string &amp;aLabel, const std::string &amp;aParent=&quot;root&quot;)</argsstring>
        <name>emptyMesh</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aParent</declname>
          <defval>&quot;root&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an empty polygon mesh and set its label in the scenegraph (i.e. identifier). Note that it is not added to the X-ray renderer. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label in the scenegraph </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aParent</parametername>
</parameternamelist>
<parameterdescription>
<para>the parent of the node in the scenegraph (default: &quot;root&quot;) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="515" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a594ed6d5c8639db4c65c44bf1d149752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void makeCube</definition>
        <argsstring>(const std::string &amp;aLabel, double aLength=1.0, const std::string &amp;aUnitOfLength=&quot;cm&quot;, const std::string &amp;aParent=&quot;root&quot;)</argsstring>
        <name>makeCube</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aLength</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
          <defval>&quot;cm&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aParent</declname>
          <defval>&quot;root&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a cube and set its label in the scenegraph (i.e. identifier). Note that it is not added to the X-ray renderer. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label in the scenegraph </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of an edge of the cube </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to aLength. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; (default value: &quot;cm&quot;) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aParent</parametername>
</parameternamelist>
<parameterdescription>
<para>the parent of the node in the scenegraph (default: &quot;root&quot;) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="539" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a767e3795a7f184c5bcb41f6e10de842e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void makeCylinder</definition>
        <argsstring>(const std::string &amp;aLabel, unsigned int aNumberOfSectors=10, double aHeight=1.0, double aRadius=0.5, const std::string &amp;aUnitOfLength=&quot;cm&quot;, const std::string &amp;aParent=&quot;root&quot;)</argsstring>
        <name>makeCylinder</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>aNumberOfSectors</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>double</type>
          <declname>aHeight</declname>
          <defval>1.0</defval>
        </param>
        <param>
          <type>double</type>
          <declname>aRadius</declname>
          <defval>0.5</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
          <defval>&quot;cm&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aParent</declname>
          <defval>&quot;root&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a cylinder and set its label in the scenegraph (i.e. identifier). Note that it is not added to the X-ray renderer. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label in the scenegraph </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aNumberOfSectors</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of sector defining the mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the cylinder </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aRadius</parametername>
</parameternamelist>
<parameterdescription>
<para>the radius of the cylinder </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to aHeight and aRadius. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; (default value: &quot;cm&quot;) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aParent</parametername>
</parameternamelist>
<parameterdescription>
<para>the parent of the node in the scenegraph (default: &quot;root&quot;) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="567" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1adb734b32c97a74015748dfaf82bd8c7e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void makeIsoSurface</definition>
        <argsstring>(const std::string &amp;aLabel, short anIsoValue, const std::vector&lt; short &gt; &amp;aVoxelDataSet, unsigned int aWidth, unsigned int aHeight, unsigned int aDepth, double aSpacingX, double aSpacingY, double aSpacingZ, const std::string &amp;aUnitOfLength=&quot;cm&quot;, const std::string &amp;aParent=&quot;root&quot;)</argsstring>
        <name>makeIsoSurface</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>short</type>
          <declname>anIsoValue</declname>
        </param>
        <param>
          <type>const std::vector&lt; short &gt; &amp;</type>
          <declname>aVoxelDataSet</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>aWidth</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>aHeight</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>aDepth</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aSpacingX</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aSpacingY</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aSpacingZ</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
          <defval>&quot;cm&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aParent</declname>
          <defval>&quot;root&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create an iso-surface from a 3D image and set its label in the scenegraph (i.e. identifier). Note that it is not added to the X-ray renderer. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label in the scenegraph </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anIsoValue</parametername>
</parameternamelist>
<parameterdescription>
<para>the iso-value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aVoxelDataSet</parametername>
</parameternamelist>
<parameterdescription>
<para>the voxel dataset </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of voxel along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of voxel along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aDepth</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of voxel along the Z-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aSpacingX</parametername>
</parameternamelist>
<parameterdescription>
<para>the space between the centre of two successive voxels along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aSpacingY</parametername>
</parameternamelist>
<parameterdescription>
<para>the space between the centre of two successive voxels along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aSpacingZ</parametername>
</parameternamelist>
<parameterdescription>
<para>the space between the centre of two successive voxels along the Z-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to aSpacingX, aSpacingY and aSpacingZ. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; (default value: &quot;cm&quot;) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aParent</parametername>
</parameternamelist>
<parameterdescription>
<para>the parent of the node in the scenegraph (default: &quot;root&quot;) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="602" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a7439a61c9cb4e6118810ec4fa5e40d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addMesh</definition>
        <argsstring>(const std::string &amp;aDestination, const std::string &amp;aSource)</argsstring>
        <name>addMesh</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aDestination</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aSource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a polygon mesh (aSource) to another one (aDestination). It corresponds to the operation as follows: aDestination += aSource. Both aSource and aDestination have to already exist in the scenegraph. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aDestination</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh that is going to be modified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aSource</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh that is going to be added to aDestination </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="625" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1aa2d38b8483e2ca9fe23259b383859314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void subtractMesh</definition>
        <argsstring>(const std::string &amp;aDestination, const std::string &amp;aSource)</argsstring>
        <name>subtractMesh</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aDestination</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aSource</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Subtract a polygon mesh (aSource) from another one (aDestination). It corresponds to the operation as follows: aDestination -= aSource. Both aSource and aDestination have to already exist in the scenegraph. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aDestination</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh that is going to be modified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aSource</parametername>
</parameternamelist>
<parameterdescription>
<para>the polygon mesh that is going to be subtracted from aDestination </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="638" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ac4faad08043c8b6b16e23ee7e772efb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int getNumberOfChildren</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>getNumberOfChildren</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
<para>Get the number of children of a node in the scenegraph. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label in the scenegraph </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of chidren </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="648" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a2540ae0646c910ba1c68f468d71770f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getChildLabel</definition>
        <argsstring>(const std::string &amp;aLabel, unsigned int i)</argsstring>
        <name>getChildLabel</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accessor on the i-th child&apos;s label in the list of children of a given node in the scenegraph. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label in the scenegraph </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the ID of the child </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the label corresponding to the i-th child </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="660" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1af48d8fdac5cd08f999ac53317bea21d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; getLocalTransformationMatrix</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>getLocalTransformationMatrix</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accessor on the local transformation matrix of a given node in the scenegraph. If the node does not exist, the identity matrix is returned. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label in the scenegraph </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the corresponding local transformation matrix </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="671" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a9647a01539f7e68416e8dc7a1f332dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setLocalTransformationMatrix</definition>
        <argsstring>(const std::string &amp;aLabel, const std::vector&lt; double &gt; &amp;aMatrix)</argsstring>
        <name>setLocalTransformationMatrix</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>aMatrix</declname>
        </param>
        <briefdescription>
<para>Set the local transformation matrix of a given node in the scenegraph. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label in the scenegraph </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>the local transformation matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="681" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a75e208002b5ac068767a99088ba18f9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void applyCurrentLocalTransformation</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>applyCurrentLocalTransformation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Apply the current local transformation to all the vertices of a given node in the scenegraph. Note the the local transformation is then reset to the identity matrix. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label in the scenegraph </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="692" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a88e6a78d2f84299bae95b2b1296da9ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; getNodeAndChildrenBoundingBox</definition>
        <argsstring>(const std::string &amp;aLabel, const std::string &amp;aUnitOfLength=&quot;cm&quot;)</argsstring>
        <name>getNodeAndChildrenBoundingBox</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
          <defval>&quot;cm&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the bounding box of a given node and all its children (if any). The bounding box is given in the world coordinate system. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label in the scenegraph </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the bounding box. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; (default value: &quot;cm&quot;) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the bounding box as: min_x, min_y, min_z, max_x, max_y, max_z </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="714" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1abbc0ba72376cfd66b63fd6391c71f990" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; getNodeOnlyBoundingBox</definition>
        <argsstring>(const std::string &amp;aLabel, const std::string &amp;aUnitOfLength=&quot;cm&quot;)</argsstring>
        <name>getNodeOnlyBoundingBox</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
          <defval>&quot;cm&quot;</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access the bounding box of a given node (without its children). The bounding box is given in the world coordinate system. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label in the scenegraph </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the bounding box. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; (default value: &quot;cm&quot;) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the bounding box as: min_x, min_y, min_z, max_x, max_y, max_z </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="737" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a0cc80f5ef79f06b447bec495f5c97c68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void displayNode</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>displayNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
<para>Display the scenegraph node using OpenGL. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="747" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a7dac7c6d68422b7e86944435a9a035f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void invertNormalVectors</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>invertNormalVectors</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
<para>Invert the normal vectors of a given polygon mesh. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="756" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1aed64e5b84cf09a952cafb0e24a86d693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setColor</definition>
        <argsstring>(const std::string &amp;aLabel, float R, float G, float B, float A)</argsstring>
        <name>setColor</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>float</type>
          <declname>R</declname>
        </param>
        <param>
          <type>float</type>
          <declname>G</declname>
        </param>
        <param>
          <type>float</type>
          <declname>B</declname>
        </param>
        <param>
          <type>float</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Set the color of a given polygon mesh. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>the red channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>G</parametername>
</parameternamelist>
<parameterdescription>
<para>the green channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>the blue channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>the alpha channel </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="769" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1aa4ed78a91448f99ee23c4cf7f3845213" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setColour</definition>
        <argsstring>(const std::string &amp;aLabel, float R, float G, float B, float A)</argsstring>
        <name>setColour</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>float</type>
          <declname>R</declname>
        </param>
        <param>
          <type>float</type>
          <declname>G</declname>
        </param>
        <param>
          <type>float</type>
          <declname>B</declname>
        </param>
        <param>
          <type>float</type>
          <declname>A</declname>
        </param>
        <briefdescription>
<para>Set the colour of a given polygon mesh. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>R</parametername>
</parameternamelist>
<parameterdescription>
<para>the red channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>G</parametername>
</parameternamelist>
<parameterdescription>
<para>the green channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>the blue channel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>the alpha channel </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="782" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a1097bcfbeecaf9ed43bfdc0024a48c70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; getAmbientColour</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>getAmbientColour</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
<para>Accessor on the ambient colour of the material of a given polygon mesh. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the ambient colour </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="791" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a17824de8c345642821db10247482e5e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; getDiffuseColour</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>getDiffuseColour</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
<para>Accessor on the diffuse colour of the material of a given polygon mesh. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the diffuse colour </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="800" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a6e76db5ab1162a9c09ab0f1d4a3073ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; getSpecularColour</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>getSpecularColour</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
<para>Accessor on the specular colour of the material of a given polygon mesh. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the specular colour </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="809" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a842dfc01ad06ac6c3bf08ab78b4dc288" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float getShininess</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>getShininess</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
<para>Accessor on the shininess of the material of a given polygon mesh. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the shininess coefficient </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="818" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a193db9e9eab8b3205d126387789e6907" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addPolygonMeshAsInnerSurface</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>addPolygonMeshAsInnerSurface</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a polygon mesh, given its label, to the X-ray renderer as an inner surface. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh in the scenegraph </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="828" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a71f514bb1ae0ca2e9fd19b3423685cb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addPolygonMeshAsOuterSurface</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>addPolygonMeshAsOuterSurface</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a polygon mesh, given its label, to the X-ray renderer as an outer surface. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh in the scenegraph </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="838" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1af582363bdb3958279767ca1459c52173" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void removePolygonMeshesFromSceneGraph</definition>
        <argsstring>()</argsstring>
        <name>removePolygonMeshesFromSceneGraph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Empty the scenegraph. Note that it also empties the X-ray renderer from all its meshes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="845" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1abb5ac6fa1e360fb8db58f63fc1453f20" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void removePolygonMeshesFromXRayRenderer</definition>
        <argsstring>()</argsstring>
        <name>removePolygonMeshesFromXRayRenderer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Empty the X-ray renderer from all its meshes. Note that the meshes are kept in the scenegraph. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="852" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a931aa02220c52492126298021cf03997" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void moveToCenter</definition>
        <argsstring>()</argsstring>
        <name>moveToCenter</name>
        <briefdescription>
<para>Move the scenegraph to the centre. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="858" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a73d0586e23fcb2f1f3fc1bb5dbe96924" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void moveToCentre</definition>
        <argsstring>()</argsstring>
        <name>moveToCentre</name>
        <briefdescription>
<para>Move the scenegraph to the centre. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="864" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a1a677df8836861c2daebc55416f96f33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void moveToCenter</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>moveToCenter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
<para>Move a polygon mesh to the centre. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh in the scenegraph </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="873" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ab201e8492ddbd735120b9135889fb4be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void moveToCentre</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>moveToCentre</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
<para>Move a polygon mesh to the centre. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh in the scenegraph </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="882" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a6c702a3df32eee4e0a0c8033e5cbd6aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scaleNode</definition>
        <argsstring>(const std::string &amp;aLabel, double x, double y, double z, const std::string &amp;aUnitOfLength)</argsstring>
        <name>scaleNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
<para>Scale a polygon mesh. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh to transform </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the scaling factor along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the scaling factor along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the scaling factor along the Z-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the x, y and z parameters. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="904" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a3a13d0e42ff6a485f0617afc565fbdb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rotateNode</definition>
        <argsstring>(const std::string &amp;aLabel, double anAngle, double x, double y, double z)</argsstring>
        <name>rotateNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>anAngle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
<para>Rotate a polygon mesh. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh to transform </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>the rotation angle in degrees </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the component of the rotation vector along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the component of the rotation vector along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the component of the rotation vector along the Z-axis </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="921" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a29205bbf002e7aafc7053a992e3c168a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void translateNode</definition>
        <argsstring>(const std::string &amp;aLabel, double x, double y, double z, const std::string &amp;aUnitOfLength)</argsstring>
        <name>translateNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
<para>Translate a polygon mesh. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh to transform </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the component of the translation vector along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the component of the translation vector along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the component of the translation vector along the Z-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the x, y and z parameters. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="947" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a1a8d3be943217700650c800027a44883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void shearNode</definition>
        <argsstring>(const std::string &amp;aLabel, double yx, double zx, double xy, double zy, double xz, double yz)</argsstring>
        <name>shearNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>zx</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>zy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>xz</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yz</declname>
        </param>
        <briefdescription>
<para>Use a shear matrix to transform the node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh to transform </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yx</parametername>
</parameternamelist>
<parameterdescription>
<para>the yx component of the shear matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zx</parametername>
</parameternamelist>
<parameterdescription>
<para>the zx component of the shear matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xy</parametername>
</parameternamelist>
<parameterdescription>
<para>the xy component of the shear matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>zy</parametername>
</parameternamelist>
<parameterdescription>
<para>the zy component of the shear matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>xz</parametername>
</parameternamelist>
<parameterdescription>
<para>the xz component of the shear matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yz</parametername>
</parameternamelist>
<parameterdescription>
<para>the yz component of the shear matrix </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="966" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ae80cfca75f6e77016d9c32ed152e763b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resetSceneTransformation</definition>
        <argsstring>()</argsstring>
        <name>resetSceneTransformation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replace the 3-D transformation matrix of the overall 3-D scene by an identity matrix. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="979" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a8cef1100241801fc4f06c414001e3ff2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scaleScene</definition>
        <argsstring>(double x, double y, double z)</argsstring>
        <name>scaleScene</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scale the 3-D scene (all the polygon meshes will be affected but not modified). <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the scaling factor along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the scaling factor along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the scaling factor along the Z-axis </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="991" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a099498a73392a1b97d4feb8d44fdba6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scaleScene</definition>
        <argsstring>(double x, double y, double z, const std::string &amp;aUnitOfLength)</argsstring>
        <name>scaleScene</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Scale the 3-D scene (all the polygon meshes will be affected but not modified). <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the scaling factor along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the scaling factor along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the scaling factor along the Z-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the x, y and z parameters. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1013" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a7fe19b103fe00ede3c5e8077ffeb518a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rotateScene</definition>
        <argsstring>(double anAngle, double x, double y, double z)</argsstring>
        <name>rotateScene</name>
        <param>
          <type>double</type>
          <declname>anAngle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Rotate the 3-D scene (all the polygon meshes will be affected but not modified). <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>the rotation angle in degrees </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the component of the rotation vector along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the component of the rotation vector along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the component of the rotation vector along the Z-axis </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1026" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a45b9f362b177ac5a13342714ab5c01f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void translateScene</definition>
        <argsstring>(double x, double y, double z, const std::string &amp;aUnitOfLength)</argsstring>
        <name>translateScene</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Translate the 3-D scene (all the polygon meshes will be affected but not modified). <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the component of the translation vector along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the component of the translation vector along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the component of the translation vector along the Z-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the x, y and z parameters. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1048" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a5d02d6f2cbfb9ed1059c045520f1973f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;float&gt; &gt; getSceneTransformationMatrix</definition>
        <argsstring>()</argsstring>
        <name>getSceneTransformationMatrix</name>
        <briefdescription>
<para>Accessor on the 3-D scene transformation matrix. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the 3-D scene transformation matrix as a 4x4 array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1060" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1aa4aa9748df310aea560042330f573502" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;float&gt; &gt; getRootTransformationMatrix</definition>
        <argsstring>()</argsstring>
        <name>getRootTransformationMatrix</name>
        <briefdescription>
<para>Accessor on the transformation matrix of the scengraph&apos;s root node. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the scengraph&apos;s root node transformation matrix as a 4x4 array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1069" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a3e7103cf57db663192b25daf5ba96d42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;float&gt; &gt; getNodeTransformationMatrix</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>getNodeTransformationMatrix</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
<para>Accessor on the transformation matrix of a given node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the scengraph&apos;s root node transformation matrix as a 4x4 array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1079" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1aa72652349c8b3370dfb1eabdbf52a8c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setSceneTransformationMatrix</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;aMatrix)</argsstring>
        <name>setSceneTransformationMatrix</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>aMatrix</declname>
        </param>
        <briefdescription>
<para>Set the 3-D scene transformation matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>the transformation matrix as a 4x4 array </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1089" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a26b47d2b671031d42999f441001d1f5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setRootTransformationMatrix</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;aMatrix)</argsstring>
        <name>setRootTransformationMatrix</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>aMatrix</declname>
        </param>
        <briefdescription>
<para>Set the transformation matrix of the scengraph&apos;s root node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>the transformation matrix as a 4x4 array </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1099" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a063a778b2fcbca187e029a00c8791d0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setNodeTransformationMatrix</definition>
        <argsstring>(const std::string &amp;aLabel, const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;aMatrix)</argsstring>
        <name>setNodeTransformationMatrix</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>aMatrix</declname>
        </param>
        <briefdescription>
<para>Set the transformation matrix of a given node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>the transformation matrix as a 4x4 array </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a666f02786b381f6674403e3cd0ea0701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setHU</definition>
        <argsstring>(const std::string &amp;aLabel, short HU)</argsstring>
        <name>setHU</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>short</type>
          <declname>HU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the Hounsfield value corresponding to the material properties of a polygon mesh. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>HU</parametername>
</parameternamelist>
<parameterdescription>
<para>the Hounsfield value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ab23dde2c54f7c4101bd6686fb607f35d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setHounsfieldUnit</definition>
        <argsstring>(const std::string &amp;aLabel, short HU)</argsstring>
        <name>setHounsfieldUnit</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>short</type>
          <declname>HU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the Hounsfield value corresponding to the material properties of a polygon mesh. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>HU</parametername>
</parameternamelist>
<parameterdescription>
<para>the Hounsfield value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a745f0f88e63e0c61d85bafd05b3c8c16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setHounsfieldValue</definition>
        <argsstring>(const std::string &amp;aLabel, short HU)</argsstring>
        <name>setHounsfieldValue</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>short</type>
          <declname>HU</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the Hounsfield value corresponding to the material properties of a polygon mesh. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>HU</parametername>
</parameternamelist>
<parameterdescription>
<para>the Hounsfield value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1affa210476df8611952212c278f8fe9c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setElement</definition>
        <argsstring>(const std::string &amp;aLabel, unsigned short Z)</argsstring>
        <name>setElement</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>unsigned short</type>
          <declname>Z</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the chemical element (or element) corresponding to the material properties of a polygon mesh. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Z</parametername>
</parameternamelist>
<parameterdescription>
<para>the atomic number (or Z number) corresponding to the element </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ac41a156819fbfcd4445cc254ad540ed4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setElement</definition>
        <argsstring>(const std::string &amp;aLabel, const std::string &amp;aName)</argsstring>
        <name>setElement</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the chemical element (or element) corresponding to the material properties of a polygon mesh. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aName</parametername>
</parameternamelist>
<parameterdescription>
<para>the symbol or name corresponding to the element </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a6cc34fdb74aec791b764c42f3452087a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setMixture</definition>
        <argsstring>(const std::string &amp;aLabel, const std::string &amp;aMixture)</argsstring>
        <name>setMixture</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aMixture</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the mixture corresponding to the material properties of a polygon mesh. Don&apos;t forget to set the density of the material. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aMixture</parametername>
</parameternamelist>
<parameterdescription>
<para>the details about the mixture. It is given as a sequence of element symbol &amp; relative weight, e.g. Ti90Al6V4. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a7667215c4b257434c1fdb46b8278f830" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setCompound</definition>
        <argsstring>(const std::string &amp;aLabel, const std::string &amp;aCompound)</argsstring>
        <name>setCompound</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aCompound</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the compound corresponding to the material properties of a polygon mesh. Don&apos;t forget to set the density of the material. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aCompound</parametername>
</parameternamelist>
<parameterdescription>
<para>the details about the compound. It is given as a sequence of element symbol &amp; number of atoms, e.g. H2O for water and SiC for silicon carbide. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a5f456fc99da9709f5af260c7f7c2c722" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setMassAttenuationCoefficient</definition>
        <argsstring>(const std::string &amp;aLabel, double aCoefficient, const std::string &amp;aUnit)</argsstring>
        <name>setMassAttenuationCoefficient</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aCoefficient</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the mass attenuation coefficient corresponding to the material properties of a polygon mesh. Don&apos;t forget to set the density of the material. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aCoefficient</parametername>
</parameternamelist>
<parameterdescription>
<para>the mass attenuation coefficient </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnit</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit corresponding to aCoefficient. Acceptable values are: &quot;cm2/g&quot; and &quot;cm2.g-1&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a40b33ab5dc57354052c2c8503034b3d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setLinearAttenuationCoefficient</definition>
        <argsstring>(const std::string &amp;aLabel, double aCoefficient, const std::string &amp;aUnit)</argsstring>
        <name>setLinearAttenuationCoefficient</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aCoefficient</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the linear attenuation coefficient corresponding to the material properties of a polygon mesh. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aCoefficient</parametername>
</parameternamelist>
<parameterdescription>
<para>the liner attenuation coefficient </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnit</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit corresponding to aCoefficient. Acceptable values are: &quot;cm-1&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1aa6837904488dbbcac6d1f013f8527412" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setMu</definition>
        <argsstring>(const std::string &amp;aLabel, double aCoefficient, const std::string &amp;aUnit)</argsstring>
        <name>setMu</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aCoefficient</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the linear attenuation coefficient corresponding to the material properties of a polygon mesh. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aCoefficient</parametername>
</parameternamelist>
<parameterdescription>
<para>the liner attenuation coefficient </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnit</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit corresponding to aCoefficient. Acceptable values are: &quot;cm-1&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a05877ab6284a8559db52d3adaf7b1837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setDensity</definition>
        <argsstring>(const std::string &amp;aLabel, double aDensity, const std::string &amp;aUnit)</argsstring>
        <name>setDensity</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aDensity</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnit</declname>
        </param>
        <briefdescription>
<para>Set the density corresponding to the material properties of a polygon mesh. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aDensity</parametername>
</parameternamelist>
<parameterdescription>
<para>the density </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnit</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit corresponding to aDensity. Acceptable values are: &quot;g/cm3&quot; and &quot;g.cm-3&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a3b6bafe5b7184365b01f8d4dd7719f0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getDensity</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>getDensity</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accessor on the density corresponding to the material properties of a polygon mesh. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the density of the polygon mesh&apos;s material in g/cm3 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ac856bc9af62ef66b7ecf7d9db884b490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getMassAttenuationCoefficient</definition>
        <argsstring>(const std::string &amp;aLabel, double anEnergy, const std::string &amp;aUnitOfEnergy)</argsstring>
        <name>getMassAttenuationCoefficient</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>anEnergy</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfEnergy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accessor on the mass attenuation coefficient at a given energy corresponding to the material properties of a polygon mesh. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the photon energy of interest </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of energy corresponding to anEnergy. Acceptable values are: &quot;electronvolt&quot;, &quot;eV&quot;, &quot;kiloelectronvolt&quot;, &quot;keV&quot;, &quot;megaelectronvolt&quot;, &quot;MeV&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the mass attenuation coefficient of the polygon mesh&apos;s material in cm2/g </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a5f2a0cb6b7cbd23890f9376b8fd4c1ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getLinearAttenuationCoefficient</definition>
        <argsstring>(const std::string &amp;aLabel, double anEnergy, const std::string &amp;aUnitOfEnergy)</argsstring>
        <name>getLinearAttenuationCoefficient</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>double</type>
          <declname>anEnergy</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfEnergy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Accessor on the linear attenuation coefficient at a given energy corresponding to the material properties of a polygon mesh. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the photon energy of interest </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of energy corresponding to anEnergy. Acceptable values are: &quot;electronvolt&quot;, &quot;eV&quot;, &quot;kiloelectronvolt&quot;, &quot;keV&quot;, &quot;megaelectronvolt&quot;, &quot;MeV&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the linear attenuation coefficient of the polygon mesh&apos;s material in cm-1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1aa4a8e041850ca152eefb166521a14029" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getMaterialLabel</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>getMaterialLabel</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
<para>Accessor on the material label of a polygon mesh. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the label of the material </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a17e1064097a6183115c1fe81822e32ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void createOpenGLContext</definition>
        <argsstring>(int aWindowID=-1)</argsstring>
        <name>createOpenGLContext</name>
        <param>
          <type>int</type>
          <declname>aWindowID</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Create an OpenGL context (the window won&apos;t be shown). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aWindowID</parametername>
</parameternamelist>
<parameterdescription>
<para>the numerical ID of the context to create (default value: -1, means that the ID will be automatically generated) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a1015e854787d4aac76ce7bd0778684ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void createWindow</definition>
        <argsstring>(int aWindowID=-1, int aVisibilityFlag=0)</argsstring>
        <name>createWindow</name>
        <param>
          <type>int</type>
          <declname>aWindowID</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>aVisibilityFlag</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Create an OpenGL context and display it in a window. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aWindowID</parametername>
</parameternamelist>
<parameterdescription>
<para>the numerical ID of the context to create (default value: -1, means that the ID will be automatically generated) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aVisibilityFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>flag controling if the window should be visible (1) or hidden (0). (default value: 0) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a43893e298d8b93bf427b2ada57fe859d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setWindowSize</definition>
        <argsstring>(int aWidth, int aHeight, int aWindowID=-1)</argsstring>
        <name>setWindowSize</name>
        <param>
          <type>int</type>
          <declname>aWidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aHeight</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aWindowID</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Create an OpenGL context and display it in a window. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of pixels along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of pixels along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aWindowID</parametername>
</parameternamelist>
<parameterdescription>
<para>the numerical ID of the corresponding context (default value: -1, means that the active context will be used) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a70b00d6fbffedb6332cbf300fae03a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void displayScene</definition>
        <argsstring>(bool aSceneRotationFlag=true, int aWindowID=-1)</argsstring>
        <name>displayScene</name>
        <param>
          <type>bool</type>
          <declname>aSceneRotationFlag</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>int</type>
          <declname>aWindowID</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>3-D visualisation of the 3-D scene (source, detector, and scanned objects). Note that there is no interactive loop running. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aSceneRotationFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the 3-D scene has to be rotated with the arc-ball method, false otherwise (default value: true) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aWindowID</parametername>
</parameternamelist>
<parameterdescription>
<para>the numerical ID of the corresponding context (default value: -1, means that the active context will be used) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ad5f2ad0bc3d3a8faec876665b38e98e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void renderLoop</definition>
        <argsstring>(int aWindowID=-1)</argsstring>
        <name>renderLoop</name>
        <param>
          <type>int</type>
          <declname>aWindowID</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>3-D visualisation of the 3-D scene (source, detector, and scanned objects). Note that there is interactive loop running. Keys are:<itemizedlist>
<listitem><para>Q/Escape: to quit the event loop (does not close the window)</para></listitem><listitem><para>B: display/hide the X-ray beam</para></listitem><listitem><para>W: display the polygon meshes in solid or wireframe</para></listitem><listitem><para>N: display the X-ray image in negative or positive</para></listitem><listitem><para>L: switch lighting on/off</para></listitem><listitem><para>D: display/hide the X-ray detector</para></listitem><listitem><para>V: display/hide normal vectors <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aWindowID</parametername>
</parameternamelist>
<parameterdescription>
<para>the numerical ID of the corresponding context (default value: -1, means that the active context will be used) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a3198dbf5a2a5db26f3ff660bc096623e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void startArcBallRotation</definition>
        <argsstring>(double x, double y)</argsstring>
        <name>startArcBallRotation</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call this function when the user starts an arc-ball rotation (e.g. left-mouse button click in the 3-D visualisation window). <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the cursor x-axis position in the viewport coordinate system </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the cursor y-axis position in the viewport coordinate system </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1401" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a9f3c730eb6d54b2ccbfe188b1f0e8d48" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void stopArcBallRotation</definition>
        <argsstring>()</argsstring>
        <name>stopArcBallRotation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Call this function when the user stops an arc-ball rotation (e.g. release the left-mouse button click in the 3-D visualisation window). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1af7b6643d296278d52d44e31e27333f96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool usingArcBallRotation</definition>
        <argsstring>()</argsstring>
        <name>usingArcBallRotation</name>
        <briefdescription>
<para>Check if arc-ball rotation is currently in use. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if arc-ball rotation is currently in use, false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1417" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a63a0fc9976892d417b8d0adb40f80e9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void cursorPositionCallback</definition>
        <argsstring>(double x, double y, int aViewportWidth, int aViewportHeight)</argsstring>
        <name>cursorPositionCallback</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aViewportWidth</declname>
        </param>
        <param>
          <type>int</type>
          <declname>aViewportHeight</declname>
        </param>
        <briefdescription>
<para>Call this function when the user moves the mouse. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the cursor x-axis position in the viewport coordinate system </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the cursor y-axis position in the viewport coordinate system </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aViewportWidth</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the viewport along the x-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aViewportHeight</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the viewport along the y-axis </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1429" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ae4b6f4d3fd3cd18f74f002d5a7ce9224" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void scrollCallback</definition>
        <argsstring>(double xoffset, double yoffset)</argsstring>
        <name>scrollCallback</name>
        <param>
          <type>double</type>
          <declname>xoffset</declname>
        </param>
        <param>
          <type>double</type>
          <declname>yoffset</declname>
        </param>
        <briefdescription>
<para>Call this function when the user scrolls. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xoffset</parametername>
</parameternamelist>
<parameterdescription>
<para>the scroll offset along the x-axis (not used) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>yoffset</parametername>
</parameternamelist>
<parameterdescription>
<para>the scroll offset along the y-axis (used for zooming in and out) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1443" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ad83afb6f214408b967c83f16674e1ceb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void showWindow</definition>
        <argsstring>(int aWindowID=-1)</argsstring>
        <name>showWindow</name>
        <param>
          <type>int</type>
          <declname>aWindowID</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Make an OpenGL context visible and display a window. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aWindowID</parametername>
</parameternamelist>
<parameterdescription>
<para>the numerical ID of the corresponding context (default value: -1, means that the active context will be used) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1454" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a3f6fb7d5c610d87e677add575fb901fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hideWindow</definition>
        <argsstring>(int aWindowID=-1)</argsstring>
        <name>hideWindow</name>
        <param>
          <type>int</type>
          <declname>aWindowID</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Hide a window. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aWindowID</parametername>
</parameternamelist>
<parameterdescription>
<para>the numerical ID of the corresponding context (default value: -1, means that the active context will be used) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1465" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a3998fea4e05c76a1fd2d37974a645ad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroyWindow</definition>
        <argsstring>(int aWindowID=-1)</argsstring>
        <name>destroyWindow</name>
        <param>
          <type>int</type>
          <declname>aWindowID</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Close and destroy a given window or OpenGL context. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1471" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ac86d792db22ecd805d41178653b986a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void destroyAllWindows</definition>
        <argsstring>(void)</argsstring>
        <name>destroyAllWindows</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Close and destroy all the windows and OpenGL contexts that have been created. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a7fa8f9b4050b5727cd05529f320a5251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void usePointSource</definition>
        <argsstring>()</argsstring>
        <name>usePointSource</name>
        <briefdescription>
<para>Use a point source. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1483" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a0445b8fe702aeeca5f2b451bcab79836" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void useParallelBeam</definition>
        <argsstring>()</argsstring>
        <name>useParallelBeam</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use a parallel source (e.g. to mimic a source that is extremely far from the scanned object and detector). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1af0d213ffe3069b549499398f7b75dc97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void useParallelSource</definition>
        <argsstring>()</argsstring>
        <name>useParallelSource</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use a parallel source (e.g. to mimic a source that is extremely far from the scanned object and detector). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1497" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a82f5d828b75f302d2ccdfba39d2f16b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void resetBeamSpectrum</definition>
        <argsstring>()</argsstring>
        <name>resetBeamSpectrum</name>
        <briefdescription>
<para>Empty the beam spectrum. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1503" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a1e10a1493cd2fd2d3299abc9c519b3e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void setMonoChromatic</definition>
        <argsstring>(double anEnergy, const std::string &amp;aUnitOfEnergy, double aNumberOfPhotons)</argsstring>
        <name>setMonoChromatic</name>
        <param>
          <type>double</type>
          <declname>anEnergy</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfEnergy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aNumberOfPhotons</declname>
        </param>
        <briefdescription>
<para>Use a monochromatic beam spectrum (i.e. one single energy). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the incident photon energy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of energy corresponding to anEnergy. Acceptable values are: &quot;electronvolt&quot;, &quot;eV&quot;, &quot;kiloelectronvolt&quot;, &quot;keV&quot;, &quot;megaelectronvolt&quot;, &quot;MeV&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aNumberOfPhotons</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of incident photons </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1518" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a8388db9b629c40efe7d6a33180eb0406" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void addEnergyBinToSpectrum</definition>
        <argsstring>(double anEnergy, const std::string &amp;aUnitOfEnergy, double aNumberOfPhotons)</argsstring>
        <name>addEnergyBinToSpectrum</name>
        <param>
          <type>double</type>
          <declname>anEnergy</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfEnergy</declname>
        </param>
        <param>
          <type>double</type>
          <declname>aNumberOfPhotons</declname>
        </param>
        <briefdescription>
<para>Add an energy bin to the beam spectrum (useful to generate polychromatism). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the incident photon energy </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of energy corresponding to anEnergy. Acceptable values are: &quot;electronvolt&quot;, &quot;eV&quot;, &quot;kiloelectronvolt&quot;, &quot;keV&quot;, &quot;megaelectronvolt&quot;, &quot;MeV&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aNumberOfPhotons</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of incident photons </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1535" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a2163e6fff436eb05debd45d848681d64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void loadSpectrumFromTSV</definition>
        <argsstring>(const std::string &amp;aFileName, const std::string &amp;aUnitOfEnergy, bool aNormalisationFlag)</argsstring>
        <name>loadSpectrumFromTSV</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aFileName</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfEnergy</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>aNormalisationFlag</declname>
        </param>
        <briefdescription>
<para>Load the incident beam energy spectrum from a TSV file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the file to load </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of energy corresponding to anEnergy. Acceptable values are: &quot;electronvolt&quot;, &quot;eV&quot;, &quot;kiloelectronvolt&quot;, &quot;keV&quot;, &quot;megaelectronvolt&quot;, &quot;MeV&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aNormalisationFlag</parametername>
</parameternamelist>
<parameterdescription>
<para>true to normalise the total energy to 1, false otherwise </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1553" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a8924b6dcab4674bc33e24825cb7d1ebe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; getEnergyBins</definition>
        <argsstring>(const std::string &amp;aUnitOfEnergy)</argsstring>
        <name>getEnergyBins</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfEnergy</declname>
        </param>
        <briefdescription>
<para>Accessor on the energy bins of the beam spectrum. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aUnitOfEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of energy corresponding to the returned vector. Acceptable values are: &quot;electronvolt&quot;, &quot;eV&quot;, &quot;kiloelectronvolt&quot;, &quot;keV&quot;, &quot;megaelectronvolt&quot;, &quot;MeV&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the list of energy bins in aUnitOfEnergy </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1569" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a71542b762755797939abab386ebbeb3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; getPhotonCountEnergyBins</definition>
        <argsstring>()</argsstring>
        <name>getPhotonCountEnergyBins</name>
        <briefdescription>
<para>Accessor on the number of photons per energy bin of the beam spectrum. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the list of number of photons </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1578" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1abb44c8ba20d31d7bb33afe27b86933be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void saveSTLfile</definition>
        <argsstring>(const std::string &amp;aLabel, const std::string &amp;aFileName=std::string())</argsstring>
        <name>saveSTLfile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aFileName</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>Save the polygon mesh of a given node. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the output file (default: means that the filename will be automatically generated and the file saved in the current path) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1591" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a32e448289291a23d645c301b8c5c6482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void saveLastXRayImage</definition>
        <argsstring>(const std::string &amp;aFileName=std::string(), bool useCompression=true)</argsstring>
        <name>saveLastXRayImage</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aFileName</declname>
          <defval>std::string()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useCompression</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Save the last X-ray image that has been computed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the output file (default: means that the filename will be automatically generated and the file saved in the current path) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useCompression</parametername>
</parameternamelist>
<parameterdescription>
<para>use data compression is possible (default: true) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1605" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a30e9dcbbe24bc34add2f849655f6e5e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void saveLastLBuffer</definition>
        <argsstring>(const std::string &amp;aFileName=std::string(), bool useCompression=true)</argsstring>
        <name>saveLastLBuffer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aFileName</declname>
          <defval>std::string()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useCompression</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Save the last L-buffer that has been computed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the output file (default: means that the filename will be automatically generated and the file saved in the current path) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useCompression</parametername>
</parameternamelist>
<parameterdescription>
<para>use data compression is possible (default: true) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1619" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a58a2b9e1ede05451b09797cdb13531ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void saveLastCumulatedLBuffer</definition>
        <argsstring>(const std::string &amp;aFileName=std::string(), bool useCompression=true)</argsstring>
        <name>saveLastCumulatedLBuffer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aFileName</declname>
          <defval>std::string()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useCompression</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Save the last cumulated L-buffer that has been computed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the output file (default: means that the filename will be automatically generated and the file saved in the current path) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useCompression</parametername>
</parameternamelist>
<parameterdescription>
<para>use data compression is possible (default: true) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1633" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1abc0ba9cbdc0fe49d7da46dc8d25afb3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void saveLastSinogram</definition>
        <argsstring>(const std::string &amp;aFileName=std::string(), bool useCompression=true)</argsstring>
        <name>saveLastSinogram</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aFileName</declname>
          <defval>std::string()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useCompression</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Save the last sinogram that has been computed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the output file (default: 0 means that the filename will be automatically generated and the file saved in the current path) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useCompression</parametername>
</parameternamelist>
<parameterdescription>
<para>use data compression is possible (default: true) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1647" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a0723e5c30c74ae2bd5189f7567b39504" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void saveLastProjectionSet</definition>
        <argsstring>(const std::string &amp;aFileName=std::string(), bool useCompression=true)</argsstring>
        <name>saveLastProjectionSet</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aFileName</declname>
          <defval>std::string()</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useCompression</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Save the last projection set that has been computed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aFileName</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the output file (default: 0 means that the filename will be automatically generated and the file saved in the current path) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useCompression</parametername>
</parameternamelist>
<parameterdescription>
<para>use data compression is possible (default: true) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1661" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1acd097bdd4b2ab5f9b8fc8991b316e533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enableArtefactFilteringOnGPU</definition>
        <argsstring>(void)</argsstring>
        <name>enableArtefactFilteringOnGPU</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enable artefact filtering on GPU (it is fast but can be inaccurate). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1668" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a5898aa8c45e6c34137f10978b1d49526" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enableArtifactFilteringOnGPU</definition>
        <argsstring>(void)</argsstring>
        <name>enableArtifactFilteringOnGPU</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Enable artefact filtering on GPU (it is fast but can be inaccurate). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1674" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1aed410cdfc2b9d1d28d6820e6bfb57324" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enableArtefactFilteringOnCPU</definition>
        <argsstring>(void)</argsstring>
        <name>enableArtefactFilteringOnCPU</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable artefact filtering on CPU (can be extremely slow as it makes use of ray-tracing). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1681" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a7ef2b71a4bf9d57e06e975de75ba88dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void enableArtifactFilteringOnCPU</definition>
        <argsstring>(void)</argsstring>
        <name>enableArtifactFilteringOnCPU</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Enable artefact filtering on CPU (can be extremely slow as it makes use of ray-tracing). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1688" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a8825c3ab5571de7f6e665c944149a09f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void disableArtefactFiltering</definition>
        <argsstring>(void)</argsstring>
        <name>disableArtefactFiltering</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disable artefact filtering altogether. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1694" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a73f8d211018dc40e3c3f17400230ffc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void disableArtifactFiltering</definition>
        <argsstring>(void)</argsstring>
        <name>disableArtifactFiltering</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Disable artefact filtering altogether. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1700" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a2bff58abee8cc5cd98e6a17c34e9af74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getUnitOfEnergy</definition>
        <argsstring>(const std::string &amp;aUnitOfEnergy)</argsstring>
        <name>getUnitOfEnergy</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfEnergy</declname>
        </param>
        <briefdescription>
<para>Accessor on the numerical value corresponding to a unit of energy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aUnitOfEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of energy. Acceptable values are: &quot;electronvolt&quot;, &quot;eV&quot;, &quot;kiloelectronvolt&quot;, &quot;keV&quot;, &quot;megaelectronvolt&quot;, &quot;MeV&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the corresponding numerical value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1714" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a61e8cc31f2f3caa5ea89e019eec5e559" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getUnitOfLength</definition>
        <argsstring>(const std::string &amp;aUnitOfLength)</argsstring>
        <name>getUnitOfLength</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
        </param>
        <briefdescription>
<para>Accessor on the numerical value corresponding to a unit of length. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the corresponding numerical value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1732" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a5451b6f54339116e72cba6cc58e01be4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;float&gt; &gt; computeXRayImage</definition>
        <argsstring>()</argsstring>
        <name>computeXRayImage</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the X-ray projection corresponding to the environment that has previously been set, i.e.<itemizedlist>
<listitem><para>Detector position</para></listitem><listitem><para>Detector orientation</para></listitem><listitem><para>Detector size and resolution</para></listitem><listitem><para>Source position</para></listitem><listitem><para>Source shape</para></listitem><listitem><para>Beam spectrum</para></listitem><listitem><para>Scanned object geometries</para></listitem><listitem><para>Scanned object material properties <linebreak/>
<simplesect kind="return"><para>the corresponding X-ray image </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1750" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a3fd962d97691068b4a0686570a06c147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;float&gt; &gt; computeLBuffer</definition>
        <argsstring>(const std::string &amp;aLabel)</argsstring>
        <name>computeLBuffer</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aLabel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the L-buffer of a polygon mesh corresponding to the environment that has previously been set, i.e.<itemizedlist>
<listitem><para>Detector position</para></listitem><listitem><para>Detector orientation</para></listitem><listitem><para>Detector size and resolution</para></listitem><listitem><para>Source position</para></listitem><listitem><para>Source shape</para></listitem><listitem><para>Scanned object geometry <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aLabel</parametername>
</parameternamelist>
<parameterdescription>
<para>the label of the polygon mesh </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the corresponding L-buffer </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1767" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a3a52493fbad0ba16f886fb8f0fec612b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;std::vector&lt;float&gt; &gt; &gt; computeSinogram</definition>
        <argsstring>(double x, double y, double z, const std::string &amp;aUnitOfLength, unsigned int aNumberOfAngle, double anAngleOffset)</argsstring>
        <name>computeSinogram</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>aNumberOfAngle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>anAngleOffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the sinogram corresponding to the environment that has previously been set, i.e.<itemizedlist>
<listitem><para>Detector position</para></listitem><listitem><para>Detector orientation</para></listitem><listitem><para>Detector size and resolution</para></listitem><listitem><para>Source position</para></listitem><listitem><para>Source shape</para></listitem><listitem><para>Beam spectrum</para></listitem><listitem><para>Scanned object geometries</para></listitem><listitem><para>Scanned object material properties Note that the rotation vector is the same as the up-vector of the detector. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of the rotation centre along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of the rotation centre along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of the rotation centre along the Z-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the x, y and z parameters. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aNumberOfAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>the total number of projections in the sinogram </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anAngleOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>the angle in degrees between two successive projections </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the corresponding sinogram </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1802" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ace5245156e6abbba7c1e45facd19b86f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;std::vector&lt;float&gt; &gt; &gt; computeProjectionSet</definition>
        <argsstring>(double x, double y, double z, const std::string &amp;aUnitOfLength, unsigned int aNumberOfAngle, double anAngleOffset)</argsstring>
        <name>computeProjectionSet</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>double</type>
          <declname>y</declname>
        </param>
        <param>
          <type>double</type>
          <declname>z</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfLength</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>aNumberOfAngle</declname>
        </param>
        <param>
          <type>double</type>
          <declname>anAngleOffset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute the projection set corresponding to the environment that has previously been set, i.e.<itemizedlist>
<listitem><para>Detector position</para></listitem><listitem><para>Detector orientation</para></listitem><listitem><para>Detector size and resolution</para></listitem><listitem><para>Source position</para></listitem><listitem><para>Source shape</para></listitem><listitem><para>Beam spectrum</para></listitem><listitem><para>Scanned object geometries</para></listitem><listitem><para>Scanned object material properties Note that the rotation vector is the same as the up-vector of the detector. <linebreak/>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of the rotation centre along the X-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of the rotation centre along the Y-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>z</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of the rotation centre along the Z-axis </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfLength</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of length corresponding to the x, y and z parameters. Acceptable values are: &quot;um&quot;, &quot;micrometre&quot;, &quot;micrometer&quot;, &quot;mm&quot;, &quot;millimetre&quot;, &quot;millimeter&quot;, &quot;cm&quot;, &quot;centimetre&quot;, &quot;centimeter&quot;, &quot;dm&quot;, &quot;decimetre&quot;, &quot;decimeter&quot;, &quot;m&quot;, &quot;metre&quot;, &quot;meter&quot;, &quot;dam&quot;, &quot;decametre&quot;, &quot;decameter&quot;, &quot;hm&quot;, &quot;hectometre&quot;, &quot;hectometer&quot;, &quot;km&quot;, &quot;kilometre&quot;, &quot;kilometer&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aNumberOfAngle</parametername>
</parameternamelist>
<parameterdescription>
<para>the total number of projections in the projection set </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anAngleOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>the angle in degrees between two successive projections </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the corresponding projection set </para></simplesect>
</para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1843" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ab0814f041176d63ce590dc46e8721f5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;float&gt; &gt; getLastXRayImage</definition>
        <argsstring>()</argsstring>
        <name>getLastXRayImage</name>
        <briefdescription>
<para>Accessor on the last X-ray image that has been computed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the last X-ray image </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1858" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1adefbb2fdefe4ddcd43da3a8cd1c94957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;float&gt; &gt; getLastLBuffer</definition>
        <argsstring>()</argsstring>
        <name>getLastLBuffer</name>
        <briefdescription>
<para>Accessor on the last L-buffer that has been computed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the last L-buffer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1867" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ad8526de37a0350754af2f8868b50a83d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;std::vector&lt;float&gt; &gt; &gt; getLastSinogram</definition>
        <argsstring>()</argsstring>
        <name>getLastSinogram</name>
        <briefdescription>
<para>Accessor on the last sinogram that has been computed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the last sinogram </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1876" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a190d0b62ad7b87b414b6ff25a3236802" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;std::vector&lt;float&gt; &gt; &gt; getLastProjectionSet</definition>
        <argsstring>()</argsstring>
        <name>getLastProjectionSet</name>
        <briefdescription>
<para>Accessor on the last projection set that has been computed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the last projection set </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1885" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a2fd74a1173b58acd49329e6d8f9e4f0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getImageWidth</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;anImage)</argsstring>
        <name>getImageWidth</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>anImage</declname>
        </param>
        <briefdescription>
<para>Accessor on the width of a given image. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anImage</parametername>
</parameternamelist>
<parameterdescription>
<para>the image </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the width of the image (in number of pixels) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1895" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a405587a06bb8b4188d32e9c2865ce0f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int getImageHeght</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;anImage)</argsstring>
        <name>getImageHeght</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>anImage</declname>
        </param>
        <briefdescription>
<para>Accessor on the height of a given image. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anImage</parametername>
</parameternamelist>
<parameterdescription>
<para>the image </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the height of the image (in number of pixels) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1905" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a68e92985a191484817d8c0eb20ae2288" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; getImageRow</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;anImage, int j)</argsstring>
        <name>getImageRow</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; float &gt; &gt; &amp;</type>
          <declname>anImage</declname>
        </param>
        <param>
          <type>int</type>
          <declname>j</declname>
        </param>
        <briefdescription>
<para>Accessor on the j-th row of pixels of a given image. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anImage</parametername>
</parameternamelist>
<parameterdescription>
<para>the image </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>j</parametername>
</parameternamelist>
<parameterdescription>
<para>the row number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the j-th row of pixels </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1916" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a4fc536f8abfe8e4da84c3500b277ccca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getElementName</definition>
        <argsstring>(unsigned short Z)</argsstring>
        <name>getElementName</name>
        <param>
          <type>unsigned short</type>
          <declname>Z</declname>
        </param>
        <briefdescription>
<para>Accessor on the chemical element&apos;s name depending on its Z number. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Z</parametername>
</parameternamelist>
<parameterdescription>
<para>the atomic number of the element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the name of the corresponding element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1927" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a2126c53d1d3b3b667b77796c32fc8b6b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string getElementSymbol</definition>
        <argsstring>(unsigned short Z)</argsstring>
        <name>getElementSymbol</name>
        <param>
          <type>unsigned short</type>
          <declname>Z</declname>
        </param>
        <briefdescription>
<para>Accessor on the chemical element&apos; symbol depending on its Z number. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Z</parametername>
</parameternamelist>
<parameterdescription>
<para>the atomic number of the element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the name of the corresponding element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1937" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1adaf08e1db28bdc950d3fda4e3c339f11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned short</type>
        <definition>unsigned short getElementAtomicNumber</definition>
        <argsstring>(const std::string &amp;anElement)</argsstring>
        <name>getElementAtomicNumber</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>anElement</declname>
        </param>
        <briefdescription>
<para>Accessor on the chemical element&apos;s Z number. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anElement</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or symbol of the element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the Z number of the corresponding element </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1947" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a66250b34d317b34acac80de74ed818b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getDensityFromElement</definition>
        <argsstring>(const std::string &amp;anElement)</argsstring>
        <name>getDensityFromElement</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>anElement</declname>
        </param>
        <briefdescription>
<para>Accessor on the chemical element&apos;s density. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anElement</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or symbol of the element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the density of the corresponding element (in g / cm3) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1957" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ad3b42298ebf0079de61aef0d54ab2d79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getDensityFromElement</definition>
        <argsstring>(unsigned short Z)</argsstring>
        <name>getDensityFromElement</name>
        <param>
          <type>unsigned short</type>
          <declname>Z</declname>
        </param>
        <briefdescription>
<para>Accessor on the chemical element&apos;s density. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Z</parametername>
</parameternamelist>
<parameterdescription>
<para>the Z number of the element </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the density of the corresponding element (in g / cm3) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1967" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1ad3f273e3fb319d02f61a31d49166b37c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getDensityFromHU</definition>
        <argsstring>(double HU)</argsstring>
        <name>getDensityFromHU</name>
        <param>
          <type>double</type>
          <declname>HU</declname>
        </param>
        <briefdescription>
<para>Accessor on the HU&apos;s density. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>HU</parametername>
</parameternamelist>
<parameterdescription>
<para>the HU </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the density of the corresponding HU (in g / cm3) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1977" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a1741bff66bdbc6fb8480b53bc9c0b7bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getMassAttenuationFromElement</definition>
        <argsstring>(const std::string &amp;anElement, double anEnergy, const std::string &amp;aUnitOfEnergy)</argsstring>
        <name>getMassAttenuationFromElement</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>anElement</declname>
        </param>
        <param>
          <type>double</type>
          <declname>anEnergy</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfEnergy</declname>
        </param>
        <briefdescription>
<para>Accessor on the chemical element&apos;s mass attenuation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>anElement</parametername>
</parameternamelist>
<parameterdescription>
<para>the name or symbol of the element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the photon energy of interest </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of energy corresponding to anEnergy. Acceptable values are: &quot;electronvolt&quot;, &quot;eV&quot;, &quot;kiloelectronvolt&quot;, &quot;keV&quot;, &quot;megaelectronvolt&quot;, &quot;MeV&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the mass attenuation of the corresponding element (in cm2/g) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="1993" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a5226e1d6c175c5dee458e744c4710e1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getMassAttenuationFromElement</definition>
        <argsstring>(unsigned short Z, double anEnergy, const std::string &amp;aUnitOfEnergy)</argsstring>
        <name>getMassAttenuationFromElement</name>
        <param>
          <type>unsigned short</type>
          <declname>Z</declname>
        </param>
        <param>
          <type>double</type>
          <declname>anEnergy</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfEnergy</declname>
        </param>
        <briefdescription>
<para>Accessor on the chemical element&apos;s mass attenuation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Z</parametername>
</parameternamelist>
<parameterdescription>
<para>the Z number of the element </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the photon energy of interest </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of energy corresponding to anEnergy. Acceptable values are: &quot;electronvolt&quot;, &quot;eV&quot;, &quot;kiloelectronvolt&quot;, &quot;keV&quot;, &quot;megaelectronvolt&quot;, &quot;MeV&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the mass attenuation of the corresponding element (in cm2/g) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="2011" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a5c3cc32cad85894eccd540360af42c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getMassAttenuationFromHU</definition>
        <argsstring>(double HU, double anEnergy, const std::string &amp;aUnitOfEnergy)</argsstring>
        <name>getMassAttenuationFromHU</name>
        <param>
          <type>double</type>
          <declname>HU</declname>
        </param>
        <param>
          <type>double</type>
          <declname>anEnergy</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfEnergy</declname>
        </param>
        <briefdescription>
<para>Accessor on the HU&apos;s mass attenuation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>HU</parametername>
</parameternamelist>
<parameterdescription>
<para>the HU </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the photon energy of interest </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of energy corresponding to anEnergy. Acceptable values are: &quot;electronvolt&quot;, &quot;eV&quot;, &quot;kiloelectronvolt&quot;, &quot;keV&quot;, &quot;megaelectronvolt&quot;, &quot;MeV&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the density of the corresponding HU (in cm2/g) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="2028" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1add3d514ce518f8207a5d16ee809cf5b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getMassAttenuationFromMixture</definition>
        <argsstring>(const std::string &amp;aMixture, double anEnergy, const std::string &amp;aUnitOfEnergy)</argsstring>
        <name>getMassAttenuationFromMixture</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aMixture</declname>
        </param>
        <param>
          <type>double</type>
          <declname>anEnergy</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfEnergy</declname>
        </param>
        <briefdescription>
<para>Accessor on the mixture&apos;s mass attenuation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aMixture</parametername>
</parameternamelist>
<parameterdescription>
<para>the details about the mixture. It is given as a sequence of element symbol &amp; relative weight, e.g. Ti90Al6V4. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the photon energy of interest </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of energy corresponding to anEnergy. Acceptable values are: &quot;electronvolt&quot;, &quot;eV&quot;, &quot;kiloelectronvolt&quot;, &quot;keV&quot;, &quot;megaelectronvolt&quot;, &quot;MeV&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the mass attenuation of the corresponding mixture (in cm2/g) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="2048" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a4826978ac2240b8aee811ad31464f959" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getMassAttenuationFromCompound</definition>
        <argsstring>(const std::string &amp;aCompound, double anEnergy, const std::string &amp;aUnitOfEnergy)</argsstring>
        <name>getMassAttenuationFromCompound</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aCompound</declname>
        </param>
        <param>
          <type>double</type>
          <declname>anEnergy</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfEnergy</declname>
        </param>
        <briefdescription>
<para>Accessor on the compound&apos;s mass attenuation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>aCompound</parametername>
</parameternamelist>
<parameterdescription>
<para>the details about the compound. It is given as a sequence of element symbol &amp; number of atoms, e.g. H2O for water and SiC for silicon carbide. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the photon energy of interest </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of energy corresponding to anEnergy. Acceptable values are: &quot;electronvolt&quot;, &quot;eV&quot;, &quot;kiloelectronvolt&quot;, &quot;keV&quot;, &quot;megaelectronvolt&quot;, &quot;MeV&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the mass attenuation of the corresponding compound (in cm2/g) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="2068" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a3acb9c86309f58436b2c8c0213d705b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double getMuFromHU</definition>
        <argsstring>(double HU, double anEnergy, const std::string &amp;aUnitOfEnergy)</argsstring>
        <name>getMuFromHU</name>
        <param>
          <type>double</type>
          <declname>HU</declname>
        </param>
        <param>
          <type>double</type>
          <declname>anEnergy</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>aUnitOfEnergy</declname>
        </param>
        <briefdescription>
<para>Accessor on the HU&apos;s linear attenuation coefficient. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>HU</parametername>
</parameternamelist>
<parameterdescription>
<para>the HU </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>anEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the photon energy of interest </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>aUnitOfEnergy</parametername>
</parameternamelist>
<parameterdescription>
<para>the unit of energy corresponding to anEnergy. Acceptable values are: &quot;electronvolt&quot;, &quot;eV&quot;, &quot;kiloelectronvolt&quot;, &quot;keV&quot;, &quot;megaelectronvolt&quot;, &quot;MeV&quot; </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the linear attenuation coefficient (in cm-1) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="2084" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a9c93e28cc1b360c09fa1b98fc3eab70b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;float&gt; &gt; loadImage2D</definition>
        <argsstring>(const std::string &amp;aFileName)</argsstring>
        <name>loadImage2D</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aFileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>void setShiftFilter(double aValue); void setScaleFilter(double aValue); double getShiftFilter(); double getScaleFilter(); </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="2095" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a5bccdd725f49630a3f0dd6a98042b0a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;std::vector&lt;float&gt; &gt; &gt; loadImage3D</definition>
        <argsstring>(const std::string &amp;aFileName)</argsstring>
        <name>loadImage3D</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aFileName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="2097" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a8dac31be57c95fd955954336e08f368e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double computeZNCC</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt; &amp;aReferenceImage, const std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt; &amp;aTestImage)</argsstring>
        <name>computeZNCC</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt; &amp;</type>
          <declname>aReferenceImage</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt; &amp;</type>
          <declname>aTestImage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="2099" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a58ac54c235a2a0c4c5dd291846eaed68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double computeRMSE</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt; &amp;aReferenceImage, const std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt; &amp;aTestImage)</argsstring>
        <name>computeRMSE</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt; &amp;</type>
          <declname>aReferenceImage</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt; &amp;</type>
          <declname>aTestImage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="2102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1aeddf9a558bc0bfbd27cf414284d4074e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float getMinValue</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt; &amp;aImage)</argsstring>
        <name>getMinValue</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt; &amp;</type>
          <declname>aImage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="2105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="_simple_g_v_x_r_8h_1a5799a720264d882ca468f08124be656a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float getMaxValue</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt; &amp;aImage)</argsstring>
        <name>getMaxValue</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; std::vector&lt; float &gt; &gt; &gt; &amp;</type>
          <declname>aImage</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="SimpleGVXR.h" line="2106" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>SimpleGVXR is an API to the bulk functionalities and classes of gVirtualXRay. SimpleGVXR is used as the basis for the language bindings generated using SWIG. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="version"><para>1.0</para></simplesect>
<simplesect kind="date"><para>03/10/2018</para></simplesect>
<simplesect kind="author"><para>Dr Franck P. Vidal</para></simplesect>
License BSD 3-Clause License.</para><para>For details on use and redistribution please refer to <ulink url="http://opensource.org/licenses/BSD-3-Clause">http://opensource.org/licenses/BSD-3-Clause</ulink></para><para>Copyright (c) by Dr Franck P. Vidal (<ulink url="mailto:franck.p.vidal@fpvidal.net">franck.p.vidal@fpvidal.net</ulink>), <ulink url="http://www.fpvidal.net/,">http://www.fpvidal.net/,</ulink> Oct 2018, 2018, version 1.1, BSD 3-Clause License </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"></highlight></codeline>
<codeline lineno="3"><highlight class="comment">Copyright<sp/>(c)<sp/>2019,<sp/>Dr<sp/>Franck<sp/>P.<sp/>Vidal<sp/>(franck.p.vidal@fpvidal.net),</highlight></codeline>
<codeline lineno="4"><highlight class="comment">http://www.fpvidal.net/</highlight></codeline>
<codeline lineno="5"><highlight class="comment">All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="6"><highlight class="comment"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/>modification,</highlight></codeline>
<codeline lineno="8"><highlight class="comment">are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment">1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="11"><highlight class="comment">this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"></highlight></codeline>
<codeline lineno="13"><highlight class="comment">2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="14"><highlight class="comment">this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or</highlight></codeline>
<codeline lineno="15"><highlight class="comment">other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment">3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>Bangor<sp/>University<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors</highlight></codeline>
<codeline lineno="18"><highlight class="comment">may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without</highlight></codeline>
<codeline lineno="19"><highlight class="comment">specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"></highlight></codeline>
<codeline lineno="21"><highlight class="comment">THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND</highlight></codeline>
<codeline lineno="22"><highlight class="comment">ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,</highlight></codeline>
<codeline lineno="23"><highlight class="comment">THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE</highlight></codeline>
<codeline lineno="24"><highlight class="comment">ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE</highlight></codeline>
<codeline lineno="25"><highlight class="comment">FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL</highlight></codeline>
<codeline lineno="26"><highlight class="comment">DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR</highlight></codeline>
<codeline lineno="27"><highlight class="comment">SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER</highlight></codeline>
<codeline lineno="28"><highlight class="comment">CAUSED<sp/>AND<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,</highlight></codeline>
<codeline lineno="29"><highlight class="comment">OR<sp/>TORT<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF</highlight></codeline>
<codeline lineno="30"><highlight class="comment">THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="31"><highlight class="comment"></highlight></codeline>
<codeline lineno="32"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__SimpleGVXR_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__SimpleGVXR_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="comment">//******************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Include</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//******************************************************************************</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="78"><highlight class="comment"></highlight></codeline>
<codeline lineno="81"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a78353c7c2c0cd41cbe00f34da798c4f6" kindref="member">getMajorVersionOfCoreGVXR</ref>();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="89"><highlight class="comment"></highlight></codeline>
<codeline lineno="92"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a82e1b817d082570de9d2836810cbc52e" kindref="member">getMinorVersionOfCoreGVXR</ref>();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="100"><highlight class="comment"></highlight></codeline>
<codeline lineno="103"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ae604df51718fa67dfabcdb9922283779" kindref="member">getPatchVersionOfCoreGVXR</ref>();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="109"><highlight class="comment"></highlight></codeline>
<codeline lineno="112"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">std::string<sp/><ref refid="_simple_g_v_x_r_8h_1ab052d10d27f0b8ee1c856eafaab570c8" kindref="member">getVersionOfCoreGVXR</ref>();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="119"><highlight class="comment"></highlight></codeline>
<codeline lineno="122"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a1495a8a83ee7a799ed9375bc540286cc" kindref="member">getMajorVersionOfSimpleGVXR</ref>();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="129"><highlight class="comment"></highlight></codeline>
<codeline lineno="132"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a8dda75e417383f05f8a67d0d805a7ee4" kindref="member">getMinorVersionOfSimpleGVXR</ref>();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="139"><highlight class="comment"></highlight></codeline>
<codeline lineno="142"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a434fed454c84dfebf5d5df27389f38f5" kindref="member">getPatchVersionOfSimpleGVXR</ref>();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="148"><highlight class="comment"></highlight></codeline>
<codeline lineno="151"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">std::string<sp/><ref refid="_simple_g_v_x_r_8h_1aadc6cf5b2124f80f1e41bdb967aafab9" kindref="member">getVersionOfSimpleGVXR</ref>();</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="157"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a45e23d4270816359f47a4c90b9c8f14f" kindref="member">initialiseGLEW</ref>();</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="163"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a9c13ac5f130aef628570ce7ee4f66e3c" kindref="member">initializeGLEW</ref>();</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="169"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a3b738e400ed178dfdfbfc94a8fe604e1" kindref="member">initShader</ref>();</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="176"><highlight class="comment"></highlight></codeline>
<codeline lineno="189"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ad0c720c908987332d7133d32060525e1" kindref="member">orthographic</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>left,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>right,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bottom,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>top,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zNear,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zFar);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="201"><highlight class="comment"></highlight></codeline>
<codeline lineno="212"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ae0caff488cca64709dd47735deb1b1fb" kindref="member">perspective</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fovy,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aspect,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>zNear,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/>zFar);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="219"><highlight class="comment"></highlight></codeline>
<codeline lineno="236"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1aa9a72aad9562c014f6892ecd586ad8d0" kindref="member">lookAt</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eyeX,</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eyeY,</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eyeZ,</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lookAtX,</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lookAtY,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>lookAtZ,</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upX,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upY,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>upZ);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="252"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1af6fba4396ebad0fd10547e96633ed37e" kindref="member">pushModelViewMatrix</ref>();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="260"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a05fee3d93fc0abc59e50cdb7aec10b95" kindref="member">popModelViewMatrix</ref>();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="268"><highlight class="comment"></highlight></codeline>
<codeline lineno="274"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a41c8baa5a9730a24877ceb363651c9d0" kindref="member">rotateModelView</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>anAngle,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="280"><highlight class="comment"></highlight></codeline>
<codeline lineno="284"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1acd2c465191789a84abd9e511e6e15d86" kindref="member">autoCreateOpenGLContext</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aFlag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="290"><highlight class="comment"></highlight></codeline>
<codeline lineno="305"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ac1d17ed7feb9636b0b6de18a7762c1e7" kindref="member">setSourcePosition</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="314"><highlight class="comment"></highlight></codeline>
<codeline lineno="327"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a149733f58dadc43516fd74d35bbcd670" kindref="member">getSourcePosition</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="333"><highlight class="comment"></highlight></codeline>
<codeline lineno="348"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a87e072eb89286a901da750cc8d7b7eeb" kindref="member">setDetectorPosition</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="357"><highlight class="comment"></highlight></codeline>
<codeline lineno="370"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a401a61a44333c2c037ead73ffdf9c2a3" kindref="member">getDetectorPosition</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="376"><highlight class="comment"></highlight></codeline>
<codeline lineno="381"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a5a72f299c3609e4d76eeeea958ea65c2" kindref="member">setDetectorUpVector</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="387"><highlight class="comment"></highlight></codeline>
<codeline lineno="390"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1ab669679c11642ce61ac12479ddc82252" kindref="member">getDetectorUpVector</ref>();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="396"><highlight class="comment"></highlight></codeline>
<codeline lineno="399"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a02d5273c7f657bbac64a7e7b1373f522" kindref="member">getDetectorRightVector</ref>();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="405"><highlight class="comment"></highlight></codeline>
<codeline lineno="409"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a83bbebef7177c94a6211a39694ef83fc" kindref="member">setDetectorNumberOfPixels</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aHeight);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="415"><highlight class="comment"></highlight></codeline>
<codeline lineno="418"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">std::vector&lt;int&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a8d620fd4519309c6f0b8f48353b90fee" kindref="member">getDetectorNumberOfPixels</ref>();</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="424"><highlight class="comment"></highlight></codeline>
<codeline lineno="438"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a84e7693e266b248474229eb6bf4e2a0d" kindref="member">setDetectorPixelSize</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aWidth,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aHeight,</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="446"><highlight class="comment"></highlight></codeline>
<codeline lineno="459"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1ac1fa465088ff594d76917fb4a6f13f5e" kindref="member">getDetectorSize</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="466"><highlight class="comment"></highlight></codeline>
<codeline lineno="480"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1af35d83a0cd47a4962e2a6602a0793b74" kindref="member">loadMeshFile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aFileName,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="489"><highlight class="comment"></highlight></codeline>
<codeline lineno="502"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ad4e61b0de43e487532d574148e52ffd0" kindref="member">loadSceneGraph</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aFileName,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="510"><highlight class="comment"></highlight></codeline>
<codeline lineno="514"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ae7477b096b052fcd05997d7bd625d8b4" kindref="member">emptyMesh</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aParent<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="522"><highlight class="comment"></highlight></codeline>
<codeline lineno="538"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a594ed6d5c8639db4c65c44bf1d149752" kindref="member">makeCube</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aLength<sp/>=<sp/>1.0,</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cm&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aParent<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="548"><highlight class="comment"></highlight></codeline>
<codeline lineno="566"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a767e3795a7f184c5bcb41f6e10de842e" kindref="member">makeCylinder</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aNumberOfSectors<sp/>=<sp/>10,</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aHeight<sp/>=<sp/>1.0,</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aRadius<sp/>=<sp/>0.5,</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cm&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aParent<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="578"><highlight class="comment"></highlight></codeline>
<codeline lineno="601"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1adb734b32c97a74015748dfaf82bd8c7e" kindref="member">makeIsoSurface</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>anIsoValue,</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;short&gt;&amp;<sp/>aVoxelDataSet,</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWidth,</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aHeight,</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aDepth,</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aSpacingX,</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aSpacingY,</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aSpacingZ,</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cm&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aParent<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;root&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="619"><highlight class="comment"></highlight></codeline>
<codeline lineno="624"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a7439a61c9cb4e6118810ec4fa5e40d01" kindref="member">addMesh</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aDestination,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aSource);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="632"><highlight class="comment"></highlight></codeline>
<codeline lineno="637"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1aa2d38b8483e2ca9fe23259b383859314" kindref="member">subtractMesh</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aDestination,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aSource);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="643"><highlight class="comment"></highlight></codeline>
<codeline lineno="647"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ac4faad08043c8b6b16e23ee7e772efb3" kindref="member">getNumberOfChildren</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="654"><highlight class="comment"></highlight></codeline>
<codeline lineno="659"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal">std::string<sp/><ref refid="_simple_g_v_x_r_8h_1a2540ae0646c910ba1c68f468d71770f8" kindref="member">getChildLabel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i);</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="666"><highlight class="comment"></highlight></codeline>
<codeline lineno="670"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1af48d8fdac5cd08f999ac53317bea21d2" kindref="member">getLocalTransformationMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel);</highlight></codeline>
<codeline lineno="672"><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="676"><highlight class="comment"></highlight></codeline>
<codeline lineno="680"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a9647a01539f7e68416e8dc7a1f332dff" kindref="member">setLocalTransformationMatrix</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>aMatrix);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="688"><highlight class="comment"></highlight></codeline>
<codeline lineno="691"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a75e208002b5ac068767a99088ba18f9d" kindref="member">applyCurrentLocalTransformation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel);</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="698"><highlight class="comment"></highlight></codeline>
<codeline lineno="713"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a88e6a78d2f84299bae95b2b1296da9ae" kindref="member">getNodeAndChildrenBoundingBox</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="721"><highlight class="comment"></highlight></codeline>
<codeline lineno="736"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1abbc0ba72376cfd66b63fd6391c71f990" kindref="member">getNodeOnlyBoundingBox</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cm&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="743"><highlight class="comment"></highlight></codeline>
<codeline lineno="746"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a0cc80f5ef79f06b447bec495f5c97c68" kindref="member">displayNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="752"><highlight class="comment"></highlight></codeline>
<codeline lineno="755"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a7dac7c6d68422b7e86944435a9a035f4" kindref="member">invertNormalVectors</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="761"><highlight class="comment"></highlight></codeline>
<codeline lineno="768"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1aed64e5b84cf09a952cafb0e24a86d693" kindref="member">setColor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>G,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>A);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="774"><highlight class="comment"></highlight></codeline>
<codeline lineno="781"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1aa4ed78a91448f99ee23c4cf7f3845213" kindref="member">setColour</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>G,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>B,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>A);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="787"><highlight class="comment"></highlight></codeline>
<codeline lineno="790"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal">std::vector&lt;float&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a1097bcfbeecaf9ed43bfdc0024a48c70" kindref="member">getAmbientColour</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="796"><highlight class="comment"></highlight></codeline>
<codeline lineno="799"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal">std::vector&lt;float&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a17824de8c345642821db10247482e5e1" kindref="member">getDiffuseColour</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="805"><highlight class="comment"></highlight></codeline>
<codeline lineno="808"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal">std::vector&lt;float&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a6e76db5ab1162a9c09ab0f1d4a3073ab" kindref="member">getSpecularColour</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="814"><highlight class="comment"></highlight></codeline>
<codeline lineno="817"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a842dfc01ad06ac6c3bf08ab78b4dc288" kindref="member">getShininess</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="824"><highlight class="comment"></highlight></codeline>
<codeline lineno="827"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a193db9e9eab8b3205d126387789e6907" kindref="member">addPolygonMeshAsInnerSurface</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="834"><highlight class="comment"></highlight></codeline>
<codeline lineno="837"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a71f514bb1ae0ca2e9fd19b3423685cb3" kindref="member">addPolygonMeshAsOuterSurface</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="841"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="844"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1af582363bdb3958279767ca1459c52173" kindref="member">removePolygonMeshesFromSceneGraph</ref>();</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="851"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1abb5ac6fa1e360fb8db58f63fc1453f20" kindref="member">removePolygonMeshesFromXRayRenderer</ref>();</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="857"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a931aa02220c52492126298021cf03997" kindref="member">moveToCenter</ref>();</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="863"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a73d0586e23fcb2f1f3fc1bb5dbe96924" kindref="member">moveToCentre</ref>();</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="869"><highlight class="comment"></highlight></codeline>
<codeline lineno="872"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a931aa02220c52492126298021cf03997" kindref="member">moveToCenter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="878"><highlight class="comment"></highlight></codeline>
<codeline lineno="881"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a73d0586e23fcb2f1f3fc1bb5dbe96924" kindref="member">moveToCentre</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="887"><highlight class="comment"></highlight></codeline>
<codeline lineno="903"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a6c702a3df32eee4e0a0c8033e5cbd6aa" kindref="member">scaleNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength);</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="913"><highlight class="comment"></highlight></codeline>
<codeline lineno="920"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a3a13d0e42ff6a485f0617afc565fbdb7" kindref="member">rotateNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>anAngle,</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z);</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="930"><highlight class="comment"></highlight></codeline>
<codeline lineno="946"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a29205bbf002e7aafc7053a992e3c168a" kindref="member">translateNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="956"><highlight class="comment"></highlight></codeline>
<codeline lineno="965"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a1a8d3be943217700650c800027a44883" kindref="member">shearNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yx,</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zx,</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xy,</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>zy,</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xz,</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yz);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="978"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ae80cfca75f6e77016d9c32ed152e763b" kindref="member">resetSceneTransformation</ref>();</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="985"><highlight class="comment"></highlight></codeline>
<codeline lineno="990"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a8cef1100241801fc4f06c414001e3ff2" kindref="member">scaleScene</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z);</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="997"><highlight class="comment"></highlight></codeline>
<codeline lineno="1012"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a8cef1100241801fc4f06c414001e3ff2" kindref="member">scaleScene</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength);</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1019"><highlight class="comment"></highlight></codeline>
<codeline lineno="1025"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a7fe19b103fe00ede3c5e8077ffeb518a" kindref="member">rotateScene</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>anAngle,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z);</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1032"><highlight class="comment"></highlight></codeline>
<codeline lineno="1047"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a45b9f362b177ac5a13342714ab5c01f6" kindref="member">translateScene</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength);</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1056"><highlight class="comment"></highlight></codeline>
<codeline lineno="1059"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a5d02d6f2cbfb9ed1059c045520f1973f" kindref="member">getSceneTransformationMatrix</ref>();</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1065"><highlight class="comment"></highlight></codeline>
<codeline lineno="1068"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1aa4aa9748df310aea560042330f573502" kindref="member">getRootTransformationMatrix</ref>();</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1074"><highlight class="comment"></highlight></codeline>
<codeline lineno="1078"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a3e7103cf57db663192b25daf5ba96d42" kindref="member">getNodeTransformationMatrix</ref>(</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel);</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1085"><highlight class="comment"></highlight></codeline>
<codeline lineno="1088"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1aa72652349c8b3370dfb1eabdbf52a8c8" kindref="member">setSceneTransformationMatrix</ref>(</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;&amp;<sp/>aMatrix);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"></highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1095"><highlight class="comment"></highlight></codeline>
<codeline lineno="1098"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a26b47d2b671031d42999f441001d1f5b" kindref="member">setRootTransformationMatrix</ref>(</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;&amp;<sp/>aMatrix);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1105"><highlight class="comment"></highlight></codeline>
<codeline lineno="1109"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a063a778b2fcbca187e029a00c8791d0c" kindref="member">setNodeTransformationMatrix</ref>(</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;&amp;<sp/>aMatrix);</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1118"><highlight class="comment"></highlight></codeline>
<codeline lineno="1122"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a666f02786b381f6674403e3cd0ea0701" kindref="member">setHU</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>HU);</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1129"><highlight class="comment"></highlight></codeline>
<codeline lineno="1133"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ab23dde2c54f7c4101bd6686fb607f35d" kindref="member">setHounsfieldUnit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>HU);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1140"><highlight class="comment"></highlight></codeline>
<codeline lineno="1144"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a745f0f88e63e0c61d85bafd05b3c8c16" kindref="member">setHounsfieldValue</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,<sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>HU);</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1151"><highlight class="comment"></highlight></codeline>
<codeline lineno="1155"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1affa210476df8611952212c278f8fe9c9" kindref="member">setElement</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>Z);</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1162"><highlight class="comment"></highlight></codeline>
<codeline lineno="1166"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1affa210476df8611952212c278f8fe9c9" kindref="member">setElement</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aName);</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1173"><highlight class="comment"></highlight></codeline>
<codeline lineno="1179"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a6cc34fdb74aec791b764c42f3452087a" kindref="member">setMixture</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aMixture);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1186"><highlight class="comment"></highlight></codeline>
<codeline lineno="1192"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a7667215c4b257434c1fdb46b8278f830" kindref="member">setCompound</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aCompound);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1200"><highlight class="comment"></highlight></codeline>
<codeline lineno="1207"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a5f456fc99da9709f5af260c7f7c2c722" kindref="member">setMassAttenuationCoefficient</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aCoefficient,</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnit);</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1216"><highlight class="comment"></highlight></codeline>
<codeline lineno="1223"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a40b33ab5dc57354052c2c8503034b3d7" kindref="member">setLinearAttenuationCoefficient</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aCoefficient,</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnit);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1232"><highlight class="comment"></highlight></codeline>
<codeline lineno="1239"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1aa6837904488dbbcac6d1f013f8527412" kindref="member">setMu</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aCoefficient,</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnit);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1247"><highlight class="comment"></highlight></codeline>
<codeline lineno="1254"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a05877ab6284a8559db52d3adaf7b1837" kindref="member">setDensity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aDensity,</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnit);</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1263"><highlight class="comment"></highlight></codeline>
<codeline lineno="1267"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a3b6bafe5b7184365b01f8d4dd7719f0b" kindref="member">getDensity</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel);</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1274"><highlight class="comment"></highlight></codeline>
<codeline lineno="1285"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ac856bc9af62ef66b7ecf7d9db884b490" kindref="member">getMassAttenuationCoefficient</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>anEnergy,</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfEnergy);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1294"><highlight class="comment"></highlight></codeline>
<codeline lineno="1305"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a5f2a0cb6b7cbd23890f9376b8fd4c1ff" kindref="member">getLinearAttenuationCoefficient</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>anEnergy,</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfEnergy);</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1313"><highlight class="comment"></highlight></codeline>
<codeline lineno="1317"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal">std::string<sp/><ref refid="_simple_g_v_x_r_8h_1aa4a8e041850ca152eefb166521a14029" kindref="member">getMaterialLabel</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel);</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="normal"></highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1323"><highlight class="comment"></highlight></codeline>
<codeline lineno="1328"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1329"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a17e1064097a6183115c1fe81822e32ff" kindref="member">createOpenGLContext</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1334"><highlight class="comment"></highlight></codeline>
<codeline lineno="1341"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a1015e854787d4aac76ce7bd0778684ca" kindref="member">createWindow</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID<sp/>=<sp/>-1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aVisibilityFlag<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1347"><highlight class="comment"></highlight></codeline>
<codeline lineno="1354"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a43893e298d8b93bf427b2ada57fe859d" kindref="member">setWindowSize</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWidth,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aHeight,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357"><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1361"><highlight class="comment"></highlight></codeline>
<codeline lineno="1369"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a70b00d6fbffedb6332cbf300fae03a6c" kindref="member">displayScene</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aSceneRotationFlag<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"></highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1384"><highlight class="comment"></highlight></codeline>
<codeline lineno="1389"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ad5f2ad0bc3d3a8faec876665b38e98e7" kindref="member">renderLoop</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1396"><highlight class="comment"></highlight></codeline>
<codeline lineno="1400"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a3198dbf5a2a5db26f3ff660bc096623e" kindref="member">startArcBallRotation</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"></highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1407"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a9f3c730eb6d54b2ccbfe188b1f0e8d48" kindref="member">stopArcBallRotation</ref>();</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"></highlight></codeline>
<codeline lineno="1411"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1413"><highlight class="comment"></highlight></codeline>
<codeline lineno="1416"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1af7b6643d296278d52d44e31e27333f96" kindref="member">usingArcBallRotation</ref>();</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"></highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1422"><highlight class="comment"></highlight></codeline>
<codeline lineno="1428"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a63a0fc9976892d417b8d0adb40f80e9e" kindref="member">cursorPositionCallback</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aViewportWidth,</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aViewportHeight);</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"></highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1437"><highlight class="comment"></highlight></codeline>
<codeline lineno="1442"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ae4b6f4d3fd3cd18f74f002d5a7ce9224" kindref="member">scrollCallback</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xoffset,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yoffset);</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1448"><highlight class="comment"></highlight></codeline>
<codeline lineno="1453"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ad83afb6f214408b967c83f16674e1ceb" kindref="member">showWindow</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"></highlight></codeline>
<codeline lineno="1457"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1459"><highlight class="comment"></highlight></codeline>
<codeline lineno="1464"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a3f6fb7d5c610d87e677add575fb901fd" kindref="member">hideWindow</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"></highlight></codeline>
<codeline lineno="1467"><highlight class="normal"></highlight></codeline>
<codeline lineno="1468"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1470"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1471"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a3998fea4e05c76a1fd2d37974a645ad0" kindref="member">destroyWindow</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aWindowID<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1476"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ac86d792db22ecd805d41178653b986a7" kindref="member">destroyAllWindows</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"></highlight></codeline>
<codeline lineno="1480"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1482"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a7fa8f9b4050b5727cd05529f320a5251" kindref="member">usePointSource</ref>();</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"></highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1486"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1489"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a0445b8fe702aeeca5f2b451bcab79836" kindref="member">useParallelBeam</ref>();</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1496"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1af0d213ffe3069b549499398f7b75dc97" kindref="member">useParallelSource</ref>();</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1502"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1503"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a82f5d828b75f302d2ccdfba39d2f16b9" kindref="member">resetBeamSpectrum</ref>();</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1508"><highlight class="comment"></highlight></codeline>
<codeline lineno="1517"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1518"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a1e10a1493cd2fd2d3299abc9c519b3e9" kindref="member">setMonoChromatic</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>anEnergy,</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfEnergy,</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aNumberOfPhotons);</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"></highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1525"><highlight class="comment"></highlight></codeline>
<codeline lineno="1534"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a8388db9b629c40efe7d6a33180eb0406" kindref="member">addEnergyBinToSpectrum</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>anEnergy,</highlight></codeline>
<codeline lineno="1536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfEnergy,</highlight></codeline>
<codeline lineno="1537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aNumberOfPhotons);</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1542"><highlight class="comment"></highlight></codeline>
<codeline lineno="1552"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a2163e6fff436eb05debd45d848681d64" kindref="member">loadSpectrumFromTSV</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aFileName,</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfEnergy,</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>aNormalisationFlag);</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"></highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1560"><highlight class="comment"></highlight></codeline>
<codeline lineno="1568"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a8924b6dcab4674bc33e24825cb7d1ebe" kindref="member">getEnergyBins</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfEnergy);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"></highlight></codeline>
<codeline lineno="1572"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1574"><highlight class="comment"></highlight></codeline>
<codeline lineno="1577"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1578"><highlight class="normal">std::vector&lt;double&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a71542b762755797939abab386ebbeb3c" kindref="member">getPhotonCountEnergyBins</ref>();</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1583"><highlight class="comment"></highlight></codeline>
<codeline lineno="1590"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1abb44c8ba20d31d7bb33afe27b86933be" kindref="member">saveSTLfile</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel,</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aFileName<sp/>=<sp/>std::string());</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1597"><highlight class="comment"></highlight></codeline>
<codeline lineno="1604"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a32e448289291a23d645c301b8c5c6482" kindref="member">saveLastXRayImage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aFileName<sp/>=<sp/>std::string(),</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useCompression<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"></highlight></codeline>
<codeline lineno="1609"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1611"><highlight class="comment"></highlight></codeline>
<codeline lineno="1618"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1619"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a30e9dcbbe24bc34add2f849655f6e5e4" kindref="member">saveLastLBuffer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aFileName<sp/>=<sp/>std::string(),</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useCompression<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1625"><highlight class="comment"></highlight></codeline>
<codeline lineno="1632"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a58a2b9e1ede05451b09797cdb13531ba" kindref="member">saveLastCumulatedLBuffer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aFileName<sp/>=<sp/>std::string(),</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useCompression<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"></highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1639"><highlight class="comment"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1abc0ba9cbdc0fe49d7da46dc8d25afb3f" kindref="member">saveLastSinogram</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aFileName<sp/>=<sp/>std::string(),</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useCompression<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1653"><highlight class="comment"></highlight></codeline>
<codeline lineno="1660"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a0723e5c30c74ae2bd5189f7567b39504" kindref="member">saveLastProjectionSet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aFileName<sp/>=<sp/>std::string(),</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>useCompression<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight></codeline>
<codeline lineno="1665"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1667"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1668"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1acd097bdd4b2ab5f9b8fc8991b316e533" kindref="member">enableArtefactFilteringOnGPU</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1669"><highlight class="normal"></highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1671"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1673"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a5898aa8c45e6c34137f10978b1d49526" kindref="member">enableArtifactFilteringOnGPU</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1677"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1680"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1aed410cdfc2b9d1d28d6820e6bfb57324" kindref="member">enableArtefactFilteringOnCPU</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1682"><highlight class="normal"></highlight></codeline>
<codeline lineno="1683"><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1687"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1688"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a7ef2b71a4bf9d57e06e975de75ba88dc" kindref="member">enableArtifactFilteringOnCPU</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"></highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1693"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1694"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a8825c3ab5571de7f6e665c944149a09f" kindref="member">disableArtefactFiltering</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"></highlight></codeline>
<codeline lineno="1696"><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1699"><highlight class="comment"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a73f8d211018dc40e3c3f17400230ffc8" kindref="member">disableArtifactFiltering</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1705"><highlight class="comment"></highlight></codeline>
<codeline lineno="1713"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a2bff58abee8cc5cd98e6a17c34e9af74" kindref="member">getUnitOfEnergy</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfEnergy);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"></highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1719"><highlight class="comment"></highlight></codeline>
<codeline lineno="1731"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1732"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a61e8cc31f2f3caa5ea89e019eec5e559" kindref="member">getUnitOfLength</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength);</highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"></highlight></codeline>
<codeline lineno="1735"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1746"><highlight class="comment"></highlight></codeline>
<codeline lineno="1749"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a5451b6f54339116e72cba6cc58e01be4" kindref="member">computeXRayImage</ref>();</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"></highlight></codeline>
<codeline lineno="1753"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1762"><highlight class="comment"></highlight></codeline>
<codeline lineno="1766"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a3fd962d97691068b4a0686570a06c147" kindref="member">computeLBuffer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aLabel);</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"></highlight></codeline>
<codeline lineno="1769"><highlight class="normal"></highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1782"><highlight class="comment"></highlight></codeline>
<codeline lineno="1801"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal">std::vector&lt;std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a3a52493fbad0ba16f886fb8f0fec612b" kindref="member">computeSinogram</ref>(</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,</highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength,</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aNumberOfAngle,</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>anAngleOffset);</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"></highlight></codeline>
<codeline lineno="1811"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1823"><highlight class="comment"></highlight></codeline>
<codeline lineno="1842"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal">std::vector&lt;std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1ace5245156e6abbba7c1e45facd19b86f" kindref="member">computeProjectionSet</ref>(</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y,</highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z,</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfLength,</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>aNumberOfAngle,</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>anAngleOffset);</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"></highlight></codeline>
<codeline lineno="1852"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1854"><highlight class="comment"></highlight></codeline>
<codeline lineno="1857"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1ab0814f041176d63ce590dc46e8721f5d" kindref="member">getLastXRayImage</ref>();</highlight></codeline>
<codeline lineno="1859"><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"></highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1863"><highlight class="comment"></highlight></codeline>
<codeline lineno="1866"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1867"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1adefbb2fdefe4ddcd43da3a8cd1c94957" kindref="member">getLastLBuffer</ref>();</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"></highlight></codeline>
<codeline lineno="1869"><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1872"><highlight class="comment"></highlight></codeline>
<codeline lineno="1875"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1876"><highlight class="normal">std::vector&lt;std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1ad8526de37a0350754af2f8868b50a83d" kindref="member">getLastSinogram</ref>();</highlight></codeline>
<codeline lineno="1877"><highlight class="normal"></highlight></codeline>
<codeline lineno="1878"><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1881"><highlight class="comment"></highlight></codeline>
<codeline lineno="1884"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1885"><highlight class="normal">std::vector&lt;std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a190d0b62ad7b87b414b6ff25a3236802" kindref="member">getLastProjectionSet</ref>();</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"></highlight></codeline>
<codeline lineno="1888"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1890"><highlight class="comment"></highlight></codeline>
<codeline lineno="1894"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1895"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a2fd74a1173b58acd49329e6d8f9e4f0f" kindref="member">getImageWidth</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;&amp;<sp/>anImage);</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"></highlight></codeline>
<codeline lineno="1897"><highlight class="normal"></highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1900"><highlight class="comment"></highlight></codeline>
<codeline lineno="1904"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a405587a06bb8b4188d32e9c2865ce0f0" kindref="member">getImageHeght</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;&amp;<sp/>anImage);</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"></highlight></codeline>
<codeline lineno="1907"><highlight class="normal"></highlight></codeline>
<codeline lineno="1908"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1910"><highlight class="comment"></highlight></codeline>
<codeline lineno="1915"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal">std::vector&lt;float&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a68e92985a191484817d8c0eb20ae2288" kindref="member">getImageRow</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;&amp;<sp/>anImage,</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j);</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"></highlight></codeline>
<codeline lineno="1920"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1922"><highlight class="comment"></highlight></codeline>
<codeline lineno="1926"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1927"><highlight class="normal">std::string<sp/><ref refid="_simple_g_v_x_r_8h_1a4fc536f8abfe8e4da84c3500b277ccca" kindref="member">getElementName</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>Z);</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1932"><highlight class="comment"></highlight></codeline>
<codeline lineno="1936"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal">std::string<sp/><ref refid="_simple_g_v_x_r_8h_1a2126c53d1d3b3b667b77796c32fc8b6b" kindref="member">getElementSymbol</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>Z);</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"></highlight></codeline>
<codeline lineno="1939"><highlight class="normal"></highlight></codeline>
<codeline lineno="1940"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1942"><highlight class="comment"></highlight></codeline>
<codeline lineno="1946"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1adaf08e1db28bdc950d3fda4e3c339f11" kindref="member">getElementAtomicNumber</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>anElement);</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"></highlight></codeline>
<codeline lineno="1949"><highlight class="normal"></highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1952"><highlight class="comment"></highlight></codeline>
<codeline lineno="1956"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1957"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a66250b34d317b34acac80de74ed818b7" kindref="member">getDensityFromElement</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>anElement);</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"></highlight></codeline>
<codeline lineno="1960"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1962"><highlight class="comment"></highlight></codeline>
<codeline lineno="1966"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a66250b34d317b34acac80de74ed818b7" kindref="member">getDensityFromElement</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>Z);</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"></highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1972"><highlight class="comment"></highlight></codeline>
<codeline lineno="1976"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1977"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1ad3f273e3fb319d02f61a31d49166b37c" kindref="member">getDensityFromHU</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HU);</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="1982"><highlight class="comment"></highlight></codeline>
<codeline lineno="1992"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a1741bff66bdbc6fb8480b53bc9c0b7bb" kindref="member">getMassAttenuationFromElement</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>anElement,</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>anEnergy,</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfEnergy);</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="2000"><highlight class="comment"></highlight></codeline>
<codeline lineno="2010"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a1741bff66bdbc6fb8480b53bc9c0b7bb" kindref="member">getMassAttenuationFromElement</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>Z,</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>anEnergy,</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfEnergy);</highlight></codeline>
<codeline lineno="2014"><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"></codeline>
<codeline lineno="2027"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a5c3cc32cad85894eccd540360af42c50" kindref="member">getMassAttenuationFromHU</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HU,</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>anEnergy,</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfEnergy);</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"></highlight></codeline>
<codeline lineno="2032"><highlight class="normal"></highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="2035"><highlight class="comment"></highlight></codeline>
<codeline lineno="2047"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1add3d514ce518f8207a5d16ee809cf5b0" kindref="member">getMassAttenuationFromMixture</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aMixture,</highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>anEnergy,</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfEnergy);</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"></highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"></highlight><highlight class="comment">//------------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="2055"><highlight class="comment"></highlight></codeline>
<codeline lineno="2067"><highlight class="comment">//------------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a4826978ac2240b8aee811ad31464f959" kindref="member">getMassAttenuationFromCompound</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aCompound,</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>anEnergy,</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfEnergy);</highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074"></codeline>
<codeline lineno="2084"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="_simple_g_v_x_r_8h_1a3acb9c86309f58436b2c8c0213d705b0" kindref="member">getMuFromHU</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HU,</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>anEnergy,</highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aUnitOfEnergy);</highlight></codeline>
<codeline lineno="2095"><highlight class="normal">std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/><ref refid="_simple_g_v_x_r_8h_1a9c93e28cc1b360c09fa1b98fc3eab70b" kindref="member">loadImage2D</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aFileName);</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"></highlight></codeline>
<codeline lineno="2097"><highlight class="normal">std::vector&lt;std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>&gt;<sp/>loadImage3D(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>aFileName);</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>computeZNCC(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>&gt;&amp;<sp/>aReferenceImage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>&gt;&amp;<sp/>aTestImage);</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"></highlight></codeline>
<codeline lineno="2101"><highlight class="normal"></highlight></codeline>
<codeline lineno="2102"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>computeRMSE(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>&gt;&amp;<sp/>aReferenceImage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>&gt;&amp;<sp/>aTestImage);</highlight></codeline>
<codeline lineno="2103"><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>getMinValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>&gt;&amp;<sp/>aImage);</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>getMaxValue(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;std::vector&lt;float&gt;<sp/>&gt;<sp/>&gt;&amp;<sp/>aImage);</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"></highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="SimpleGVXR.h"/>
  </compounddef>
</doxygen>
